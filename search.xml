<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ant构建Tomcat源码开发环境，解决乱码</title>
    <url>/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>学习tomcat，因为网上好多使用maven搭建的tomcat，但tomcat官方推荐的是使用ant搭建，所以在此记录。</p>
<p>上半部分搭建环境，下半部分解决乱码。</p>
<p>参考资料:</p>
<p><a class="link" href="https://tomcat.apache.org/tomcat-8.5-doc/building.html">官方搭建开发环境文档<i class="fas fa-external-link-alt"></i></a>(推荐一定要先看一下文档)</p>
<p>解决乱码{</p>
<p><a class="link" href="https://juejin.cn/post/6967701837696729124">关于Tomcat源码启动的乱码问题的解决<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://stackoverflow.com/questions/4659929/how-to-use-utf-8-in-resource-properties-with-resourcebundle">How to use UTF-8 in resource properties with ResourceBundle<i class="fas fa-external-link-alt"></i></a></p>
<p>}</p>
<p>解决访问报错{</p>
<p><a class="link" href="https://github.com/gqzdev/tomcat-start">解决访问500无法为JSP编译类问题<i class="fas fa-external-link-alt"></i></a></p>
<p>}</p>
<h2 id="搭建源码启动环境"><a href="#搭建源码启动环境" class="headerlink" title="搭建源码启动环境"></a>搭建源码启动环境</h2><p>当前环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装jdk</span></span><br><span class="line">chaoqiang@Pineapple bin % java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_322&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (Zulu 8.60.0.21-CA-macos-aarch64) (build 1.8.0_322-b06)</span><br><span class="line">OpenJDK 64-Bit Server VM (Zulu 8.60.0.21-CA-macos-aarch64) (build 25.322-b06, mixed mode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ant</span></span><br><span class="line">chaoqiang@Pineapple bin % ant -version</span><br><span class="line">Apache Ant(TM) version 1.10.10 compiled on April 12 2021</span><br></pre></td></tr></table></figure>

<h2 id="下载tomcat源码"><a href="#下载tomcat源码" class="headerlink" title="下载tomcat源码"></a>下载tomcat源码</h2><p>本人使用tomcat8.5,可根据个人需求在官网选择版本</p>
<h3 id="解压源码包"><a href="#解压源码包" class="headerlink" title="解压源码包"></a>解压源码包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple self-learn % ll</span><br><span class="line">total 13728</span><br><span class="line">drwxr-xr-x  16 chaoqiang  staff      512  2  6 13:46 ./</span><br><span class="line">drwxr-xr-x+ 68 chaoqiang  staff     2176  2  5 23:26 ../</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    10244  2  5 21:34 .DS_Store</span><br><span class="line">drwx------@  7 chaoqiang  staff      224 10 17 16:06 SpringBoot打包部署/</span><br><span class="line">drwx------@  5 chaoqiang  staff      160  4 23  2021 VODUploadDemo-java-1.4.14/</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff  5961981  1 31 14:42 apache-tomcat-8.5.75-src.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple self-learn % tar -zxvf apache-tomcat-8.5.75-src.tar.gz </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改构建jar包指定路径"><a href="#修改构建jar包指定路径" class="headerlink" title="修改构建jar包指定路径"></a>修改构建jar包指定路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple apache-tomcat-8.5.75-src % <span class="built_in">pwd</span></span><br><span class="line">/Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src</span><br><span class="line">chaoqiang@Pineapple apache-tomcat-8.5.75-src % vi build.properties.default </span><br></pre></td></tr></table></figure>



<p>修改base.path属性，默认为用户路径下的/tomcat-build-libs，修改为源码目录下/tomcat-build-libs</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206142732170.png" alt="image-20220206142732170"></p>
<h3 id="指定ide开始构建"><a href="#指定ide开始构建" class="headerlink" title="指定ide开始构建"></a>指定ide开始构建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple apache-tomcat-8.5.75-src % ant ide-intellij </span><br><span class="line">Buildfile: /Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src/build.xml</span><br><span class="line"></span><br><span class="line">download-compile:</span><br><span class="line"></span><br><span class="line">testexist:</span><br><span class="line">     [<span class="built_in">echo</span>] Testing  <span class="keyword">for</span> /Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src/commons-daemon-1.2.4/commons-daemon-1.2.4.jar</span><br><span class="line"></span><br><span class="line">downloadgz-2:</span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ide-intellij:</span><br><span class="line">     [copy] Copying 10 files to /Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src/.idea</span><br><span class="line">     [<span class="built_in">echo</span>] IntelliJ IDEA project directory created. Please create PATH VARIABLES <span class="keyword">for</span></span><br><span class="line">     [<span class="built_in">echo</span>] </span><br><span class="line">     [<span class="built_in">echo</span>]       ANT_HOME          = /Users/chaoqiang/.sdkman/candidates/ant/current</span><br><span class="line">     [<span class="built_in">echo</span>]       TOMCAT_BUILD_LIBS = /Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src</span><br><span class="line">     [<span class="built_in">echo</span>]     </span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line">Total time: 27 seconds</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple ~ % <span class="built_in">export</span> | grep ANT_HOME</span><br><span class="line">ANT_HOME=/Users/chaoqiang/.sdkman/candidates/ant/current</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple ~ % <span class="built_in">export</span> | grep TOMCAT_BUILD_LIBS</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple apache-tomcat-8.5.75-src % ll</span><br><span class="line">total 680</span><br><span class="line">drwxr-xr-x  36 chaoqiang  staff    1152  2  6 13:58 ./</span><br><span class="line">drwxr-xr-x  17 chaoqiang  staff     544  2  6 13:47 ../</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    1061  1 18 06:07 .editorconfig</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    1451  1 18 06:07 .gitignore</span><br><span class="line">drwxr-xr-x  10 chaoqiang  staff     320  2  6 13:58 .idea/</span><br><span class="line">drwxr-xr-x@  3 chaoqiang  staff      96  1 18 06:07 .travis/</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    3181  1 18 06:07 .travis.yml</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff   19585  1 18 06:07 BUILDING.txt</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    6210  1 18 06:07 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff   44901  1 18 06:07 KEYS</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff   57011  1 18 06:07 LICENSE</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    3225  1 18 06:07 MERGE.txt</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    1726  1 18 06:07 NOTICE</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    3378  1 18 06:07 README.md</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    7228  1 18 06:07 RELEASE-NOTES</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff   16696  1 18 06:07 RUNNING.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>让添加两个环境变量，先暂时不添加TOMCAT_BUILD_LIBS，可以看到当前源码目录已经有.idea项目文件了</p>
<h3 id="idea导入项目"><a href="#idea导入项目" class="headerlink" title="idea导入项目"></a>idea导入项目</h3><p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141142916.png" alt="image-20220206141142916"></p>
<p>选择源码路径，new Window</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141419296.png" alt="image-20220206141419296"></p>
<p>项目导入后，找到BootStrap类，启动报错，说是部分包没找到</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141547288.png" alt="image-20220206141547288"></p>
<p>打开File-&gt;ProjectStructure</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141719356.png" alt="image-20220206141719356"></p>
<p>发现module中的dependency中部分jar没法正常依赖</p>
<p>第一次打开应该是${TOMCAT_BUILD_LIBS}/*.jar这种带环境变量参数的相对路径</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206143054522.png" alt="image-20220206143054522"></p>
<p>打开项目启动设置</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141937586.png" alt="image-20220206141937586"></p>
<p>添加环境变量</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206142031646.png" alt="image-20220206142031646"></p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206143558758.png" alt="image-20220206143558758"></p>
<p>点击确定后，你可能会发现没什么变化，清一下idea缓存重新打开，会发现使用环境变量参数依赖的jar包都已成功转化为相对路径</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206143701905.png" alt="image-20220206143701905"></p>
<p>但还有一个junit的jar包找不到，手动设置上就好</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206143940847.png" alt="image-20220206143940847"></p>
<p>启动bootstrap类的main方法，尴尬的发现控制台输出全部乱码</p>
<p>​    <img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206144149233.png" alt="image-20220206144149233"></p>
<h2 id="乱码原因分析"><a href="#乱码原因分析" class="headerlink" title="乱码原因分析"></a>乱码原因分析</h2><p><a href="./Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90">原因</a></p>
<a href="/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/" title="Ant构建tomcat源码环境乱码原因分析">Ant构建tomcat源码环境乱码原因分析</a>


<h2 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h2><p>创建一个UTF8Control子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.tomcat.util.res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.PropertyResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTF8Control</span> <span class="keyword">extends</span> <span class="title">ResourceBundle</span>.<span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里重写父类的newBundle方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResourceBundle <span class="title">newBundle</span></span></span><br><span class="line"><span class="function">            <span class="params">(String baseName, Locale locale, String format, ClassLoader loader, <span class="keyword">boolean</span> reload)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IllegalAccessException, InstantiationException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// The below is a copy of the default implementation.</span></span><br><span class="line">        <span class="comment">//这里时默认的实现,c-v一下就好</span></span><br><span class="line">        String bundleName = toBundleName(baseName, locale);</span><br><span class="line">        String resourceName = toResourceName(bundleName, <span class="string">&quot;properties&quot;</span>);</span><br><span class="line">        ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line">        InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (reload) &#123;</span><br><span class="line">            URL url = loader.getResource(resourceName);</span><br><span class="line">            <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">                URLConnection connection = url.openConnection();</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">                    stream = connection.getInputStream();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stream = loader.getResourceAsStream(resourceName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Only this line is changed to make it to read properties files as UTF-8.</span></span><br><span class="line">                <span class="comment">//这里就是一个关键的地方,将原来的is使用UTF-8格式读取的InputStremReader包装起来</span></span><br><span class="line">                <span class="comment">//这里就会默认按照UTF-8格式读取!!!</span></span><br><span class="line">                bundle = <span class="keyword">new</span> PropertyResourceBundle(<span class="keyword">new</span> InputStreamReader(stream, StandardCharsets.UTF_8));</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bundle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，上面读取stream流后使用了StandardCharsets.UTF_8方式读取数据</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206172008318.png" alt="image-20220206172008318"></p>
<p>然后在StringManager中，指定control为常见的UTF8Control对象，就不会再使用那个默认的Control对象了</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206165620070.png" alt="image-20220206165620070"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>重新启动BootStrap,发现控制台已经可以正常打印中文</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206163217154.png" alt="image-20220206163217154"></p>
<p>出现报错是因为example项目中classes包默认标记为test类型，idea读不到，把它标记为Sources类型</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206163539516.png" alt="image-20220206163539516"></p>
<p>启动看起来没问题，浏览器访问<a class="link" href="http://127.0.0.1:8080/%E6%8A%A5%E9%94%99">http://127.0.0.1:8080/报错<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206163726207.png" alt="image-20220206163726207"></p>
<p>我去，又是500又是乱码，心态崩了啊</p>
<p>修改Localizer中的static代码块，将control传刚才创建的UTF8Bundle，重新启动</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206163947013.png" alt="image-20220206163947013"></p>
<p>乱码解决了，还是无法访问，前往org.apache.catalina.startup.ContextConfig#configureStart</p>
<p>添加一行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化 jsp 解析引擎</span></span><br><span class="line">        context.addServletContainerInitializer(<span class="keyword">new</span> JasperInitializer(),<span class="keyword">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重启完美解决，放一张汤姆猫压压惊:smiley:</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206165702691.png" alt="image-20220206165702691"></p>
]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>idea</tag>
        <tag>ant</tag>
      </tags>
  </entry>
  <entry>
    <title>Ant构建tomcat源码环境乱码原因分析</title>
    <url>/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><p>为什么会有乱码呢，根据网上资料，打印日志文件时，调用了StringManager类的getString方法，str就是getString方法返回的乱码值。</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/image-20220206150523421.png" alt="image-20220206150523421"></p>
<p>追ResoutceBundle的getString方法</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/image-20220206150949647-4140269.png" alt="image-20220206150949647"></p>
<p>可以看到，getString方法中调用了getObject,getObject中调用了handleGetObject，追handleGetObject发现它是一个抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets an object for the given key from this resource bundle.</span></span><br><span class="line"><span class="comment"> * Returns null if this resource bundle does not contain an</span></span><br><span class="line"><span class="comment"> * object for the given key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key for the desired object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> NullPointerException if &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the object for the given key, or null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">handleGetObject</span><span class="params">(String key)</span></span>;</span><br></pre></td></tr></table></figure>

<p>通过debug发现当打印日志时，传来的bundle是PropertyResourceBundle，PropertyResourceBundle是从lookup的Map中取值的,这个Map在初始化时候读取到的文件必须使用ISO-8859-1的编码，但tomcat国际化文件使用的是utf8编码，用iso-8859-1读肯定乱码。</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/image-20220206151441768-4140277.png" alt="ProprotyResourceBundle中的handleGetObject方法"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a property resource bundle from an &#123;<span class="doctag">@link</span> java.io.InputStream</span></span><br><span class="line"><span class="comment">     * InputStream&#125;.  The property file read with this constructor</span></span><br><span class="line"><span class="comment">     * must be encoded in ISO-8859-1.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stream an InputStream that represents a property file</span></span><br><span class="line"><span class="comment">     *        to read from.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if an I/O error occurs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &lt;code&gt;stream&lt;/code&gt; is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> stream&#125; contains a</span></span><br><span class="line"><span class="comment">     *     malformed Unicode escape sequence.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PropertyResourceBundle</span> <span class="params">(InputStream stream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(stream);</span><br><span class="line">        lookup = <span class="keyword">new</span> HashMap(properties);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>解决三种思路：</p>
<ul>
<li>修改tomcat国际化文件为utf-8编码</li>
<li>将使用ISO-8859-1读取的乱码字符串转化为字节数组再转为UTF-8字符串str = new String(str.getBytes(“ISO-8859-1”), “UTF-8”);<ul>
<li>这样会向堆中创建大量String对象，这么干肯定不行</li>
</ul>
</li>
<li>换一个ResourceBundle，这样调用其</li>
<li>java8之前的PropertyResourceBundle默认编码是ISO-8859-1,java9后默认为UTF-8，所以升级jdk版本是最方便的办法</li>
</ul>
<p>换tomcat国际化编码文件太多，换jdk版本也太简单，所以考虑换一个ResourceBundle,那这个ResourceBundle从哪里来的呢?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new StringManager for a given package. This is a</span></span><br><span class="line"><span class="comment">     * private method and all access to it is arbitrated by the</span></span><br><span class="line"><span class="comment">     * static getManager method call so that only one StringManager</span></span><br><span class="line"><span class="comment">     * per package will be created.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName Name of package to create StringManager for.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StringManager</span><span class="params">(String packageName, Locale locale)</span> </span>&#123;</span><br><span class="line">        String bundleName = packageName + <span class="string">&quot;.LocalStrings&quot;</span>;</span><br><span class="line">        ResourceBundle bnd = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// The ROOT Locale uses English. If English is requested, force the</span></span><br><span class="line">            <span class="comment">// use of the ROOT Locale else incorrect results may be obtained if</span></span><br><span class="line">            <span class="comment">// the system default locale is not English and translations are</span></span><br><span class="line">            <span class="comment">// available for the system default locale.</span></span><br><span class="line">            <span class="keyword">if</span> (locale.getLanguage().equals(Locale.ENGLISH.getLanguage())) &#123;</span><br><span class="line">                locale = Locale.ROOT;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//使用ExtClassLoader获取到bnd对象</span></span><br><span class="line">            bnd = ResourceBundle.getBundle(bundleName, locale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MissingResourceException ex) &#123;</span><br><span class="line">            <span class="comment">// Try from the current loader (that&#x27;s the case for trusted apps)</span></span><br><span class="line">            <span class="comment">// Should only be required if using a TC5 style classloader structure</span></span><br><span class="line">            <span class="comment">// where common != shared != server</span></span><br><span class="line">            ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            <span class="keyword">if</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bnd = ResourceBundle.getBundle(bundleName, locale, cl);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MissingResourceException ex2) &#123;</span><br><span class="line">                    <span class="comment">// Ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bundle = bnd;</span><br><span class="line">        <span class="comment">// Get the actual locale, which may be different from the requested one</span></span><br><span class="line">        <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Locale bundleLocale = bundle.getLocale();</span><br><span class="line">            <span class="keyword">if</span> (bundleLocale.equals(Locale.ROOT)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.locale = Locale.ENGLISH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.locale = bundleLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.locale = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>21行bnd = ResourceBundle.getBundle(bundleName, locale);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle <span class="title">getBundle</span><span class="params">(String baseName,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                 Locale locale)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBundleImpl(baseName, locale,</span><br><span class="line">                             getLoader(Reflection.getCallerClass()),</span><br><span class="line">                             getDefaultControl(baseName));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第7行返回一个默认的Control对象，使用了SPI机制，有兴趣的可移步</p>
<p>第5行获取Bundle实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle <span class="title">getBundleImpl</span><span class="params">(String baseName, Locale locale,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                ClassLoader loader, Control control)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (locale == <span class="keyword">null</span> || control == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We create a CacheKey here for use by this call. The base</span></span><br><span class="line">        <span class="comment">// name and loader will never change during the bundle loading</span></span><br><span class="line">        <span class="comment">// process. We have to make sure that the locale is set before</span></span><br><span class="line">        <span class="comment">// using it as a cache key.</span></span><br><span class="line">        CacheKey cacheKey = <span class="keyword">new</span> CacheKey(baseName, locale, loader);</span><br><span class="line">        ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Quick lookup of the cache.</span></span><br><span class="line">        BundleReference bundleRef = cacheList.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (bundleRef != <span class="keyword">null</span>) &#123;</span><br><span class="line">            bundle = bundleRef.get();</span><br><span class="line">            bundleRef = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If this bundle and all of its parents are valid (not expired),</span></span><br><span class="line">        <span class="comment">// then return this bundle. If any of the bundles is expired, we</span></span><br><span class="line">        <span class="comment">// don&#x27;t call control.needsReload here but instead drop into the</span></span><br><span class="line">        <span class="comment">// complete loading process below.</span></span><br><span class="line">        <span class="keyword">if</span> (isValidBundle(bundle) &amp;&amp; hasValidParentChain(bundle)) &#123;</span><br><span class="line">            <span class="keyword">return</span> bundle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// No valid bundle was found in the cache, so we need to load the</span></span><br><span class="line">        <span class="comment">// resource bundle and its parents.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isKnownControl = (control == Control.INSTANCE) ||</span><br><span class="line">                                   (control <span class="keyword">instanceof</span> SingleFormatControl);</span><br><span class="line">        List&lt;String&gt; formats = control.getFormats(baseName);</span><br><span class="line">        <span class="keyword">if</span> (!isKnownControl &amp;&amp; !checkList(formats)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid Control: getFormats&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ResourceBundle baseBundle = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Locale targetLocale = locale;</span><br><span class="line">             targetLocale != <span class="keyword">null</span>;</span><br><span class="line">             targetLocale = control.getFallbackLocale(baseName, targetLocale)) &#123;</span><br><span class="line">            List&lt;Locale&gt; candidateLocales = control.getCandidateLocales(baseName, targetLocale);</span><br><span class="line">            <span class="keyword">if</span> (!isKnownControl &amp;&amp; !checkList(candidateLocales)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid Control: getCandidateLocales&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bundle = findBundle(cacheKey, candidateLocales, formats, <span class="number">0</span>, control, baseBundle);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the loaded bundle is the base bundle and exactly for the</span></span><br><span class="line">            <span class="comment">// requested locale or the only candidate locale, then take the</span></span><br><span class="line">            <span class="comment">// bundle as the resulting one. If the loaded bundle is the base</span></span><br><span class="line">            <span class="comment">// bundle, it&#x27;s put on hold until we finish processing all</span></span><br><span class="line">            <span class="comment">// fallback locales.</span></span><br><span class="line">            <span class="keyword">if</span> (isValidBundle(bundle)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isBaseBundle = Locale.ROOT.equals(bundle.locale);</span><br><span class="line">                <span class="keyword">if</span> (!isBaseBundle || bundle.locale.equals(locale)</span><br><span class="line">                    || (candidateLocales.size() == <span class="number">1</span></span><br><span class="line">                        &amp;&amp; bundle.locale.equals(candidateLocales.get(<span class="number">0</span>)))) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If the base bundle has been loaded, keep the reference in</span></span><br><span class="line">                <span class="comment">// baseBundle so that we can avoid any redundant loading in case</span></span><br><span class="line">                <span class="comment">// the control specify not to cache bundles.</span></span><br><span class="line">                <span class="keyword">if</span> (isBaseBundle &amp;&amp; baseBundle == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    baseBundle = bundle;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bundle == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (baseBundle == <span class="keyword">null</span>) &#123;</span><br><span class="line">                throwMissingResourceException(baseName, locale, cacheKey.getCause());</span><br><span class="line">            &#125;</span><br><span class="line">            bundle = baseBundle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        keepAlive(loader);</span><br><span class="line">        <span class="keyword">return</span> bundle;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第48行findBundle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle <span class="title">findBundle</span><span class="params">(CacheKey cacheKey,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             List&lt;Locale&gt; candidateLocales,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             List&lt;String&gt; formats,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="keyword">int</span> index,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             Control control,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             ResourceBundle baseBundle)</span> </span>&#123;</span><br><span class="line">        Locale targetLocale = candidateLocales.get(index);</span><br><span class="line">        ResourceBundle parent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (index != candidateLocales.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            parent = findBundle(cacheKey, candidateLocales, formats, index + <span class="number">1</span>,</span><br><span class="line">                                control, baseBundle);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (baseBundle != <span class="keyword">null</span> &amp;&amp; Locale.ROOT.equals(targetLocale)) &#123;</span><br><span class="line">            <span class="keyword">return</span> baseBundle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Before we do the real loading work, see whether we need to</span></span><br><span class="line">        <span class="comment">// do some housekeeping: If references to class loaders or</span></span><br><span class="line">        <span class="comment">// resource bundles have been nulled out, remove all related</span></span><br><span class="line">        <span class="comment">// information from the cache.</span></span><br><span class="line">        Object ref;</span><br><span class="line">        <span class="keyword">while</span> ((ref = referenceQueue.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cacheList.remove(((CacheKeyReference)ref).getCacheKey());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// flag indicating the resource bundle has expired in the cache</span></span><br><span class="line">        <span class="keyword">boolean</span> expiredBundle = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First, look up the cache to see if it&#x27;s in the cache, without</span></span><br><span class="line">        <span class="comment">// attempting to load bundle.</span></span><br><span class="line">        cacheKey.setLocale(targetLocale);</span><br><span class="line">        ResourceBundle bundle = findBundleInCache(cacheKey, control);</span><br><span class="line">        <span class="keyword">if</span> (isValidBundle(bundle)) &#123;</span><br><span class="line">            expiredBundle = bundle.expired;</span><br><span class="line">            <span class="keyword">if</span> (!expiredBundle) &#123;</span><br><span class="line">                <span class="comment">// If its parent is the one asked for by the candidate</span></span><br><span class="line">                <span class="comment">// locales (the runtime lookup path), we can take the cached</span></span><br><span class="line">                <span class="comment">// one. (If it&#x27;s not identical, then we&#x27;d have to check the</span></span><br><span class="line">                <span class="comment">// parent&#x27;s parents to be consistent with what&#x27;s been</span></span><br><span class="line">                <span class="comment">// requested.)</span></span><br><span class="line">                <span class="keyword">if</span> (bundle.parent == parent) &#123;</span><br><span class="line">                    <span class="keyword">return</span> bundle;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Otherwise, remove the cached one since we can&#x27;t keep</span></span><br><span class="line">                <span class="comment">// the same bundles having different parents.</span></span><br><span class="line">                BundleReference bundleRef = cacheList.get(cacheKey);</span><br><span class="line">                <span class="keyword">if</span> (bundleRef != <span class="keyword">null</span> &amp;&amp; bundleRef.get() == bundle) &#123;</span><br><span class="line">                    cacheList.remove(cacheKey, bundleRef);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bundle != NONEXISTENT_BUNDLE) &#123;</span><br><span class="line">            CacheKey constKey = (CacheKey) cacheKey.clone();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bundle = loadBundle(cacheKey, formats, control, expiredBundle);</span><br><span class="line">                <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (bundle.parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        bundle.setParent(parent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    bundle.locale = targetLocale;</span><br><span class="line">                    bundle = putBundleInCache(cacheKey, bundle, control);</span><br><span class="line">                    <span class="keyword">return</span> bundle;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Put NONEXISTENT_BUNDLE in the cache as a mark that there&#x27;s no bundle</span></span><br><span class="line">                <span class="comment">// instance for the locale.</span></span><br><span class="line">                putBundleInCache(cacheKey, NONEXISTENT_BUNDLE, control);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (constKey.getCause() <span class="keyword">instanceof</span> InterruptedException) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第56行loadBundle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle <span class="title">loadBundle</span><span class="params">(CacheKey cacheKey,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             List&lt;String&gt; formats,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             Control control,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="keyword">boolean</span> reload)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Here we actually load the bundle in the order of formats</span></span><br><span class="line">        <span class="comment">// specified by the getFormats() value.</span></span><br><span class="line">        Locale targetLocale = cacheKey.getLocale();</span><br><span class="line"></span><br><span class="line">        ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> size = formats.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            String format = formats.get(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bundle = control.newBundle(cacheKey.getName(), targetLocale, format,</span><br><span class="line">                                           cacheKey.getLoader(), reload);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LinkageError error) &#123;</span><br><span class="line">                <span class="comment">// We need to handle the LinkageError case due to</span></span><br><span class="line">                <span class="comment">// inconsistent case-sensitivity in ClassLoader.</span></span><br><span class="line">                <span class="comment">// See 6572242 for details.</span></span><br><span class="line">                cacheKey.setCause(error);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception cause) &#123;</span><br><span class="line">                cacheKey.setCause(cause);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Set the format in the cache key so that it can be</span></span><br><span class="line">                <span class="comment">// used when calling needsReload later.</span></span><br><span class="line">                cacheKey.setFormat(format);</span><br><span class="line">                bundle.name = cacheKey.getName();</span><br><span class="line">                bundle.locale = targetLocale;</span><br><span class="line">                <span class="comment">// Bundle provider might reuse instances. So we should make</span></span><br><span class="line">                <span class="comment">// sure to clear the expired flag here.</span></span><br><span class="line">                bundle.expired = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bundle;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第15行newBundle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResourceBundle <span class="title">newBundle</span><span class="params">(String baseName, Locale locale, String format,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        ClassLoader loader, <span class="keyword">boolean</span> reload)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IllegalAccessException, InstantiationException, IOException </span>&#123;</span><br><span class="line">            String bundleName = toBundleName(baseName, locale);</span><br><span class="line">            ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (format.equals(<span class="string">&quot;java.class&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Class&lt;? extends ResourceBundle&gt; bundleClass</span><br><span class="line">                        = (Class&lt;? extends ResourceBundle&gt;)loader.loadClass(bundleName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// If the class isn&#x27;t a ResourceBundle subclass, throw a</span></span><br><span class="line">                    <span class="comment">// ClassCastException.</span></span><br><span class="line">                    <span class="keyword">if</span> (ResourceBundle.class.isAssignableFrom(bundleClass)) &#123;</span><br><span class="line">                        bundle = bundleClass.newInstance();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(bundleClass.getName()</span><br><span class="line">                                     + <span class="string">&quot; cannot be cast to ResourceBundle&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (format.equals(<span class="string">&quot;java.properties&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String resourceName = toResourceName0(bundleName, <span class="string">&quot;properties&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (resourceName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> bundle;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> ClassLoader classLoader = loader;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> reloadFlag = reload;</span><br><span class="line">                InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stream = AccessController.doPrivileged(</span><br><span class="line">                        <span class="keyword">new</span> PrivilegedExceptionAction&lt;InputStream&gt;() &#123;</span><br><span class="line">                            <span class="function"><span class="keyword">public</span> InputStream <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                                InputStream is = <span class="keyword">null</span>;</span><br><span class="line">                                <span class="keyword">if</span> (reloadFlag) &#123;</span><br><span class="line">                                    URL url = classLoader.getResource(resourceName);</span><br><span class="line">                                    <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        URLConnection connection = url.openConnection();</span><br><span class="line">                                        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                            <span class="comment">// Disable caches to get fresh data for</span></span><br><span class="line">                                            <span class="comment">// reloading.</span></span><br><span class="line">                                            connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">                                            is = connection.getInputStream();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    is = classLoader.getResourceAsStream(resourceName);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">return</span> is;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PrivilegedActionException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (IOException) e.getException();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bundle = <span class="keyword">new</span> PropertyResourceBundle(stream);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        stream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;unknown format: &quot;</span> + format);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> bundle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>31行读取STREAM流，55行发现stream流不为空，所以创建了一个PropertyResourceBundle。</p>
<p>难道真的没有办法了?</p>
<p>等等，我们是通过control的newBundle获取Bundle对象的，但是tomcat没有指定control对象，导致系统查找默认的Control对象，如果我们写一个Control对象，重写newBundle方法,返回一个使用UTF-8编码读取文件的bundle对象。</p>
<a href="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/" title="Ant构建Tomcat源码开发环境，解决乱码">Ant构建Tomcat源码开发环境，解决乱码</a>

]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>i18n</tag>
        <tag>Singleton</tag>
        <tag>类加载</tag>
      </tags>
  </entry>
  <entry>
    <title>JIT运行时优化</title>
    <url>/2022/01/05/JIT%E8%BF%90%E8%A1%8C%E6%97%B6%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="即时编译"><a href="#即时编译" class="headerlink" title="即时编译"></a>即时编译</h2><p>JVM将执行状态分成了5个层次</p>
<ul>
<li>0层:解释执行</li>
<li>1层:使用C1即时编译执行(不带profiling)</li>
<li>2层:使用C1即时编译执行(带基本的profiling)</li>
<li>3层:使用C1即时编译执行(带完全的profiling)</li>
<li>4层:使用C2即时编译器编译执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">profiling是指运行过程中收集一些程序执行状态的数据，例如【方法调用次数】，【循环的回编次数】</span><br></pre></td></tr></table></figure>

<p>即时编译器(JIT)与解释器的区别</p>
<ul>
<li>解释器是将字节码解释为机器码6，下次即时遇到相同的字节码，仍会执行重复的解释</li>
<li>JIT是将一些字节码编译为机器码，并存入Code Cache，下次遇到相同的代码，直接执行，无需再编译</li>
<li>解释器是将字节码解释为所有平台都通用的机器码</li>
<li>JIT会根据平台类型，生成平台特定的机器码</li>
</ul>
<p>HotSpot虚拟机发现热点代码并加以优化</p>
<h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C2编译器发现对象仅创建后没有引用，它干脆就不创建对象了</span><br></pre></td></tr></table></figure>

<h3 id="方法内连"><a href="#方法内连" class="headerlink" title="方法内连"></a>方法内连</h3><p>如果发现square是热点方法并且长度不长时，会进行内联:将方法内代码拷贝，粘贴到调用者位置</p>
<h4 id="常量折叠"><a href="#常量折叠" class="headerlink" title="常量折叠"></a>常量折叠</h4><p>如果发现方法内连每次调用的参数不变，干脆将结果直接作为一个常量返回</p>
<h4 id="字段优化"><a href="#字段优化" class="headerlink" title="字段优化"></a>字段优化</h4><p>方法内连会影响成员变量的读取结果，干脆直接将成员变量复制一份到局部变量中</p>
<h3 id="方法反射调用优化"><a href="#方法反射调用优化" class="headerlink" title="方法反射调用优化"></a>方法反射调用优化</h3><p>如果反射调用同一方法超过阈值15，不再通过native调用方法，JIT编译器会生成一个方法访问器类，由反射方法调用改为正常方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment"> * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This code is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="comment"> * under the terms of the GNU General Public License version 2 only, as</span></span><br><span class="line"><span class="comment"> * published by the Free Software Foundation.  Oracle designates this</span></span><br><span class="line"><span class="comment"> * particular file as subject to the &quot;Classpath&quot; exception as provided</span></span><br><span class="line"><span class="comment"> * by Oracle in the LICENSE file that accompanied this code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This code is distributed in the hope that it will be useful, but WITHOUT</span></span><br><span class="line"><span class="comment"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></span><br><span class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</span></span><br><span class="line"><span class="comment"> * version 2 for more details (a copy is included in the LICENSE file that</span></span><br><span class="line"><span class="comment"> * accompanied this code).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You should have received a copy of the GNU General Public License version</span></span><br><span class="line"><span class="comment"> * 2 along with this work; if not, write to the Free Software Foundation,</span></span><br><span class="line"><span class="comment"> * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA</span></span><br><span class="line"><span class="comment"> * or visit www.oracle.com if you need additional information or have any</span></span><br><span class="line"><span class="comment"> * questions.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sun.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.misc.ReflectUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Used only for the first few invocations of a Method; afterward,</span></span><br><span class="line"><span class="comment">    switches to bytecode-based implementation */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeMethodAccessorImpl</span> <span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> DelegatingMethodAccessorImpl parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numInvocations;</span><br><span class="line"></span><br><span class="line">    NativeMethodAccessorImpl(Method method) &#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// We can&#x27;t inflate methods belonging to vm-anonymous classes because</span></span><br><span class="line">        <span class="comment">// that kind of class can&#x27;t be referred to by name, hence can&#x27;t be</span></span><br><span class="line">        <span class="comment">// found from the generated bytecode.</span></span><br><span class="line">        <span class="keyword">if</span> (++numInvocations &gt; ReflectionFactory.inflationThreshold()</span><br><span class="line">                &amp;&amp; !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) &#123;</span><br><span class="line">            MethodAccessorImpl acc = (MethodAccessorImpl)</span><br><span class="line">                <span class="keyword">new</span> MethodAccessorGenerator().</span><br><span class="line">                    generateMethod(method.getDeclaringClass(),</span><br><span class="line">                                   method.getName(),</span><br><span class="line">                                   method.getParameterTypes(),</span><br><span class="line">                                   method.getReturnType(),</span><br><span class="line">                                   method.getExceptionTypes(),</span><br><span class="line">                                   method.getModifiers());</span><br><span class="line">            parent.setDelegate(acc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke0(method, obj, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(DelegatingMethodAccessorImpl parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">invoke0</span><span class="params">(Method m, Object obj, Object[] args)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2022/01/04/JVM-1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CAS与原子类</title>
    <url>/2022/01/05/CAS%E4%B8%8E%E5%8E%9F%E5%AD%90%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>compare and swap,体现的是乐观锁思想，比如多个线程要对一个共享的整形变量执行+1操作</p>
<p>获取共享变量时，为了保证该变量的可见性，需要使用volitile修饰，结合CAS和volitile可以实现无锁并发，适用于竞争不激烈，多核CPU(因为重试需要耗费CPU时间，老师说的CAS的前提是多个线程多核并行对某一共享变量进行操作)场景下</p>
<ul>
<li>没有使用synchronized，所以线程不会陷入阻塞(没有线程上下文切换的时间了)，这是效率提升的因素之一</li>
<li>如果竞争激烈，重试必然频繁发生，反而效率会受影响</li>
</ul>
<p>底层使用Unsafe类的compareAndSwapXXX</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndSetLong</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">long</span> newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> v;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = getLongVolatile(o, offset);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSwapLong(o, offset, v, newValue));</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h2><ul>
<li>CAS基于乐观锁的思想</li>
<li>synchronized是悲观锁</li>
</ul>
<h3 id="原子操作类"><a href="#原子操作类" class="headerlink" title="原子操作类"></a>原子操作类</h3><ul>
<li>AtomicInteger</li>
<li>AtomicBoolean</li>
<li>AtomicLong等</li>
</ul>
<h2 id="synchronized锁优化"><a href="#synchronized锁优化" class="headerlink" title="synchronized锁优化"></a>synchronized锁优化</h2><p>HotSpot虚拟机中，每个对象都有对象头(包含class指针和MarkWord(8个字节，存储对象hash码，分代年龄，一旦加锁，这些信息就根据情况被替换为标记位，线程锁记录指针，重量级锁指针，线程ID等内容)) </p>
<h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>如果一个对象有多个线程访问，但多线程访问的时间是错开的，那么可以使用轻量级锁来优化</p>
<p>每个线程的栈帧都会包含一个锁记录(栈结构)的结构，内部可以存储解锁对象加锁前的Mark Word</p>
<h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>轻量级锁通过锁膨胀升级为重量级锁</p>
<p>![截屏2022-01-03 下午10.37.29](./CAS与原子类/截屏2022-01-03 下午10.37.29.png)</p>
<h4 id="重量级锁优化"><a href="#重量级锁优化" class="headerlink" title="重量级锁优化"></a>重量级锁优化</h4><p>自旋</p>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li>尽量减少上锁时间</li>
<li>减小锁的粒度<ul>
<li>ConcurrentHashMap</li>
</ul>
</li>
<li>锁粗化</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2021/12/28/JVM/</url>
    <content><![CDATA[<p>本文档根据黑马JVM教程书写，在此感谢黑马和满一航老师的知识分享</p>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-RQHatEgqIyZYZKbu" src="https://player.bilibili.com/player.html?bvid=BV1yE411Z7AP&page=1&high_quality=1&danmaku=false" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-RQHatEgqIyZYZKbu").style.height=document.getElementById("mmedia-RQHatEgqIyZYZKbu").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-RQHatEgqIyZYZKbu").style.height=document.getElementById("mmedia-RQHatEgqIyZYZKbu").scrollWidth*0.76+"px";
    }; </script>


<ul>
<li><a href="/2022/01/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/" title="JVM内存结构">JVM内存结构</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JMM内存模型</title>
    <url>/2022/01/05/JMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="JMM内存模型"><a href="#JMM内存模型" class="headerlink" title="JMM内存模型"></a>JMM内存模型</h1><p>java内存模型</p>
<p><a class="link" href="https://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf">Java Memory Model(JMM)<i class="fas fa-external-link-alt"></i></a></p>
<p>JMM定义了一套在多线程读写共享数据时(成员变量，数组)时，对数据的可见性，有序性和原子性的规则和保障</p>
<h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>现象：</p>
<p>两个线程对同一个静态变量分别做5000次自增和自减，结果不一定是0，是因为java对静态变量的自增自减不是原子操作</p>
<p>![截屏2022-01-03 下午5.27.05](./JMM内存模型/截屏2022-01-03 下午5.27.05.png)</p>
<p>解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">	<span class="comment">//要作为原子操作代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>![截屏2022-01-03 下午5.41.55](./JMM内存模型/截屏2022-01-03 下午5.41.55.png)</p>
<p>方便的话加锁范围，因为频繁moniterenter和moniterexit相对耗时</p>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>JIT编译器会将频繁执行的代码放入高速缓存，如果线程中检测的对象被缓存到该线程的内存中，主存对检测对象的修改不会被上面线程检测到</p>
<p>解决方法:</p>
<p>volitile</p>
<p>可修饰成员变量，避免线程从自己的工作缓存中查找变量的值</p>
<p>它保证的是多个线程之间，一个线程对volitile变量的修改对另一个线程可见，不能保证原子性，仅用在一个写线程，多个读线程的情况</p>
<p>注意:</p>
<p>synchronized语句块可保证代码块的原子性和可见性，但缺点是重量级锁，性能相对更低</p>
<p>System.out.println在内部加了锁</p>
<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>jit编译器对于在单线程操作，不影响操作结果的情况下进行指令重排</p>
<p>双重校验锁单例不使用volitile可能会返回没有实例化完成的对象</p>
<p>使用volitile禁止指令重排，有方向</p>
]]></content>
  </entry>
  <entry>
    <title>JVM内存结构</title>
    <url>/2022/01/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="/2022/01/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20220104232039407.png" alt="image-20220104232039407"></p>
<h3 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h3><p>每个线程独有，永远不会发生内存溢出，对应CPU中的高速缓存器,用于记录线程下一条执行语句的行数，当时间片轮转回该线程时，从原有位置继续执行</p>
<h3 id="2-栈内存"><a href="#2-栈内存" class="headerlink" title="2.栈内存"></a>2.栈内存</h3><p>每个线程数独有</p>
<h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><ul>
<li>每个线程运行时所需要的内存，成为虚拟机栈</li>
<li>每个栈有多个栈帧组成，对应着每 次方法调用时所占用的内存</li>
<li>每个线程只能有一个活动栈帧，对应着当前正在执行的方法</li>
</ul>
<p>垃圾回收不涉及栈内存</p>
<p>方法内的局部变量是否线程安全</p>
<ul>
<li>如果方法内局部变量没有逃离方法的作用范围，它是线程安全的</li>
<li>如果局部变量引用了对象，并逃离了方法的作用范围，需要考虑线程安全</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法可能发生指令重排序，sb还没有发生append时被其他线程引用到，导致变量不安全(看弹幕里一个人说的，好像蛮有道理)</span></span><br><span class="line"><span class="comment">     * //todo学习逃逸分析</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">m3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>栈内存设置越大，最大线程数随之越少，设置大了只会增大方法调用次数</p>
<h5 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h5><p>java.lang.StackOverflowError</p>
<ol>
<li>栈帧过多可能导致栈内存溢出(递归调用)<ol>
<li>自己写的递归方法未写好破坏方法</li>
<li>使用第三方框架(比如部门中有员工，员工中有部门，使用JSONObject映射部门和员工数据)</li>
</ol>
</li>
<li>栈帧过大可能导致栈内存溢出(不太可能出现)</li>
</ol>
<h3 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h3><p>给本地方法运行提供内存空间</p>
<p>native方法</p>
<ul>
<li>Object<ul>
<li>clone</li>
<li>hashCode</li>
<li>notify</li>
<li>notifyAll</li>
<li>wait</li>
</ul>
</li>
</ul>
<h3 id="4-堆Heap"><a href="#4-堆Heap" class="headerlink" title="4.堆Heap"></a>4.堆Heap</h3><p>通过new关键字创建的对象都会使用对内存</p>
<p>特点:</p>
<ul>
<li>线程共享的，堆中对象都需要考虑线程安全的问题</li>
<li>有垃圾回收机制</li>
</ul>
<h4 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h4><p>java.lang.OutOfMemoryError:Java heap space </p>
<h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><h5 id="eden区"><a href="#eden区" class="headerlink" title="eden区"></a>eden区</h5><h5 id="survior"><a href="#survior" class="headerlink" title="survior"></a>survior</h5><h6 id="From-Space"><a href="#From-Space" class="headerlink" title="From Space"></a>From Space</h6><h6 id="To-Space"><a href="#To-Space" class="headerlink" title="To Space"></a>To Space</h6><h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h4><h3 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h3><p>概念上属于堆，但是具体实现上不同JVM厂商实现方式不同，可能不在堆内存</p>
<p><img src="/2022/01/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/2.png" alt="HotSpot虚拟机JVM内存结构"></p>
<h4 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h4><p>jdk1.6以前使用堆的一部分</p>
<h4 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h4><p>jdk1.8以后使用的是操作系统内存</p>
<h4 id="方法区内存溢出"><a href="#方法区内存溢出" class="headerlink" title="方法区内存溢出"></a>方法区内存溢出</h4><p>元空间内存溢出java.lang.OutOfMemoryError:Metaspace</p>
<p>永久代内存溢出java.lang.OutOfMemoryError:PermGen space</p>
<p>实际开发方法区内存溢出场景</p>
<ul>
<li>spring</li>
<li>mybatis</li>
</ul>
<p>使用cglib动态生成加载类可能导致方法区内存溢出</p>
<h5 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p>常量池</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">就是一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型，字面量等信息</span><br></pre></td></tr></table></figure>

<p>运行时常量池</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常量池是在*.class文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</span><br></pre></td></tr></table></figure>

<h6 id="StringTable串池"><a href="#StringTable串池" class="headerlink" title="StringTable串池[]"></a>StringTable串池[]</h6><ul>
<li>常量池中的字符串仅是符号，第一次用到时才变为对象</li>
<li>利用串池的机制，来避免重复创建字符串对象</li>
<li>字符串变量拼接的原理是StringBuilder(1.8)</li>
<li>字符串常量拼接的原理是编译期优化</li>
<li>可以使用intern方法，主动将串池中还没有的字符串对象放入串池<ul>
<li>1.8将这个字符串对象尝试放入串池，如果有则不会放入，如果没有则放入串池，会把串池中的对象返回</li>
<li>1.6将这个字符串对象尝试放入串池，如果有则不会放入，如果没有会把此对象复制一份放入串池，会把串池中的对象返回</li>
</ul>
</li>
</ul>
<p>常量池中的信息，都会被加载到运行时常量池中，这时a b ab都是常量池中的符号，还没有变为java字符串对象，当执行命令使用到该符号时，才从常量池中拿出来转变为java字符串对象并放入串池中</p>
<p>HashTable结构，不能扩容</p>
<p>java编译器在遇到常量字符串拼接时，会将拼接后的结果也定义为常量并放到字符串常量池中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">String s3 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">String s4 = s1+s2;<span class="comment">//相当于StringBuilder.append...toString方法，StringBuilder的toString方法实现为new String</span></span><br><span class="line">String s5 = <span class="string">&quot;a&quot;</span>+<span class="string">&quot;b&quot;</span>;<span class="comment">//java编译器在编译时优化，已确定s5为&quot;ab&quot;，运行时直接找&quot;ab&quot;这个常量</span></span><br><span class="line">String s6 = s4.intern();</span><br><span class="line">s3 == s4; <span class="comment">// false</span></span><br><span class="line">s3 == s5;	<span class="comment">//true</span></span><br><span class="line">s3 == s6;	<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String x2 = <span class="keyword">new</span> String(<span class="string">&quot;c&quot;</span>)+<span class="keyword">new</span> String(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">String x1 = <span class="string">&quot;cd&quot;</span>;</span><br><span class="line">x2.intern()</span><br><span class="line">x1 == x2; <span class="comment">//jdk1.8false,jdk1.6false</span></span><br><span class="line"></span><br><span class="line">String x2 = <span class="keyword">new</span> String(<span class="string">&quot;c&quot;</span>)+<span class="keyword">new</span> String(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">x2.intern();</span><br><span class="line">String x1 = <span class="string">&quot;cd&quot;</span>;</span><br><span class="line"></span><br><span class="line">x1 == x2; <span class="comment">//jdk1.8true,jdk1.6false</span></span><br></pre></td></tr></table></figure>

<p>StringTable位置</p>
<ul>
<li>1.6时，stringtable是常量池一部分，位于方法区(永久代)（永久代回收效率低，需要full gc时才会触发垃圾回收）</li>
<li>1.7开始，StringTable转移到堆中（miner gc就会触发回收）</li>
</ul>
<p>StringTable属于堆中新生代位置，可以进行垃圾回收</p>
<h6 id="StringTable性能调优"><a href="#StringTable性能调优" class="headerlink" title="StringTable性能调优"></a>StringTable性能调优</h6><ul>
<li>如果字符串常量较多，调大字符串常量池桶初始大小，减少hash冲突<ul>
<li>-XX:StringTableSize=200000</li>
</ul>
</li>
<li>考虑将字符串对象是否入池<ul>
<li>推特存储用户地址将地址入池后内存占用减少</li>
</ul>
</li>
</ul>
<h2 id="6-直接内存"><a href="#6-直接内存" class="headerlink" title="6.直接内存"></a>6.直接内存</h2><p>操作系统内存Direct Memory</p>
<ul>
<li>常见于NIO操作，用于数据缓冲区</li>
<li>分配回收成本较高，但读写性能高</li>
<li>不受JVM内存回收管理</li>
</ul>
<p>使用直接内存比使用普通内存少了一次系统缓存与jvm缓存交换数据的操作，java代码可以直接操作系统内存中的数据</p>
<p>可能出现直接内存溢出错误</p>
<p>java.lang.OutOfMemoryError: Direct buffer memory</p>
<p>直接对象的分配和释放通过Unsafe对象进行，必须通过反射才能拿到，垃圾回收只能释放java内存，回收时必须主动调用unsafe对象的freeMemory方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Unsafe unsafe = getUnsafe();</span><br><span class="line"><span class="keyword">long</span> base = unsafe.allocateMemory(_1Gb);</span><br><span class="line"><span class="comment">//base 内存首地址 _1Gb偏移量 0(将内存中地址范围内所有字节都设置为0)</span></span><br><span class="line">unsafe.setMemory(base,_1Gb,(<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">unsafe.freeMemory(base);</span><br><span class="line">System.in.read();</span><br></pre></td></tr></table></figure>

<p>DirectByteBuffer在构造函数中分配了一个Cleaner对象(虚引用类型)，当与之关联的对象被垃圾回收时，向队列中添加一个会触发虚引用对象Cleaner中的clean方法(不是在主线程执行，而是在referenceHandler守护线程执行)，clean方法执行传入的释放内存任务对象的run方法去释放内存<a href="/Users/chaoqiang/Documents/ByteBuffer%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E9%87%8A%E6%94%BE%E6%BA%90%E7%A0%81.md">参见ByteBuffer源码</a></p>
<p>System.gc()是fullgc</p>
<h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><h4 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h4>]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/28/Linux%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<h1 id="java命令实操"><a href="#java命令实操" class="headerlink" title="java命令实操"></a>java命令实操</h1><p>案例1:CPU占用过高</p>
<p>定位</p>
<ul>
<li>top实时检测进程对CPU和内存资源的消耗，检测哪个进程对资源占用高</li>
<li>ps H -eo pid,tid,%cpu | grep 进程id  查看指定进程中所有线程，线程(10进制)，占用内存</li>
<li>jstack 进程id <ul>
<li>根据进程id查看进程中所有线程，定位nid(16进制)(tid指Java Thread Id，nid指的是native线程的id)</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br><span class="line">ps H -eo pid,tid,%cpu | grep 进程id </span><br><span class="line">jstack 进程id</span><br></pre></td></tr></table></figure>



<p>演示代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">null</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">null</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100000000L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">null</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100000000L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>案例2：线程运行很长时间没有结果</p>
<p>jstack 进程id</p>
<p>![](/Users/chaoqiang/Pictures/snapshots/截屏2021-12-28 下午11.30.05.png)</p>
<p>死锁代码</p>
<p>![死锁](/Users/chaoqiang/Pictures/snapshots/截屏2021-12-28 下午11.32.47.png)</p>
<p>案例3:堆内存诊断(垃圾回收后，内存占用仍然较高)</p>
<ol>
<li><p>jps:查看当前系统中有哪些java内存</p>
</li>
<li><p>jmap -heap java进程id:查看堆内存占用情况</p>
</li>
<li><p>jconsole:图形界面，多功能的检测工具，可以连续监测</p>
</li>
<li><p>jvisualvm:java可视化虚拟机</p>
</li>
</ol>
<p>编译字节码信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple singleton % javac -<span class="built_in">help</span>                             </span><br><span class="line">用法: javac &lt;options&gt; &lt;<span class="built_in">source</span> files&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -g                         生成所有调试信息</span><br><span class="line">  -g:none                    不生成任何调试信息</span><br><span class="line">  -g:&#123;lines,vars,<span class="built_in">source</span>&#125;     只生成某些调试信息</span><br><span class="line">  -nowarn                    不生成任何警告</span><br><span class="line">  -verbose                   输出有关编译器正在执行的操作的消息</span><br><span class="line">  -deprecation               输出使用已过时的 API 的源位置</span><br><span class="line">  -classpath &lt;路径&gt;            指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -cp &lt;路径&gt;                   指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -sourcepath &lt;路径&gt;           指定查找输入源文件的位置</span><br><span class="line">  -bootclasspath &lt;路径&gt;        覆盖引导类文件的位置</span><br><span class="line">  -extdirs &lt;目录&gt;              覆盖所安装扩展的位置</span><br><span class="line">  -endorseddirs &lt;目录&gt;         覆盖签名的标准路径的位置</span><br><span class="line">  -proc:&#123;none,only&#125;          控制是否执行注释处理和/或编译。</span><br><span class="line">  -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程</span><br><span class="line">  -processorpath &lt;路径&gt;        指定查找注释处理程序的位置</span><br><span class="line">  -parameters                生成元数据以用于方法参数的反射</span><br><span class="line">  -d &lt;目录&gt;                    指定放置生成的类文件的位置</span><br><span class="line">  -s &lt;目录&gt;                    指定放置生成的源文件的位置</span><br><span class="line">  -h &lt;目录&gt;                    指定放置生成的本机标头文件的位置</span><br><span class="line">  -implicit:&#123;none,class&#125;     指定是否为隐式引用文件生成类文件</span><br><span class="line">  -encoding &lt;编码&gt;             指定源文件使用的字符编码</span><br><span class="line">  -<span class="built_in">source</span> &lt;发行版&gt;              提供与指定发行版的源兼容性</span><br><span class="line">  -target &lt;发行版&gt;              生成特定 VM 版本的类文件</span><br><span class="line">  -profile &lt;配置文件&gt;            请确保使用的 API 在指定的配置文件中可用</span><br><span class="line">  -version                   版本信息</span><br><span class="line">  -<span class="built_in">help</span>                      输出标准选项的提要</span><br><span class="line">  -A关键字[=值]                  传递给注释处理程序的选项</span><br><span class="line">  -X                         输出非标准选项的提要</span><br><span class="line">  -J&lt;标记&gt;                     直接将 &lt;标记&gt; 传递给运行时系统</span><br><span class="line">  -Werror                    出现警告时终止编译</span><br><span class="line">  @&lt;文件名&gt;                     从文件读取选项和文件名</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple singleton % javac -parameters -g:vars -d . Main.java</span><br></pre></td></tr></table></figure>



<p>查看编译后的字节码信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javap -v HelloWorld.class</span><br></pre></td></tr></table></figure>

<p>使用jconsole远程连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote - Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 - Dcom.sun.management.jmxremote.authenticate=是否认证 java类</span><br></pre></td></tr></table></figure>





<p>查看进程线程方法</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>Windows</th>
<th>Linux</th>
<th>java</th>
</tr>
</thead>
<tbody><tr>
<td>获取进程的方式</td>
<td>tasklist | findstr java</td>
<td>ps -ef | grep java</td>
<td>jps(查看所有java进程)</td>
</tr>
<tr>
<td>停止进程</td>
<td>taskkill /F /PID 28060</td>
<td>kill pid</td>
<td></td>
</tr>
<tr>
<td>动态查看进程信息</td>
<td></td>
<td>top</td>
<td></td>
</tr>
<tr>
<td>查看进程中的线程信息</td>
<td></td>
<td>top -H -p pid</td>
<td></td>
</tr>
<tr>
<td>抓取java即时线程详细信息</td>
<td></td>
<td></td>
<td>jstack pid</td>
</tr>
<tr>
<td>远程监控</td>
<td></td>
<td></td>
<td>jconsole</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>查看文本信息-wc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">     wc -- word, line, character, and byte count</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">     wc [-clmw] [file ...]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">     The wc utility displays the number of lines, words, and bytes contained</span><br><span class="line">     in each input file, or standard input (if no file is specified) to the</span><br><span class="line">     standard output.  A line is defined as a string of characters delimited</span><br><span class="line">     by a &lt;newline&gt; character.  Characters beyond the final &lt;newline&gt; charac-</span><br><span class="line">     ter will not be included in the line count.</span><br><span class="line">     wc工具展示文本行数量，单词数量，字符数量</span><br><span class="line">     A word is defined as a string of characters delimited by white space</span><br><span class="line">     characters.  White space characters are the set of characters for which</span><br><span class="line">     the iswspace(3) function returns true.  If more than one input file is</span><br><span class="line">     specified, a line of cumulative counts for all the files is displayed on</span><br><span class="line">     a separate line after the output for the last file.</span><br><span class="line"></span><br><span class="line">     The following options are available:</span><br><span class="line">:</span><br><span class="line">			-c      The number of bytes in each input file is written to the standard</span><br><span class="line">             output.  This will cancel out any prior usage of the -m option.</span><br><span class="line">             字节数</span><br><span class="line"></span><br><span class="line">     -l      The number of lines in each input file is written to the standard</span><br><span class="line">             output.</span><br><span class="line">             行数</span><br><span class="line"></span><br><span class="line">     -m      The number of characters in each input file is written to the</span><br><span class="line">             standard output.  If the current locale does not support multi-</span><br><span class="line">             byte characters, this is equivalent to the -c option.  This will</span><br><span class="line">             cancel out any prior usage of the -c option.</span><br><span class="line">             与-c一样，只不过是写到了控制台?</span><br><span class="line"></span><br><span class="line">     -w      The number of words in each input file is written to the standard</span><br><span class="line">             output.</span><br><span class="line">             单词数</span><br></pre></td></tr></table></figure>

<p>head  file_name</p>
<p>查看文件前10行数据</p>
]]></content>
  </entry>
  <entry>
    <title>TODO</title>
    <url>/2022/01/04/TODO/</url>
    <content><![CDATA[<ul>
<li>SLF4J</li>
<li>FunctionalInterface</li>
<li>逃逸分析</li>
<li>MAT</li>
<li>jmap</li>
<li>JMH</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>docker安装mysql</title>
    <url>/2022/02/12/docker%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple blog % docker run --name mysql0828 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.28</span><br><span class="line">Unable to find image &#x27;mysql:8.0.28&#x27; locally</span><br><span class="line">8.0.28: Pulling from library/mysql</span><br><span class="line">docker: no matching manifest for linux/arm64/v8 in the manifest list entries.</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一种</span></span><br><span class="line">chaoqiang@Pineapple blog % docker run --name mysql0828 --platform linux/amd64 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.28</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现在list entries中没找到linux/arm64/v8的manifest，看一眼文档说是arm64的有另外的仓库</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
        <tag>arm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/28/VmOptions/</url>
    <content><![CDATA[<h1 id="VM-Options"><a href="#VM-Options" class="headerlink" title="VM Options"></a>VM Options</h1><table>
<thead>
<tr>
<th>参数</th>
<th>用途</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>-Xss</td>
<td>指定栈内存大小</td>
<td>-Xss256k</td>
</tr>
<tr>
<td>-XX:MaxMetaspaceSize</td>
<td>指定元空间内存大小</td>
<td>-XX:MaxMetaspaceSize=8m</td>
</tr>
<tr>
<td>-XX:MaxPermSize</td>
<td>指定永久代内存</td>
<td>-XX:MaxPermSize=8m</td>
</tr>
<tr>
<td>–XX:-UseGCOverheadLimit</td>
<td>不使用垃圾回收开销限制</td>
<td>-号设置为不开启，+号设置为开启java.lang.OutOfMemoryError: GC overhead limit exceed 如果超过98%的时间花费在垃圾回收但只有小于2%的堆空间被回收，会触发上述错误,避免程序假死</td>
</tr>
<tr>
<td>-XX:+PrintStringTableStatistics</td>
<td>打印字符串常量池统计信息</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:StringTableSize</td>
<td>设置字符串常量池初始桶大小</td>
<td>-XX:StringTableSize=200000</td>
</tr>
<tr>
<td>-XX:+DisableExplicitGC</td>
<td>禁用显式垃圾回收</td>
<td>由于System.gc()是full gc，为避免程序员在代码中不慎操作full gc，可添加此配置禁用显式垃圾回收，但是添加该配置后，可能ByteBuffer不能及时得到释放导致占用物理内存空间，可以用UnSafe对象的freeMemory(xxx)手动释放内存</td>
</tr>
<tr>
<td>-XX:UseCompressedOops -XX:-UseCompressedClassPointers</td>
<td>禁用指针压缩</td>
<td></td>
</tr>
<tr>
<td>-Xbootclasspath/a:.</td>
<td>设置启动类加载器加载路径</td>
<td>java -Xbootclasspath: <code>&lt;new bootclasspath&gt;</code> 完全替换<br>/a:.表示将当前目录追加至bootclasspath之后<br>/p:.表示将当前目录追加至bootclasspath之前-用这个方法替换核心类</td>
</tr>
<tr>
<td>-XX:-DoEscapeAnalysis</td>
<td>关闭逃逸分析</td>
<td></td>
</tr>
<tr>
<td>-XX+UnlockDiagnosticVMOptions -XX:+PrintInlining</td>
<td>打印方法内连优化详情</td>
<td></td>
</tr>
<tr>
<td>-XX:CompileCommand=dontinline,*类名.square</td>
<td></td>
<td>针对任意包下指定类名的指定方法禁用方法内联</td>
</tr>
<tr>
<td>-XX:-UseBiasedLocking</td>
<td>禁用偏向锁</td>
<td></td>
</tr>
<tr>
<td>堆相关</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-Xms</td>
<td>指定堆的初始大小</td>
<td>-Xms8m，生产中一般和-Xmx大小一样</td>
</tr>
<tr>
<td>-Xmx</td>
<td>指定堆内存最大值</td>
<td>-Xmx8m等价于-XX:MaxHeapSize=size</td>
</tr>
<tr>
<td>-Xmn</td>
<td>新生代大小</td>
<td>-Xmn1m等价于-XX:NewSize=1m -XX:MaxNewSize=1m<br>即将新生代初始大小NewSize和新生代最大大小MaxNewSize都设置为1m</td>
</tr>
<tr>
<td>-XX:InitialSurvivorRatio=ratio</td>
<td>设置幸存区比例，默认为8</td>
<td>Eden区与From区比例</td>
</tr>
<tr>
<td>-XX:InitialSurvivorRatio=ratio -XX:+UseAdaptiveSizePolicy</td>
<td>动态调整幸存区比例</td>
<td>指定初始化幸存区比例，动态调整新生代中Eden与From区比例</td>
</tr>
<tr>
<td>-XX:MaxTenuringThreshold=threshold</td>
<td>晋升阈值</td>
<td></td>
</tr>
<tr>
<td>-XX:+PrintTenuringDistribution</td>
<td>打印晋升详情</td>
<td></td>
</tr>
<tr>
<td>-XX:+PrintGCDetails</td>
<td>打印垃圾回收详细信息</td>
<td></td>
</tr>
<tr>
<td>-verbose:gc</td>
<td>以最简单形式激活垃圾收集信息的日志记录</td>
<td>-XX:+PrintGCDetails -verbose:gc</td>
</tr>
<tr>
<td>-XX:+ScavengeBeforeFullGC</td>
<td>FullGC前Minor GC</td>
<td></td>
</tr>
</tbody></table>
<p>-Xmx20m -Xms20m -Xmn10m -XX:+UseSerialGC   -XX:+PrintGCDetails -verbose:gc</p>
<p>执行main方法打印堆信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 9216K, used 2214K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000)</span><br><span class="line">  eden space 8192K, 27% used [0x00000007bf600000,0x00000007bf8299b0,0x00000007bfe00000)</span><br><span class="line">  from space 1024K, 0% used [0x00000007bff00000,0x00000007bff00000,0x00000007c0000000)</span><br><span class="line">  to   space 1024K, 0% used [0x00000007bfe00000,0x00000007bfe00000,0x00000007bff00000)</span><br><span class="line"> ParOldGen       total 14336K, used 0K [0x00000007be800000, 0x00000007bf600000, 0x00000007bf600000)</span><br><span class="line">  object space 14336K, 0% used [0x00000007be800000,0x00000007be800000,0x00000007bf600000)</span><br><span class="line"> Metaspace       used 3081K, capacity 4620K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 324K, capacity 392K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure>

<p>新生代中total为Eden+From，因为To始终要空着，所以，total大概为9m</p>
<p>调用垃圾回收信息</p>
<p>DefNew: 6146K-&gt;480K(9216K),新生代回收前内存占用，回收后内存占用，新生代内存大小</p>
<p>6146K-&gt;4576K(23552K), 0.0011131 secs回收前堆内存占用，回收后堆内存占用，整个堆的内存大小</p>
<p>因为第二次创建对象时，新生代没有足够空间存放新创建的4M对象，直接将第一个4m对象存放到老年区了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB]);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB]);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew: 6146K-&gt;480K(9216K), 0.0010934 secs] 6146K-&gt;4576K(23552K), 0.0011131 secs] [Times: user=0.00 sys=0.01, real=0.00 secs] </span><br><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 4658K [0x00000007be800000, 0x00000007bf200000, 0x00000007bf200000)</span><br><span class="line">  eden space 8192K,  53% used [0x00000007be800000, 0x00000007bec3d8a0, 0x00000007bf000000)</span><br><span class="line">  from space 1024K,  46% used [0x00000007bf100000, 0x00000007bf1781b8, 0x00000007bf200000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000007bf000000, 0x00000007bf000000, 0x00000007bf100000)</span><br><span class="line"> tenured generation   total 14336K, used 4096K [0x00000007bf200000, 0x00000007c0000000, 0x00000007c0000000)</span><br><span class="line">   the space 14336K,  28% used [0x00000007bf200000, 0x00000007bf600010, 0x00000007bf600200, 0x00000007c0000000)</span><br><span class="line"> Metaspace       used 3082K, capacity 4620K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 324K, capacity 392K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure>





<p>​    </p>
<p>HSDB工具</p>
<p>arthas-boot.jar可以反编译动态生成类</p>
<p>并发压测 工具jcstress</p>
<p>JMH工具</p>
]]></content>
  </entry>
  <entry>
    <title>mysql数据库笔记</title>
    <url>/2022/02/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>Database:按照一定数据结构来组织，存储和管理数据的仓库</p>
<h2 id="数据库管理系统DBMS"><a href="#数据库管理系统DBMS" class="headerlink" title="数据库管理系统DBMS"></a>数据库管理系统DBMS</h2><p>一种操纵和管理数据库的大型软件，用于创建，使用和维护数据库</p>
<h3 id="关系型数据库RDBMS"><a href="#关系型数据库RDBMS" class="headerlink" title="关系型数据库RDBMS"></a>关系型数据库RDBMS</h3><blockquote><p>建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p>
</blockquote>

<p>特点:</p>
<ol>
<li>使用表存储数据，格式统一，便于维护</li>
<li>使用sql语句操作，标准统一，使用方便</li>
<li>数据存储在磁盘中，安全</li>
</ol>
<h3 id="非关系型数据库NOSQL"><a href="#非关系型数据库NOSQL" class="headerlink" title="非关系型数据库NOSQL"></a>非关系型数据库NOSQL</h3><blockquote><p>Not-Only SQL，泛指非关系型数据库，是对关系型数据库的补充</p>
</blockquote>



<p>特点:</p>
<ol>
<li>数据结构灵活</li>
<li>伸缩性强</li>
</ol>
<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ul>
<li>结构化查询语言(Structured Query Language)</li>
<li>是一种操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准</li>
</ul>
<h1 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h1><h2 id="Mysql概述"><a href="#Mysql概述" class="headerlink" title="Mysql概述"></a>Mysql概述</h2><p>安装过程略，我使用的是brew安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">net start mysql</span><br><span class="line"><span class="comment"># brew方式</span></span><br><span class="line">chaoqiang@Pineapple ~ % brew services start mysql@5.7</span><br><span class="line">==&gt; Successfully started `mysql@5.7` (label: homebrew.mxcl.mysql@5.7)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">net stop mysql</span><br><span class="line"><span class="comment">#brew方式</span></span><br><span class="line">chaoqiang@Pineapple ~ % brew services stop mysql@5.7</span><br><span class="line">Stopping `mysql@5.7`... (might take a <span class="keyword">while</span>)</span><br><span class="line">==&gt; Successfully stopped `mysql@5.7` (label: homebrew.mxcl.mysql@5.7)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接mysql</span></span><br><span class="line">mysql [-h 127.0.0.1] [-P 3306] -uroot -p</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple ~ % mysql -h127.0.0.1 -P3306 -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.7.36 Homebrew</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>客户端连接DBMS</p>
<p>客户端向DBMS发送sql命令，DBMS通过sql命令对数据库，表，数据进行处理</p>
<p><img src="/2022/02/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/image-20220207234511741.png" alt="image-20220207234511741"></p>
<h2 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h2><h3 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h3><ol>
<li><p>以单行或多行书写，以分号结尾，</p>
</li>
<li><p>使用空格或锁紧增强语句可读性</p>
</li>
<li><p>Mysql数据库的SQL语句不区分大小写，关键字建议使用大写</p>
</li>
<li><p>注释</p>
<ol>
<li><p>单行注释</p>
<ol>
<li><p>– 注释内容</p>
</li>
<li><p># 注释内容，Mysql独有</p>
</li>
</ol>
</li>
<li><p>多行注释 /* 注释内容 */</p>
</li>
</ol>
</li>
</ol>
<h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><table>
<thead>
<tr>
<th>分类</th>
<th>全称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DDL</td>
<td>Data Defination Language</td>
<td>数据定义语言，用于定义数据库对象</td>
</tr>
<tr>
<td>DML</td>
<td>Data Manipulation Language</td>
<td>数据操作语言，用来对数据库表中的数据进行增删改</td>
</tr>
<tr>
<td>DQL</td>
<td>Data Query Language</td>
<td>数据查询语言，用来查询数据库中表的记录</td>
</tr>
<tr>
<td>DCL</td>
<td>Data Control Language</td>
<td>数据控制语言，用来创建数据库用户，控制数据库用户的访问权限</td>
</tr>
</tbody></table>
<h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><ul>
<li>数据库操作</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="comment">-- 查询当前数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> EXIST] 数据库名 [<span class="keyword">DEFAULT</span> CHARSET 字符集] [<span class="keyword">COLLATE</span> 排序规则]</span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF EXIST] 数据库名;</span><br><span class="line"><span class="comment">-- 使用</span></span><br><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure>

<ul>
<li>表操作</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询相关</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> tb_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建相关</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_name(</span><br><span class="line">			字段<span class="number">1</span> 字段<span class="number">1</span>类型 [COMMENT 字段<span class="number">1</span>注释],</span><br><span class="line">  		字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释],</span><br><span class="line">  		name <span class="type">varchar</span>(<span class="number">30</span>) COMMENT 名称</span><br><span class="line">)[COMMENT 表注释];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>作业</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设计一张员工信息表，要求如下:</span><br><span class="line">1. 编号(纯数字)</span><br><span class="line">2. 员工工号 (字符串类型，长度不超过10位)</span><br><span class="line">3. 员工姓名(字符串类型，长度不超过10位)</span><br><span class="line">4. 性别(男/女，存储一个汉字)</span><br><span class="line">5. 年龄(正常人年龄，不可能存储负数)</span><br><span class="line">6. 身份证号(二代身份证号均为18位，身份证中有X这样的字符)</span><br><span class="line">7. 入职时间(取值年月日即可)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_info(</span><br><span class="line">	id <span class="type">int</span> prima comment &quot;编号&quot;,</span><br><span class="line">  emp_no <span class="type">varchar</span>(<span class="number">10</span>) comment &quot;员工工号&quot;,</span><br><span class="line">  emp_name <span class="type">varchar</span>(<span class="number">10</span>) comment &quot;员工姓名&quot;,</span><br><span class="line">  sex <span class="type">char</span>(<span class="number">1</span>) comment &quot;性别&quot;,</span><br><span class="line">  age tinyint comment &quot;年龄&quot;,</span><br><span class="line">  id_card_num <span class="type">char</span>(<span class="number">18</span>) comment &quot;身份证号&quot;,</span><br><span class="line">  in_company_date <span class="type">date</span> comment &quot;入职时间&quot;</span><br><span class="line">) comment &quot;员工信息表&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk8模板方法代替反射操作</title>
    <url>/2022/02/07/jdk8%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E4%BB%A3%E6%9B%BF%E5%8F%8D%E5%B0%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>实际业务中有两个vo对象,页面上分别有是否可放行，是否可批退两个按钮，通过后段传来的结果设置其disable状态，现在有PageVo对象，用于首次进入页面渲染数据，有OperationVo对象，用于用户执行操作后渲染耶main数据，代码如下:</p>
<figure class="highlight java"><figcaption><span>PageVo.java</span><a href="/downloads/code/vo/PageVo.java">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lamdademo.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageVo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> passable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> rejectable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>{</span><br><span class="line">        passable = <span class="keyword">false</span>;</span><br><span class="line">        rejectable = <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPassable</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> passable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassable</span><span class="params">(<span class="keyword">boolean</span> passable)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.passable = passable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRejectable</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> rejectable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRejectable</span><span class="params">(<span class="keyword">boolean</span> rejectable)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rejectable = rejectable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PageVo{&quot;</span> +</span><br><span class="line">                <span class="string">&quot;passable=&quot;</span> + passable +</span><br><span class="line">                <span class="string">&quot;, rejectable=&quot;</span> + rejectable +</span><br><span class="line">                <span class="string">&#x27;}&#x27;</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><figcaption><span>OperationVo.java</span><a href="/downloads/code/vo/OperationVo.java">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lamdademo.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationVo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> passable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> rejectable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>{</span><br><span class="line">        passable = <span class="keyword">false</span>;</span><br><span class="line">        rejectable = <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPassable</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> passable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassable</span><span class="params">(<span class="keyword">boolean</span> passable)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.passable = passable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRejectable</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> rejectable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRejectable</span><span class="params">(<span class="keyword">boolean</span> rejectable)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.rejectable = rejectable;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OperationVo{&quot;</span> +</span><br><span class="line">                <span class="string">&quot;passable=&quot;</span> + passable +</span><br><span class="line">                <span class="string">&quot;, rejectable=&quot;</span> + rejectable +</span><br><span class="line">                <span class="string">&#x27;}&#x27;</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<p>它们都存在是否可放行字段passable，是否可批退字段rejectable,由于判断是否可放行是否可批退超级复杂，并且两个对象的判断逻辑一样，所以使用同样的判断实现是最优解</p>
<p>思路:</p>
<ul>
<li>使用抽象父类，但想到两个vo不应该存在父子类关系，只为让它俩的判断逻辑一样强行绑定父子类关系不地道，所以pass</li>
<li>使用泛型，一开始也确实是这么做的</li>
</ul>
<figure class="highlight java"><figcaption><span>反射设置批退放行状态</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用反射方法修改传入的obj对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> normalParams</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj          normalParams不为空时，设置obj可放行，否则，设置obj可批退</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setObjPassableRejectAbleByRefection</span><span class="params">(List&lt;Object&gt; normalParams, Object obj)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//一系列复杂的操作逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (normalParams.isEmpty()) &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = obj.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field rejectable = aClass.getDeclaredField(<span class="string">&quot;rejectable&quot;</span>);</span><br><span class="line">            rejectable.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            rejectable.set(obj, <span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReflectiveOperationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = obj.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field passable = aClass.getDeclaredField(<span class="string">&quot;passable&quot;</span>);</span><br><span class="line">            passable.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            passable.set(obj, <span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReflectiveOperationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>后来在b站看到满一航老师讲的jdk8的Consumer,Function接口后，觉得可以稍微优化一下</p>
<figure class="highlight java"><figcaption><span>使用jdk8新特性</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用模板方法模式搭配supplier,consumer实现方式</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> normalParams</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> supplier       执行consumer操作的对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> passConsumer   执行放行操作</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> rejectConsumer 执行批退操作</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setObjPassableRejectAble</span><span class="params">(List&lt;Object&gt; normalParams, Supplier&lt;T&gt; supplier, Consumer&lt;T&gt; passConsumer, Consumer&lt;T&gt; rejectConsumer)</span> </span>&#123;</span><br><span class="line">       T obj = supplier.get();</span><br><span class="line">       <span class="keyword">if</span> (normalParams.isEmpty()) &#123;</span><br><span class="line">           rejectConsumer.accept(obj);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           passConsumer.accept(obj);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>调用时，supplier传入待设置的对象，passConsumer传入放行逻辑代码，rejectConsumer传入批退逻辑代码，由于该方法上加了泛型，一旦指定supplier的传入对象类型，passConsumer和rejectConsumer也同时指定了其传入参数具有相同类型</p>
<p>调用代码如下:</p>
<figure class="highlight java"><figcaption><span>TestSupplierConsumer.java</span><a href="/downloads/code/TestSupplierConsumer.java">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lamdademo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lamdademo.vo.OperationVo;</span><br><span class="line"><span class="keyword">import</span> lamdademo.vo.PageVo;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.ReflectionException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.ReferralException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestSupplierConsumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSupplierConsumer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        PageVo pageVo = <span class="keyword">new</span> PageVo();</span><br><span class="line">        OperationVo operationVo = <span class="keyword">new</span> OperationVo();</span><br><span class="line">        byRefection(list, pageVo);</span><br><span class="line">        byRefection(list, operationVo);</span><br><span class="line">        pageVo.reset();</span><br><span class="line">        operationVo.reset();</span><br><span class="line">        list.add(<span class="keyword">new</span> Object());</span><br><span class="line">        byRefection(list, pageVo);</span><br><span class="line">        byRefection(list, operationVo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        byTemplete(list,pageVo);</span></span><br><span class="line"><span class="comment">//        byTemplete(list,operationVo);</span></span><br><span class="line"><span class="comment">//        pageVo.reset();</span></span><br><span class="line"><span class="comment">//        operationVo.reset();</span></span><br><span class="line"><span class="comment">//        list.add(new Object());</span></span><br><span class="line"><span class="comment">//        byTemplete(list,pageVo);</span></span><br><span class="line"><span class="comment">//        byTemplete(list,operationVo);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">byTemplete</span><span class="params">(List&lt;Object&gt; list, PageVo pageVo)</span> </span>{</span><br><span class="line">        setObjPassableRejectAble(list, () -&gt; pageVo, vo -&gt; vo.setPassable(<span class="keyword">true</span>), vo -&gt; vo.setRejectable(<span class="keyword">true</span>));</span><br><span class="line">        System.out.println(pageVo);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">byTemplete</span><span class="params">(List&lt;Object&gt; list, OperationVo operationVo)</span> </span>{</span><br><span class="line">        setObjPassableRejectAble(list, () -&gt; operationVo, vo -&gt; vo.setPassable(<span class="keyword">true</span>), vo -&gt; vo.setRejectable(<span class="keyword">true</span>));</span><br><span class="line">        System.out.println(operationVo);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">byRefection</span><span class="params">(List&lt;Object&gt; list, PageVo pageVo)</span></span>{</span><br><span class="line">        setObjPassableRejectAbleByRefection(list,pageVo);</span><br><span class="line">        System.out.println(pageVo);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">byRefection</span><span class="params">(List&lt;Object&gt; list, OperationVo operationVo)</span></span>{</span><br><span class="line">        setObjPassableRejectAbleByRefection(list,operationVo);</span><br><span class="line">        System.out.println(operationVo);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用反射方法修改传入的obj对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> normalParams</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj          normalParams不为空时，设置obj可放行，否则，设置obj可批退</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setObjPassableRejectAbleByRefection</span><span class="params">(List&lt;Object&gt; normalParams, Object obj)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一系列复杂的操作逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (normalParams.isEmpty()) {</span><br><span class="line">            Class&lt;?&gt; aClass = obj.getClass();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Field rejectable = aClass.getDeclaredField(<span class="string">&quot;rejectable&quot;</span>);</span><br><span class="line">                rejectable.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                rejectable.set(obj, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">catch</span> (ReflectiveOperationException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            Class&lt;?&gt; aClass = obj.getClass();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Field passable = aClass.getDeclaredField(<span class="string">&quot;passable&quot;</span>);</span><br><span class="line">                passable.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                passable.set(obj, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">catch</span> (ReflectiveOperationException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用模板方法模式搭配supplier,consumer实现方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> normalParams</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> supplier       执行consumer操作的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passConsumer   执行放行操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rejectConsumer 执行批退操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setObjPassableRejectAble</span><span class="params">(List&lt;Object&gt; normalParams, Supplier&lt;T&gt; supplier, Consumer&lt;T&gt; passConsumer, Consumer&lt;T&gt; rejectConsumer)</span> </span>{</span><br><span class="line">        T obj = supplier.get();</span><br><span class="line">        <span class="keyword">if</span> (normalParams.isEmpty()) {</span><br><span class="line">            rejectConsumer.accept(obj);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            passConsumer.accept(obj);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>



<p>可以看到，使用模板方法设置放行批退状态，五行代码搞定，比直接使用反射更优雅</p>
<p>干净又卫生</p>
<p>附记忆口诀:</p>
<p>Supplier：无中生有</p>
<p>Consumer：消费代码</p>
]]></content>
      <tags>
        <tag>反射</tag>
        <tag>jdk8</tag>
      </tags>
  </entry>
  <entry>
    <title>关于SPI</title>
    <url>/2022/02/06/%E5%85%B3%E4%BA%8ESPI/</url>
    <content><![CDATA[<p>在追tomcat控制台输出乱码原因时，如果不指定control对象，会传入一个默认control对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle <span class="title">getBundle</span><span class="params">(String baseName,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                 Locale locale)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBundleImpl(baseName, locale,</span><br><span class="line">                             getLoader(Reflection.getCallerClass()),</span><br><span class="line marked">                             getDefaultControl(baseName));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p>第6行getDefaultControl方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Control <span class="title">getDefaultControl</span><span class="params">(String baseName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (providers != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (ResourceBundleControlProvider provider : providers) &#123;</span><br><span class="line">               Control control = provider.getControl(baseName);</span><br><span class="line">               <span class="keyword">if</span> (control != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> control;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Control.INSTANCE;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>其中providers的初始化方法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;ResourceBundleControlProvider&gt; providers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  List&lt;ResourceBundleControlProvider&gt; list = <span class="keyword">null</span>;</span><br><span class="line">  ServiceLoader&lt;ResourceBundleControlProvider&gt; serviceLoaders</span><br><span class="line">    = ServiceLoader.loadInstalled(ResourceBundleControlProvider.class);</span><br><span class="line">  <span class="keyword">for</span> (ResourceBundleControlProvider provider : serviceLoaders) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">      list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    list.add(provider);</span><br><span class="line">  &#125;</span><br><span class="line">  providers = list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第6行使用了ServiceLoader.loadInstalled(ResourceBundleControlProvider.class);使用扩展类加载器加载ResourceBundleControlProvider类型对象，因为双亲委派机制下，如果SystemClassloader已加载了某类，就不会再去使用ExtClassloader加载的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new service loader for the given service type, using the</span></span><br><span class="line"><span class="comment">     * extension class loader.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 使用扩展类加载器为给定的服务类型创建一个新的服务加载器。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; This convenience method simply locates the extension class loader,</span></span><br><span class="line"><span class="comment">     * call it &lt;tt&gt;&lt;i&gt;extClassLoader&lt;/i&gt;&lt;/tt&gt;, and then returns</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;blockquote&gt;&lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * ServiceLoader.load(&lt;i&gt;service&lt;/i&gt;, &lt;i&gt;extClassLoader&lt;/i&gt;)&lt;/pre&gt;&lt;/blockquote&gt;</span></span><br><span class="line"><span class="comment">     * 这个方便的方法只是定位扩展类加载器，调用它extClassLoader ，然后返回</span></span><br><span class="line"><span class="comment">     * ServiceLoader.load(service, extClassLoader)</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; If the extension class loader cannot be found then the system class</span></span><br><span class="line"><span class="comment">     * loader is used; if there is no system class loader then the bootstrap</span></span><br><span class="line"><span class="comment">     * class loader is used.</span></span><br><span class="line"><span class="comment">     * 如果找不到扩展类加载器，则使用系统类加载器；如果没有系统类加载器，则使用引导类加载器。(理论上应该都能找得到，不理解这里为什么说找不到)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; This method is intended for use when only installed providers are</span></span><br><span class="line"><span class="comment">     * desired.  The resulting service will only find and load providers that</span></span><br><span class="line"><span class="comment">     * have been installed into the current Java virtual machine; providers on</span></span><br><span class="line"><span class="comment">     * the application&#x27;s class path will be ignored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 该方法仅为如下场景使用:仅需要已安装的提供者(不太好理解，从调用场景来说，也就是只需要查询%JAVA_HOME%/jre/lib/ext目录下的服务提供者)，也就是说只会加载安装到当前java虚拟机内的providers，应用classpath下的provider会被忽略。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  &lt;S&gt; the class of the service type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  service</span></span><br><span class="line"><span class="comment">     *         The interface or abstract class representing the service</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A new service loader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">loadInstalled</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line">        ClassLoader prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev = cl;</span><br><span class="line">            cl = cl.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ServiceLoader.load(service, prev);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>想要了解更多类加载信息，请移步</p>
<h1 id="TODO-类加载机制"><a href="#TODO-类加载机制" class="headerlink" title="TODO 类加载机制"></a>TODO 类加载机制</h1><p>来看一下ResourceBundleControlProvider类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> java.util.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An interface for service providers that provide implementations of &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.util.ResourceBundle.Control&#125;. The &lt;a</span></span><br><span class="line"><span class="comment"> * href=&quot;../ResourceBundle.html#default_behavior&quot;&gt;default resource bundle loading</span></span><br><span class="line"><span class="comment"> * behavior&lt;/a&gt; of the &#123;<span class="doctag">@code</span> ResourceBundle.getBundle&#125; factory methods that take</span></span><br><span class="line"><span class="comment"> * no &#123;<span class="doctag">@link</span> java.util.ResourceBundle.Control&#125; instance can be modified with &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * ResourceBundleControlProvider&#125; implementations.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Provider implementations must be packaged using the &lt;a</span></span><br><span class="line"><span class="comment"> * href=&quot;../../../../technotes/guides/extensions/index.html&quot;&gt;Java Extension</span></span><br><span class="line"><span class="comment"> * Mechanism&lt;/a&gt; as installed extensions. Refer to &#123;<span class="doctag">@link</span> java.util.ServiceLoader&#125;</span></span><br><span class="line"><span class="comment"> * for the extension packaging. Any installed &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * ResourceBundleControlProvider&#125; implementations are loaded using &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.util.ServiceLoader&#125; at the &#123;<span class="doctag">@code</span> ResourceBundle&#125; class loading time.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Masayoshi Okutsu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ResourceBundle#getBundle(String, java.util.Locale, ClassLoader, ResourceBundle.Control)</span></span><br><span class="line"><span class="comment"> *      ResourceBundle.getBundle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.util.ServiceLoader#loadInstalled(Class)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceBundleControlProvider</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a &#123;<span class="doctag">@code</span> ResourceBundle.Control&#125; instance that is used</span></span><br><span class="line"><span class="comment">     * to handle resource bundle loading for the given &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * baseName&#125;. This method must return &#123;<span class="doctag">@code</span> null&#125; if the given</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> baseName&#125; isn&#x27;t handled by this provider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baseName the base name of the resource bundle</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> ResourceBundle.Control&#125; instance,</span></span><br><span class="line"><span class="comment">     *         or &#123;<span class="doctag">@code</span> null&#125; if the given &#123;<span class="doctag">@code</span> baseName&#125; is not</span></span><br><span class="line"><span class="comment">     *         applicable to this provider.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> baseName&#125; is &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">public</span> ResourceBundle.<span class="function">Control <span class="title">getControl</span><span class="params">(String baseName)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>你会发现这个类没有任何实现类，仔细一看，该接口属于java.util.spi包</p>
]]></content>
      <categories>
        <category>类加载机制</category>
      </categories>
      <tags>
        <tag>SPI</tag>
        <tag>类加载机制</tag>
        <tag>国际化</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库</title>
    <url>/2022/02/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p>事务</p>
<blockquote><p>A <strong>database transaction</strong> symbolizes a unit of work performed within a <a class="link" href="https://en.wikipedia.org/wiki/Database_management_system">database management system<i class="fas fa-external-link-alt"></i></a> (or similar system) against a <a class="link" href="https://en.wikipedia.org/wiki/Database">database<i class="fas fa-external-link-alt"></i></a>, and treated in a coherent and reliable way independent of other transactions. A transaction generally represents any change in a database. Transactions in a database environment have two main purposes:</p>
<p>数据库事务象征着在一个数据库管理系统(或类似系统)中执行的工作单元，并以一种连贯可靠的，独立于其他事务去执行。一个事务通常表示在数据库中的任何修改。数据库环境中的事务有两大目的</p>
<ol>
<li><p>To provide reliable units of work that allow correct recovery from failures and keep a database consistent even in cases of system failure, when execution prematurely and unexpectedly stops (completely or partially) and many operations upon a database remain uncompleted, with unclear status.</p>
<p>提供可靠的单元工作(失败可回滚，系统崩了能持久保存数据并保持数据库一致性)</p>
</li>
<li><p>To provide isolation between programs accessing a database concurrently. If this isolation is not provided, the programs’ outcomes are possibly erroneous.</p>
<p>程序并发访问数据库时提供隔离机制</p>
</li>
</ol>
<p>In a database management system, a transaction is a single unit of logic or work, sometimes made up of multiple operations. Any logical calculation done in a consistent mode in a database is known as a transaction. One example is a transfer from one bank account to another: the complete transaction requires subtracting the amount to be transferred from one account and adding that same amount to the other.</p>
<p>A database transaction, by definition, must be <a class="link" href="https://en.wikipedia.org/wiki/Atomicity_(database_systems)">atomic<i class="fas fa-external-link-alt"></i></a> (it must either be complete in its entirety or have no effect whatsoever), <a class="link" href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">consistent<i class="fas fa-external-link-alt"></i></a> (it must conform to existing constraints in the database), <a class="link" href="https://en.wikipedia.org/wiki/Isolation_(database_systems)">isolated<i class="fas fa-external-link-alt"></i></a> (it must not affect other transactions) and <a class="link" href="https://en.wikipedia.org/wiki/Durability_(database_systems)">durable<i class="fas fa-external-link-alt"></i></a> (it must get written to persistent storage).[<a class="link" href="https://en.wikipedia.org/wiki/Database_transaction#cite_note-1">1]<i class="fas fa-external-link-alt"></i></a> Database practitioners often refer to these properties of database transactions using the acronym <a class="link" href="https://en.wikipedia.org/wiki/ACID">ACID<i class="fas fa-external-link-alt"></i></a>.</p>
<footer><strong>WikiPedia</strong><cite><a class="link" href="https://en.wikipedia.org/wiki/Database_transaction)">database transaction<i class="fas fa-external-link-alt"></i></a></cite></footer></blockquote>







<p>事务四大特性</p>
<ul>
<li>原子性Atomicity<ul>
<li>要么不成功，要么全部成功</li>
</ul>
</li>
<li>一致性Consistency</li>
</ul>
<blockquote><p><strong>Consistency (or Correctness)</strong> in <a class="link" href="https://en.wikipedia.org/wiki/Database_systems">database systems<i class="fas fa-external-link-alt"></i></a> refers to the requirement that <font color="red"> any given <a class="link" href="https://en.wikipedia.org/wiki/Database_transaction">database transaction<i class="fas fa-external-link-alt"></i></a> must change affected data only in allowed ways. </font>Any data written to the database must be valid according to all defined rules, including <a class="link" href="https://en.wikipedia.org/wiki/Integrity_constraints">constraints<i class="fas fa-external-link-alt"></i></a>, <a class="link" href="https://en.wikipedia.org/wiki/Cascading_rollback">cascades<i class="fas fa-external-link-alt"></i></a>, <a class="link" href="https://en.wikipedia.org/wiki/Database_trigger">triggers<i class="fas fa-external-link-alt"></i></a>, and any combination thereof. This does not guarantee correctness of the transaction in all ways the application programmer might have wanted (that is the responsibility of application-level code) but merely that any programming errors cannot result in the violation of any defined database constraints</p>
<p>数据库系统中的<strong>一致性</strong>（或正确性）是指任何给定的数据库事务必须仅以允许的方式更改受影响的数据的要求。写入数据库的任何数据都必须根据所有定义的规则有效，包括约束、级联、触发器及其任何组合。这并不能保证应用程序程序员可能想要的所有事务的正确性（这是应用程序级代码的责任），而只是任何编程错误都不会导致违反任何定义的数据库约束</p>
<p>大概意思是对事务操作必须按照预先定义好的规则去修改数据，网上都用转账来举例子，但是假设程序员写了bug，A向B转账1000，A-1000，B+800，程序执行完成后也遵循了一致性原则，因为你的逻辑就是那样规定的</p>
<footer><strong>WikiPedia</strong><cite><a class="link" href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">Consistency (database systems)<i class="fas fa-external-link-alt"></i></a></cite></footer></blockquote>

<ul>
<li>事务发生前的状态和发生后的状态守恒(也可以想象能量守恒)<ul>
<li>比如银行转账</li>
<li>小偷偷钱</li>
<li>将可乐从罐子里导入瓶子里</li>
</ul>
</li>
<li>隔离性Isolation<ul>
<li>一个事务的执行不被另一个事务的执行干扰。</li>
</ul>
</li>
<li>持久性Durability<ul>
<li>指一个事务一旦提交，它对数据库中数据的改变是永久性的。</li>
</ul>
</li>
</ul>
<p>如何实现一致性呢?可以认为只要实现了原子性，就实现了一致性</p>
<h2 id="Mysql数据类型"><a href="#Mysql数据类型" class="headerlink" title="Mysql数据类型"></a>Mysql数据类型</h2><p><img src="/2022/02/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220211211812448.png" alt="image-20220211211812448"></p>
<p><img src="/2022/02/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220211211853307.png" alt="image-20220211211853307"></p>
<p><img src="/2022/02/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220211214148748.png" alt="image-20220211214148748"></p>
<p><img src="/2022/02/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220211214555630.png" alt="image-20220211214555630"></p>
<h2 id="Sql语句"><a href="#Sql语句" class="headerlink" title="Sql语句"></a>Sql语句</h2><table>
<thead>
<tr>
<th>分类</th>
<th>全称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>[DDL](# DDL)</td>
<td>Data Defination Language</td>
<td>数据定义语言，用于定义数据库对象(数据库，表，字段)</td>
</tr>
<tr>
<td>[DML](# DML)</td>
<td>Data Manipulation Language</td>
<td>数据操作语言，用来对数据库表中的数据进行增删改</td>
</tr>
<tr>
<td>[DQL](# DQL)</td>
<td>Data Query Language</td>
<td>数据查询语言，用来查询数据库中表的记录</td>
</tr>
<tr>
<td>[DCL](# DCL)</td>
<td>Data Control Language</td>
<td>数据控制语言，用来创建数据库用户，控制数据库的访问权限</td>
</tr>
</tbody></table>
<h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><p>Data Defination Language</p>
<h4 id="数据库操作-查询所有数据库"><a href="#数据库操作-查询所有数据库" class="headerlink" title="数据库操作-查询所有数据库"></a>数据库操作-查询所有数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure>

<h4 id="数据库操作-查看当前数据库"><a href="#数据库操作-查看当前数据库" class="headerlink" title="数据库操作-查看当前数据库"></a>数据库操作-查看当前数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure>

<h4 id="数据库操作-创建"><a href="#数据库操作-创建" class="headerlink" title="数据库操作-创建"></a>数据库操作-创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 [<span class="keyword">DEFAULT</span> CHARSET 字符集] [<span class="keyword">COLLATE</span> 排序规则];</span><br></pre></td></tr></table></figure>

<h4 id="数据库操作-删除"><a href="#数据库操作-删除" class="headerlink" title="数据库操作-删除"></a>数据库操作-删除</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [if <span class="keyword">exists</span>] 数据库名</span><br></pre></td></tr></table></figure>

<h4 id="数据库操作-使用"><a href="#数据库操作-使用" class="headerlink" title="数据库操作-使用"></a>数据库操作-使用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE 数据库名</span><br></pre></td></tr></table></figure>

<h4 id="表操作-查询当前数据库所有表"><a href="#表操作-查询当前数据库所有表" class="headerlink" title="表操作-查询当前数据库所有表"></a>表操作-查询当前数据库所有表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>

<h4 id="表操作-查询表结构"><a href="#表操作-查询表结构" class="headerlink" title="表操作-查询表结构"></a>表操作-查询表结构</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> tb_name</span><br></pre></td></tr></table></figure>

<h4 id="表操作-查询指定表的建表语句"><a href="#表操作-查询指定表的建表语句" class="headerlink" title="表操作-查询指定表的建表语句"></a>表操作-查询指定表的建表语句</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> tb_name;</span><br></pre></td></tr></table></figure>



<h4 id="表操作-创建"><a href="#表操作-创建" class="headerlink" title="表操作-创建"></a>表操作-创建</h4><p>规则</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 注意:最后一个<span class="keyword">column</span>没有,</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_name(</span><br><span class="line">   column1 column1_type [comment column1_comment],</span><br><span class="line">   column2 column2_type [comment column2_comment],</span><br><span class="line">   column3 column3_type [comment column3_comment]</span><br><span class="line"> )[comment <span class="string">&#x27;表注释&#x27;</span>];</span><br></pre></td></tr></table></figure>





<p>举例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">create</span> <span class="keyword">table</span> emp_info(</span><br><span class="line">    id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    emp_no <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;员工工号&#x27;</span>,</span><br><span class="line">    emp_name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;员工姓名&#x27;</span>,</span><br><span class="line">    sex <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    card_num <span class="type">char</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">    emp_date <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工信息表&#x27;</span>;</span><br><span class="line">			</span><br><span class="line">			</span><br></pre></td></tr></table></figure>

<h4 id="表操作-添加字段"><a href="#表操作-添加字段" class="headerlink" title="表操作-添加字段"></a>表操作-添加字段</h4><p>为员工表添加一个花名字段，类型为varchar(20)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info <span class="keyword">add</span> nickName <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;花名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="表操作-修改字段长度"><a href="#表操作-修改字段长度" class="headerlink" title="表操作-修改字段长度"></a>表操作-修改字段长度</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp_info modify nickName <span class="type">varchar</span>(<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<h4 id="表操作-修改字段名和字段类型"><a href="#表操作-修改字段名和字段类型" class="headerlink" title="表操作-修改字段名和字段类型"></a>表操作-修改字段名和字段类型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp_info change nickName userName <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;用户名&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="表操作-删除字段"><a href="#表操作-删除字段" class="headerlink" title="表操作-删除字段"></a>表操作-删除字段</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info <span class="keyword">drop</span> userName; </span><br></pre></td></tr></table></figure>

<h4 id="表操作-修改表名"><a href="#表操作-修改表名" class="headerlink" title="表操作-修改表名"></a>表操作-修改表名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp_info rename <span class="keyword">to</span> tb_emp_info;</span><br></pre></td></tr></table></figure>

<h4 id="表操作-清空表数据"><a href="#表操作-清空表数据" class="headerlink" title="表操作-清空表数据"></a>表操作-清空表数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 相当于删除再重新创建表</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> emp_info;</span><br></pre></td></tr></table></figure>

<h4 id="表操作-删除表"><a href="#表操作-删除表" class="headerlink" title="表操作-删除表"></a>表操作-删除表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp_info;</span><br></pre></td></tr></table></figure>

<h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><p>Data Manipulation Language</p>
<p>导入sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; source /Users/chaoqiang/Downloads/baidu-netdisk/dept_emp.sql </span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 4 rows affected (0.00 sec)</span><br><span class="line">Records: 4  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 6 rows affected (0.00 sec)</span><br><span class="line">Records: 6  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>



<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE tb_name <span class="keyword">set</span> col1<span class="operator">=</span>val1,col2<span class="operator">=</span>val2 [<span class="keyword">where</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure>

<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> tb_name [<span class="keyword">where</span> comdition];</span><br></pre></td></tr></table></figure>

<h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><p>Data Query Language</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询语句基本顺序</span><br><span class="line"><span class="keyword">select</span> col1,<span class="built_in">max</span>(col1) <span class="keyword">from</span> tb_name <span class="keyword">where</span> [conditions] [<span class="keyword">group</span> <span class="keyword">by</span> columns] [<span class="keyword">having</span> subcolumns] [<span class="keyword">order</span> <span class="keyword">by</span> columns] limit startoffset pagesize</span><br></pre></td></tr></table></figure>



<ul>
<li>基本查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询多个字段,最好少用<span class="operator">*</span>,影响效率且不直观</span><br><span class="line"><span class="keyword">select</span> columns... <span class="keyword">from</span> tb_name</span><br><span class="line"></span><br><span class="line"># 去除重复记录</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> columns... <span class="keyword">from</span> tb_name</span><br></pre></td></tr></table></figure>



<ul>
<li>条件查询(WHERE)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 这里只写不常用的</span><br><span class="line">#查询某字段数据符合正则表达式(注意\\d不好使，用[<span class="number">0</span><span class="number">-9</span>])</span><br><span class="line"><span class="keyword">select</span> columns <span class="keyword">from</span> tb_name <span class="keyword">where</span> col1 regex <span class="string">&#x27;refex_expression&#x27;</span></span><br><span class="line"># 不等于<span class="operator">&lt;&gt;</span></span><br><span class="line"># <span class="keyword">between</span> ... <span class="keyword">and</span> ...</span><br><span class="line"># <span class="keyword">like</span> 占位符(_匹配单个字符)</span><br><span class="line"># <span class="keyword">and</span> 或<span class="operator">&amp;&amp;</span></span><br><span class="line"># <span class="keyword">or</span> 或<span class="operator">||</span></span><br><span class="line"># <span class="keyword">not</span> 或<span class="operator">!</span></span><br></pre></td></tr></table></figure>



<ul>
<li>聚合函数(count,max,min,avg,sum)</li>
<li>分组查询(group by)</li>
</ul>
<blockquote>
<p>where 与having区别</p>
<blockquote>
<p>执行时机不同:where是分组之前进行过滤，不满足where条件不会参与分组;而having是分组后对结果进行过滤</p>
</blockquote>
<blockquote>
<p>判断条件不同:where不能对聚合函数进行判断，having可以</p>
</blockquote>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 执行顺序:<span class="keyword">where</span> <span class="operator">&gt;</span>聚合函数<span class="operator">&gt;</span><span class="keyword">having</span></span><br><span class="line"># 分组之后，查询的字段一般为聚合函数和分组字段，查询其他条件无任何意义</span><br></pre></td></tr></table></figure>



<ul>
<li>排序查询(ORDER BY)</li>
<li>分页查询(LIMIT)</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 分页查询是数据库的方言，不同数据库有不同实现，Mysql中是limit，如果从头开始查,起始索引可以不写，直接limit rowcount</span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名limit 起始索引,查询记录数</span><br></pre></td></tr></table></figure>

<p>案例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询年龄为<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>岁的员工信息。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp_info ei <span class="keyword">where</span> ei.age <span class="keyword">in</span> (<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>)</span><br><span class="line"># 查询性别为男，并且年龄在<span class="number">20</span><span class="number">-40</span>岁(含)以内的姓名为三个字的员工。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp_info ei <span class="keyword">where</span> ei.age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">40</span> <span class="keyword">and</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">and</span> length(name) <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"># 统计员工表中,年龄小于<span class="number">60</span>岁的,男性员工和女性员工的人数。</span><br><span class="line"><span class="keyword">select</span> sex,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp_info <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br><span class="line"># 查询所有年龄小于等于<span class="number">35</span>岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序。</span><br><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> emp_info ei <span class="keyword">where</span> ei.age <span class="operator">&lt;=</span><span class="number">35</span> <span class="keyword">order</span> <span class="keyword">by</span> age ,emp_date <span class="keyword">desc</span>;</span><br><span class="line"># 查询性别为男，且年龄在<span class="number">20</span><span class="number">-40</span>岁(含)以内的前<span class="number">5</span>个员工信息，对查询的结果按年龄升序排序，年龄相同按入职时间升序排序。</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp_info ei <span class="keyword">where</span> sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">and</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">40</span> <span class="keyword">order</span> <span class="keyword">by</span> age,emp_date <span class="keyword">desc</span> limit <span class="number">5</span> </span><br></pre></td></tr></table></figure>

<h4 id="DQL执行语句顺序"><a href="#DQL执行语句顺序" class="headerlink" title="DQL执行语句顺序"></a>DQL执行语句顺序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 语法顺序</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	字段列表</span><br><span class="line"><span class="keyword">from</span> 	</span><br><span class="line">	表名列表</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">	条件列表	</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">	分组列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">	分组后条件列表</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">	排序字段列表</span><br><span class="line">limit </span><br><span class="line">	分页参数</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 执行顺序</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">	分组列表</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	字段列表</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">	分组后题哦啊蹇列表</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">	排序字段列表</span><br><span class="line">limit	</span><br><span class="line">	分页参数</span><br></pre></td></tr></table></figure>

<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><p>Data Control Language,用于管理数据库用户，控制数据库的访问权限</p>
<h4 id="DCL-用户管理"><a href="#DCL-用户管理" class="headerlink" title="DCL-用户管理"></a>DCL-用户管理</h4><p>查询用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p>创建，修改，删除用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#mysql使用ip<span class="operator">+</span>用户名来定位唯一用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>；</span><br><span class="line"># 创建用户itcast,只能再当前主机localhost访问，密码<span class="number">123456</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 创建用户heima,可以在任意ip访问该数据库，密码<span class="number">123456</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"># 修改用户heima的访问密码为<span class="number">654321</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;654321&#x27;</span>;</span><br><span class="line"># 删除用户itcast用户</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;%&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="DCL-权限控制"><a href="#DCL-权限控制" class="headerlink" title="DCL-权限控制"></a>DCL-权限控制</h4><table>
<thead>
<tr>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ALL,ALL PRIVILEGES</td>
<td>所有权限</td>
</tr>
<tr>
<td>SELECT</td>
<td>查询数据</td>
</tr>
<tr>
<td>INSERT</td>
<td>插入数据</td>
</tr>
<tr>
<td>UPDATE</td>
<td>修改数据</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除数据</td>
</tr>
<tr>
<td>ALTER</td>
<td>修改表</td>
</tr>
<tr>
<td>DROP</td>
<td>删除数据库/表/视图</td>
</tr>
<tr>
<td>CREATE</td>
<td>创建数据库/表</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询权限</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br><span class="line"></span><br><span class="line"># 授予权限</span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br><span class="line"></span><br><span class="line"># 撤销权限</span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span>  数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>一段可以直接被另一段程序调用的程序或代码</p>
<h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CONCAT(s1,s2,s3…sn)</td>
<td>字符串拼接</td>
</tr>
<tr>
<td>LOWER(str)</td>
<td></td>
</tr>
<tr>
<td>UPPER(str)</td>
<td></td>
</tr>
<tr>
<td>LPAD(str,n,pad)</td>
<td>左填充，用字符串pad对str的左边进行填充</td>
</tr>
<tr>
<td>RPAD(str,n,pad)</td>
<td>右填充，用字符串pad对str的右边进行填充</td>
</tr>
<tr>
<td>TRIM(str)</td>
<td>去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td>SUBSTRING(str,start,len)</td>
<td>返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;s&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;s&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;hello mysql&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;hello mysql&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">substring</span>(<span class="string">&#x27;hello mysql&#x27;</span>,<span class="number">1</span>,<span class="number">3</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="operator">|</span> hel                          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"># 由于业务变更，需要将员工工号统一为五位数，不足<span class="number">5</span>位数的全部在前面补<span class="number">0</span>，比如<span class="number">1</span>号员工工号应为<span class="number">00001</span></span><br><span class="line">update emp_info ei <span class="keyword">set</span> ei.workno <span class="operator">=</span> lpad(ei.workno,<span class="number">5</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>CEIL(x)</td>
<td>向上取整</td>
</tr>
<tr>
<td>FLOOR(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>MOD(x,y)</td>
<td>返回x/y的模</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回0-1内的随机数</td>
</tr>
<tr>
<td>ROUND(x,y)</td>
<td>求参数x的四舍五入的值，保留y位小数</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1.01</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">ceil</span>(<span class="number">1.01</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>          <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.01</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">floor</span>(<span class="number">1.01</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">mod</span>(<span class="number">5</span>,<span class="number">3</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> rand();</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> rand()             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.5655649225838155</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> round(<span class="number">2.1415926</span>,<span class="number">3</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> round(<span class="number">2.1415926</span>,<span class="number">3</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span>              <span class="number">2.142</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">1000000</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">1000000</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span>                <span class="number">399993</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"># 随机生成六位随机验证码</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> lpad(<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">1000000</span>),<span class="number">6</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> lpad(<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">1000000</span>),<span class="number">6</span>,<span class="string">&#x27;0&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">760415</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> lpad(round(<span class="number">0.99999999999</span><span class="operator">*</span><span class="number">1000000</span>,<span class="number">0</span>),<span class="number">6</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> lpad(round(<span class="number">0.99999999999</span><span class="operator">*</span><span class="number">1000000</span>,<span class="number">0</span>),<span class="number">6</span>,<span class="string">&#x27;0&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100000</span>                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>curdate()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>curtime()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>now()</td>
<td>返回当前日期+时间</td>
</tr>
<tr>
<td>year(date)</td>
<td>获取指定date的年份</td>
</tr>
<tr>
<td>month(date)</td>
<td>获取指定date的月份</td>
</tr>
<tr>
<td>day(date)</td>
<td>获取指定date的日期</td>
</tr>
<tr>
<td>DATE_ADD(date,INTERVAL expr type)</td>
<td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr>
<td>DATEDIFF(date1,date2)</td>
<td>返回起始时间date1和结束时间date2之间的天数</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select curdate();</span><br><span class="line">+------------+</span><br><span class="line">| curdate()  |</span><br><span class="line">+------------+</span><br><span class="line">| 2022-02-12 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select curtime();</span><br><span class="line">+-----------+</span><br><span class="line">| curtime() |</span><br><span class="line">+-----------+</span><br><span class="line">| 13:39:05  |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select now();</span><br><span class="line">+---------------------+</span><br><span class="line">| now()               |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2022-02-12 13:39:11 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select year(now());</span><br><span class="line">+-------------+</span><br><span class="line">| year(now()) |</span><br><span class="line">+-------------+</span><br><span class="line">|        2022 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select month(now());</span><br><span class="line">+--------------+</span><br><span class="line">| month(now()) |</span><br><span class="line">+--------------+</span><br><span class="line">|            2 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select day(now());</span><br><span class="line">+------------+</span><br><span class="line">| day(now()) |</span><br><span class="line">+------------+</span><br><span class="line">|         12 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select date_add(now(),interval 1 day);</span><br><span class="line">+--------------------------------+</span><br><span class="line">| date_add(now(),interval 1 day) |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| 2022-02-13 13:40:34            |</span><br><span class="line">+--------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select date_add(date(now()),interval 1 day);</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| date_add(date(now()),interval 1 day) |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">| 2022-02-13                           |</span><br><span class="line">+--------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select date_add(date(now()),interval 1 month);</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| date_add(date(now()),interval 1 month) |</span><br><span class="line">+----------------------------------------+</span><br><span class="line">| 2022-03-12                             |</span><br><span class="line">+----------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select date_add(date(now()),interval 1 year);</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| date_add(date(now()),interval 1 year) |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| 2023-02-12                            |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查询明年今天与今年今天的日期数</span><br><span class="line">mysql&gt; select datediff(date_add(date(now()),interval 1 year),now());</span><br><span class="line">+-------------------------------------------------------+</span><br><span class="line">| datediff(date_add(date(now()),interval 1 year),now()) |</span><br><span class="line">+-------------------------------------------------------+</span><br><span class="line">|                                                   365 |</span><br><span class="line">+-------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查询去年今天与今天的日期数</span><br><span class="line">mysql&gt; select datediff(date_add(date(now()),interval -1 year),now());</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line">| datediff(date_add(date(now()),interval -1 year),now()) |</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line">|                                                   -365 |</span><br><span class="line">+--------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查询所有员工的入职天数，并根据入职天数倒序排序</span><br><span class="line">mysql&gt; select emp_no,datediff(curdate(),emp_date) work_day from emp_info ei order by work_day desc;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>IF(value,t,f)</td>
<td>如果value为true,则返回t,否则返回f</td>
</tr>
<tr>
<td>IFNULL(value1,value2)</td>
<td>如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td>CASE WHEN [val1] THEN [res1] … ELSE [default] END</td>
<td>如果val1为true，返回res1…否则返回default默认值</td>
</tr>
<tr>
<td>CASE [expr] WHEN [val1] THEN [res1] … [default] END</td>
<td>如果expr的值等于val1，返回res1 ,…否则返回default默认值</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 统计班里学员成绩，展示规则如下</span><br><span class="line"># &gt;=85展示优秀	&gt;=60及格	否则，不及格</span><br><span class="line">mysql&gt; select s.name,</span><br><span class="line">    -&gt; case when s.math &gt;=85 then &#x27;优秀&#x27; when s.math &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end &#x27;数学&#x27;,</span><br><span class="line">    -&gt; case when s.english &gt;=85 then &#x27;优秀&#x27; when s.math &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end &#x27;英语&#x27;,</span><br><span class="line">    -&gt; case when s.chinese &gt;=85 then &#x27;优秀&#x27; when s.math &gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end &#x27;语文&#x27;</span><br><span class="line">    -&gt; from score s;</span><br><span class="line">+------+-----------+-----------+-----------+</span><br><span class="line">| name | 数学      | 英语      | 语文      |</span><br><span class="line">+------+-----------+-----------+-----------+</span><br><span class="line">| Tom  | 及格      | 优秀      | 优秀      |</span><br><span class="line">| Rose | 不及格    | 不及格    | 优秀      |</span><br><span class="line">| Jack | 不及格    | 优秀      | 不及格    |</span><br><span class="line">+------+-----------+-----------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><blockquote>
<p>概念:约束是作用于表中字段上的规则，用于限制存储在表中的数据</p>
<p>目的:保证数据库中数据的正确，有效性和完整性</p>
</blockquote>
<p>分类</p>
<table>
<thead>
<tr>
<th>约束</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>非空约束</td>
<td>限制该字段数据不能为null</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证该字段的所有数据都是唯一，不重复的</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>主键约束</td>
<td>主键是一行数据的唯一表示，要求非空且唯一</td>
<td>PRIMARY KEY</td>
</tr>
<tr>
<td>默认约束</td>
<td>保存数据时，如果未指定该字段的值，则采用默认值</td>
<td>DEFAULT</td>
</tr>
<tr>
<td>检查约束(8.0.16版本之后)</td>
<td>保证字段值满足某一个条件</td>
<td>CHECK</td>
</tr>
<tr>
<td>外键约束</td>
<td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>
<td>FOREIGN KEY</td>
</tr>
</tbody></table>
<p>练习:创建用户表tb_user</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>字段含义</th>
<th>字段类型</th>
<th>约束条件</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>ID唯一标识</td>
<td>int</td>
<td>主键，并且自动增长</td>
</tr>
<tr>
<td>name</td>
<td>姓名</td>
<td>varchar(10)</td>
<td>不为空，唯一</td>
</tr>
<tr>
<td>age</td>
<td>年龄</td>
<td>tinyint</td>
<td>大于0,并且小于等于120</td>
</tr>
<tr>
<td>status</td>
<td>状态</td>
<td>char(1)</td>
<td>如果没有指定该值，默认为1</td>
</tr>
<tr>
<td>gender</td>
<td>性别</td>
<td>char(1)</td>
<td>无</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">	id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span> comment <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">  gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote>
<p>概念:用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性</p>
</blockquote>
<p>语法:</p>
<p>新建外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">  ...</span><br><span class="line">  [CONSTRANT] [外键名称] <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 新建表时直接指定主键</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> emp01( </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY  COMMENT <span class="string">&#x27;ID&#x27;</span>,   </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,   </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,   </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   `dept_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">null</span> COMMENT <span class="string">&#x27;部门ID&#x27;</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>   <span class="keyword">CONSTRAINT</span> fk_emp_dept_id <span class="keyword">FOREIGN</span> KEY(dept_id) <span class="keyword">references</span> dept(id) );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 表已存在时添加外键</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_emp_dept_id2 <span class="keyword">FOREIGN</span> KEY(dept_id) <span class="keyword">references</span> dept(id);</span><br><span class="line">Query OK, <span class="number">6</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">6</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line">#	 注意，不能存在两个相同名称的外键</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>删除外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_emp_dept_id2;</span><br></pre></td></tr></table></figure>

<h4 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h4><ul>
<li>删除/更新行为</li>
</ul>
<table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>NO ACTION</td>
<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新(与RESTRICT一致)</td>
</tr>
<tr>
<td>RESTRICT</td>
<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新(与NO ACTION一致)</td>
</tr>
<tr>
<td>CASCADE</td>
<td>当在父表中<strong>删除/更新</strong>对应记录时，首先检查该记录是否有对应主键，如果有，则也删除/更新外键在子表中的记录(就是说主表中的键修改或删除，关联表的关联记录也会同步修改或删除)</td>
</tr>
<tr>
<td>SET NULL</td>
<td>当在父表中<strong>删除</strong>对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null)</td>
</tr>
<tr>
<td>SET DEFAULT</td>
<td>父表有<strong>变更</strong>时，子表将外键列设置成一个默认的值(Innodb不支持)</td>
</tr>
</tbody></table>
<p>设置外键约束行为</p>
<p>其实就是在添加字段时加上ON UPDATE 更新策略 ,ON DELETE 删除策略</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段) <span class="keyword">REFERENCES</span> 主表名(主表字段名) <span class="keyword">ON</span> UPDATE 更新行为 <span class="keyword">ON</span> <span class="keyword">DELETE</span> 删除行为</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept <span class="keyword">foreign</span> key(dept_id) <span class="keyword">references</span> dept(id) <span class="keyword">on</span> update CASCADE <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">SET</span> <span class="keyword">NULL</span>;</span><br><span class="line">Query OK, <span class="number">6</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">6</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul>
<li>一对多-    一个省下面对应多个市<ul>
<li>在多的一方建立外键，关联另一方的主键</li>
</ul>
</li>
<li>多对多-     角色和权限<ul>
<li>建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li>
</ul>
</li>
<li>一对一-     用户与用户详情<ul>
<li>在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的UNIQUE</li>
</ul>
</li>
</ul>
<h3 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h3><blockquote>
<p>笛卡尔积:笛卡尔积是指在数学中，集合A和集合B的所有组合情况(在多表查询时，需要消除无效的笛卡尔积)</p>
</blockquote>
<h4 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h4><table>
<thead>
<tr>
<th>连接类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>内连接</td>
<td>相当于查询A,B交集部分数据</td>
</tr>
<tr>
<td>左外连接</td>
<td>相当于查询A表所有数据</td>
</tr>
<tr>
<td>右外连接</td>
<td>相当于查询B表所有数据</td>
</tr>
<tr>
<td>自连接</td>
<td>当前表与自身的连接查询，自连接必须使用表别名</td>
</tr>
</tbody></table>
<p>内连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 隐式内连接</span><br><span class="line">select 字段列表 from 表1,表2 where 条件...;</span><br><span class="line"># 显式内连接</span><br><span class="line">select 字段列表 from 表1 inner join 表2 on 表1.字段a = 表2.字段b</span><br></pre></td></tr></table></figure>



<blockquote><p>Personally I prefer the join syntax as its makes it clearer that the tables are joined and how they are joined. Try compare larger SQL queries where you selecting from 8 different tables and you have lots of filtering in the where. By using join syntax you separate out the parts where the tables are joined, to the part where you are filtering the rows.</p>
<p>更建议使用显式外连接，尽管sql优化器会将其优化成相同的执行计划</p>
<footer><strong>stackoverflow</strong><cite><a class="link" href="https://stackoverflow.com/questions/44917/explicit-vs-implicit-sql-joins13.2.10.2">Explicit vs implicit SQL joins<i class="fas fa-external-link-alt"></i></a></cite></footer></blockquote>



<p>自连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表A 别名A <span class="keyword">inner</span> <span class="keyword">join</span> 表A 别名B <span class="keyword">on</span> 条件</span><br><span class="line"># 自连接查询，可以是内连接查询，也可以是外连接查询</span><br></pre></td></tr></table></figure>

<p>联合查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表 from 表A ...</span><br><span class="line">union [all]</span><br><span class="line">select 字段列表 from 表B ...</span><br><span class="line"># 对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</span><br><span class="line"># union all会将全部的数据直接合并到一起,union 会对合并之后的数据去重</span><br></pre></td></tr></table></figure>

<p>子查询</p>
<blockquote>
<p>概念:SQL中嵌套SELECT语句，称为嵌套查询，又称子查询</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> column1 <span class="operator">=</span> (<span class="keyword">select</span> column1 <span class="keyword">from</span> t2);</span><br><span class="line"># 子查询外部的语句可以是<span class="keyword">INSERT</span>,UPDATE<span class="operator">/</span><span class="keyword">DELETE</span><span class="operator">/</span><span class="keyword">SELECT</span>的任何一个</span><br></pre></td></tr></table></figure>

<p>根据子查询结果不同，分为:</p>
<table>
<thead>
<tr>
<th>根据子查询结果分类</th>
<th>现象</th>
<th>操作符</th>
</tr>
</thead>
<tbody><tr>
<td>标量子查询</td>
<td>子查询结果为单个值</td>
<td>=,&lt;&gt;,&gt;,&lt;</td>
</tr>
<tr>
<td>列子查询</td>
<td>子查询结果为1列</td>
<td>in,not in<br>any有任意一个满足即可<br>SOME与ANY等同 <br>ALL子查询返回列表的所有值都必须满足</td>
</tr>
<tr>
<td>行子查询</td>
<td>子查询结果为1行</td>
<td>=，&lt;&gt;.IN,NOT IN</td>
</tr>
<tr>
<td>表子查询</td>
<td>返回结果为多行多列</td>
<td>IN</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>演示列子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询比财务部所有人工资都高的员工信息,使用<span class="keyword">all</span>，就是比范围内的数据都要...</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span> ( </span><br><span class="line">	<span class="keyword">select</span> salary <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span></span><br><span class="line">);</span><br><span class="line"># 查询比研发部其中任意一人工资高的员工信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span> ( </span><br><span class="line">	<span class="keyword">select</span> salary <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>演示行子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 查询张无忌的薪资及直属领导</span></span><br><span class="line"><span class="keyword">select</span> salary,managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>;</span><br><span class="line">salary managerid</span><br><span class="line"><span class="number">12500</span>，   <span class="number">1</span></span><br><span class="line"><span class="comment">-- # 查询与张无忌的薪资及直属领导相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">=</span> <span class="number">12500</span> <span class="keyword">and</span> managerid <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (salary,managerid) <span class="operator">=</span> (<span class="number">12500</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">-- 进一步演化为</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (salary,managerid) <span class="operator">=</span> (<span class="keyword">select</span> salary,managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> 演示表子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询与张三，李四的职位和薪资相同的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (job,salary) <span class="keyword">in</span> (<span class="keyword">select</span> job,salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>)</span><br><span class="line"><span class="comment">-- 查询入职日期是2006-01-01之后的员工信息及部门信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dep <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dep.id <span class="keyword">where</span> emp.entry_date <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="连接查询练习"><a href="#连接查询练习" class="headerlink" title="连接查询练习"></a>连接查询练习</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.id,e.age ,e.job ,d.name <span class="keyword">FROM</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id  <span class="operator">=</span> d.id </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.name ,e.age ,e.job ,d.name <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id <span class="keyword">WHERE</span> e.age  <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.id,d.name <span class="keyword">from</span> dept d <span class="keyword">where</span> d.id <span class="operator">=</span> <span class="keyword">ANY</span> (<span class="keyword">SELECT</span> e.dept_id <span class="keyword">from</span> emp e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> ,d.name <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id <span class="keyword">WHERE</span> e.age  <span class="operator">&gt;</span> <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.name ,s.grade <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> salgrade s <span class="keyword">on</span> e.salary <span class="keyword">BETWEEN</span> s.losal <span class="keyword">and</span> s.hisal </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.name ,s.grade <span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> salgrade s <span class="keyword">on</span> e.salary <span class="keyword">BETWEEN</span> s.losal <span class="keyword">and</span> s.hisal </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id <span class="keyword">where</span> d.name  <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(e.salary)  <span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id <span class="keyword">where</span> d.name  <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">WHERE</span> e.salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> salary <span class="keyword">from</span> emp e2 <span class="keyword">WHERE</span> e2.name <span class="operator">=</span> <span class="string">&#x27;灭绝&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">WHERE</span> e.salary <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(e2.salary) <span class="keyword">from</span> emp e2 )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.dept_id ,<span class="built_in">AVG</span>(e.salary) <span class="keyword">from</span> emp e <span class="keyword">group</span> <span class="keyword">by</span> e.dept_id </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">SELECT</span> e.dept_id ,<span class="built_in">AVG</span>(e.salary) dep_avg <span class="keyword">from</span> emp e <span class="keyword">group</span> <span class="keyword">by</span> e.dept_id </span><br><span class="line">) tmp <span class="keyword">on</span> e.dept_id <span class="operator">=</span> tmp.dept_id <span class="keyword">where</span> e.salary <span class="operator">&lt;</span> tmp.dep_avg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.<span class="operator">*</span>,IFNULL(tmp.person_count,<span class="number">0</span>)  <span class="keyword">from</span> dept d <span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) person_count,e2.dept_id <span class="keyword">from</span> emp e2 <span class="keyword">group</span> <span class="keyword">by</span> e2.dept_id ) tmp</span><br><span class="line"><span class="keyword">on</span> d.id  <span class="operator">=</span> tmp.dept_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> s.name ,s.`<span class="keyword">no</span>` ,c.name <span class="keyword">from</span> student s </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> student_course sc <span class="keyword">on</span> s.id  <span class="operator">=</span> sc.courseid </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> course c <span class="keyword">on</span> sc.courseid  <span class="operator">=</span> c.id </span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败</p>
<p>简单说就是执行一组操作，要么同时成功，要么同时失败</p>
</blockquote>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看 <span class="operator">/</span>设置事务提交方式</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@autocommit</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"># 开启事务</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"># 提交事务</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"># 回滚事务</span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>

<h4 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h4><ul>
<li>原子性:事务内的所有操作为一个原子，要么全成功，要么全失败</li>
<li>一致性:事务执行后，实际结果与预期结果一致</li>
<li>隔离型:保证事务在不受外部并发操作影响的独立环境下运行</li>
<li>持久性:事务一旦提交或回滚，它对数据库中的数据的改变是永久的</li>
</ul>
<h4 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h4><p>拿A和B去饭店吃饭，付钱环节举例:</p>
<p>A或B任意一人付钱就会向表中新建一条记录，且status默认为1(服务员拒收后，状态改为0)</p>
<p>假设B付的钱中有假钱:</p>
<table>
<thead>
<tr>
<th>问题</th>
<th>描述</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读到另外一个事务还没有提交的数据</td>
<td>B付款，服务员还没确认，A这时查到数据库中有这条记录且status为1，就认为已经付款成功了</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务先后读取同一条记录，但两次读取的数据不同，称为不可重复读</td>
<td>B付款，A第一次付款发现status为1，等10s后不放心，再看一眼记录发现status竟然为0了</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务按照条件查询数据时，没有对应的数据行，但在插入数据时，又发现这行数据已存在</td>
<td>A打算付款，看表中没有数据，掏了钱包说刷我卡，服务员说已经有人买单了，A再看发现表中竟然已经多了那条记录</td>
</tr>
</tbody></table>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted(警察看到小偷将手摸到了钱包，直接抓人)</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
</tr>
<tr>
<td>Read committed(警察看到了小偷将钱包拿出来，但小偷看见警察后直接把钱包放了回去)</td>
<td>✕</td>
<td>✓</td>
<td>✓</td>
</tr>
<tr>
<td>Repeatable Read(警察直接将小偷制服，但小偷同伙儿又将钱包塞了回去)</td>
<td>✕</td>
<td>✕</td>
<td>✓</td>
</tr>
<tr>
<td>Serializable(保护现场+拉警戒线)</td>
<td>✕</td>
<td>✕</td>
<td>✕</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看事务隔离级别</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TRANSACTION</span>_ISOLATION</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@TRANSACTION</span>_ISOLATION;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@TRANSACTION</span>_ISOLATION <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="comment">-- 设置事务隔离级别</span></span><br><span class="line"><span class="keyword">SET</span> [SESSION <span class="operator">|</span> <span class="keyword">GLOBAL</span>] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED <span class="operator">|</span> READ COMMITTED <span class="operator">|</span> READ COMMITTED <span class="operator">|</span>REPEATABLE READ <span class="operator">|</span> SERIALIZABAL&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote><ul>
<li>With the <code>GLOBAL</code> keyword:<ul>
<li>The statement applies globally for all subsequent sessions.</li>
<li>Existing sessions are unaffected.</li>
<li>适用于开启的新session，已有session不受影响</li>
</ul>
</li>
<li>With the <code>SESSION</code> keyword:<ul>
<li>The statement applies to all subsequent transactions performed within the current session.</li>
<li>The statement is permitted within transactions, but does not affect the current ongoing transaction.</li>
<li>If executed between transactions, the statement overrides any preceding statement that sets the next-transaction value of the named characteristics.</li>
<li>适用于当前session的后续事务，允许在事务中执行这条语句，但不会影响当前事务，第三句和第一句意思一样</li>
</ul>
</li>
<li>Without any <code>SESSION</code> or <code>GLOBAL</code> keyword:<ul>
<li>The statement applies only to the next single transaction performed within the session.</li>
<li>Subsequent transactions revert to using the session value of the named characteristics.</li>
<li>The statement is not permitted within transactions:</li>
<li>如果不设置默认值，只会在当前session的下一个事务中生效，然后就恢复，不允许在事务中执行这条语句</li>
</ul>
</li>
</ul>
<footer><strong>mysql</strong><cite><a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/set-transaction.html">Transaction Characteristic Scope<i class="fas fa-external-link-alt"></i></a></cite></footer></blockquote>

]]></content>
  </entry>
  <entry>
    <title>MYSQL高级</title>
    <url>/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="MYSQL体系结构"><a href="#MYSQL体系结构" class="headerlink" title="MYSQL体系结构"></a>MYSQL体系结构</h2><p><img src="/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/image-20220213160732655.png" alt="image-20220213160732655"></p>
<ul>
<li>连接层</li>
</ul>
<blockquote>
<p>最上层是一些客户端和连接服务，主要完成一些类似于连接处理，授权认证，权限认证</p>
</blockquote>
<ul>
<li>服务层</li>
</ul>
<blockquote>
<p>主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程，函数</p>
</blockquote>
<ul>
<li>引擎层-控制数据库中的数据如何查，如何存</li>
</ul>
<blockquote>
<p>真正负责MYSQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选择合适的存储引擎</p>
</blockquote>
<ul>
<li>存储层</li>
</ul>
<blockquote>
<p>主要将数据存储在文件系统之上，并完成与存储引擎的交互</p>
</blockquote>
<h2 id="存储引擎简介"><a href="#存储引擎简介" class="headerlink" title="存储引擎简介"></a>存储引擎简介</h2><p>存储引擎就是存储数据，建立索引，更新/查询数据等技术的实现方式。存储引擎是<strong>基于表</strong>的，而不是基于库的，所以存储引擎也可被称为<strong>表类型</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时指定存储引擎</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">  字段<span class="number">1</span> 字段<span class="number">1</span>类型 [comment 字段<span class="number">1</span>注释],</span><br><span class="line">  ...</span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB [COMMENT 表注释]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- </span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> engines;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="operator">|</span> Engine             <span class="operator">|</span> Support <span class="operator">|</span> Comment                                                        <span class="operator">|</span> Transactions <span class="operator">|</span> XA   <span class="operator">|</span> Savepoints <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="operator">|</span> InnoDB             <span class="operator">|</span> <span class="keyword">DEFAULT</span> <span class="operator">|</span> Supports transactions, <span class="type">row</span><span class="operator">-</span>level locking, <span class="keyword">and</span> <span class="keyword">foreign</span> keys     <span class="operator">|</span> YES          <span class="operator">|</span> YES  <span class="operator">|</span> YES        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MRG_MYISAM         <span class="operator">|</span> YES     <span class="operator">|</span> Collection <span class="keyword">of</span> identical MyISAM tables                          <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MEMORY             <span class="operator">|</span> YES     <span class="operator">|</span> Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables      <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLACKHOLE          <span class="operator">|</span> YES     <span class="operator">|</span> <span class="operator">/</span>dev<span class="operator">/</span><span class="keyword">null</span> storage engine (anything you write <span class="keyword">to</span> it disappears) <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MyISAM             <span class="operator">|</span> YES     <span class="operator">|</span> MyISAM storage engine                                          <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CSV                <span class="operator">|</span> YES     <span class="operator">|</span> CSV storage engine                                             <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ARCHIVE            <span class="operator">|</span> YES     <span class="operator">|</span> Archive storage engine                                         <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PERFORMANCE_SCHEMA <span class="operator">|</span> YES     <span class="operator">|</span> Performance Schema                                             <span class="operator">|</span> <span class="keyword">NO</span>           <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> <span class="keyword">NO</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FEDERATED          <span class="operator">|</span> <span class="keyword">NO</span>      <span class="operator">|</span> Federated MySQL storage engine                                 <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h2 id="各存储引擎特点"><a href="#各存储引擎特点" class="headerlink" title="各存储引擎特点"></a>各存储引擎特点</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>介绍:</p>
<blockquote>
<p>兼顾高可靠性和高性能的通用存储引擎，MYSQL5.5之后，INNODB是默认MYSQL存储引擎</p>
</blockquote>
<p>特点</p>
<ul>
<li>DML操作遵循ACID模型，支持事务</li>
<li>行级锁，提高并发访问性能</li>
<li>支持外键FOREIGN KEY约束，保证数据完整性和正确性</li>
</ul>
<p>文件</p>
<blockquote>
<p>xxx.ibd:xxx代表表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm(mysql8.0之后改为sdi))，数据和索引</p>
<p>ibd文件:    表数据和索引文件</p>
<p>frm文件:    表结构文件</p>
<p>参数:innodb_file_per_table</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%innodb_file_per_table%&#x27;</span><br><span class="line">    -&gt; ;</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| innodb_file_per_table | ON    |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>查看ibd文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple db01 % <span class="built_in">pwd</span></span><br><span class="line">/opt/homebrew/var/mysql/db01</span><br><span class="line">chaoqiang@Pineapple db01 % ll</span><br><span class="line">total 3040</span><br><span class="line">drwxr-x---  29 chaoqiang  admin     928  2 12 21:31 ./</span><br><span class="line">drwxr-xr-x  24 chaoqiang  admin     768  2 12 16:57 ../</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8606  2 12 21:31 course.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin   98304  2 12 21:31 course.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin      61 12  5 18:00 db.opt</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8600  2 12 20:59 dept.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin   98304  2 12 21:00 dept.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8852  2 12 21:00 emp.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin  114688  2 13 14:40 emp.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8826  2 11 23:26 emp_info.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin   98304  2 11 23:26 emp_info.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8792 12 13 21:23 exam_record.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin   98304 12 13 21:25 exam_record.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8798 12 13 21:23 examination_info.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin  114688 12 13 21:25 examination_info.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8626  2 12 21:09 salgrade.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin   98304  2 12 21:09 salgrade.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8714  2 12 14:25 score.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin   98304  2 12 14:25 score.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8632  2 12 21:31 student.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin   98304  2 12 21:31 student.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8656  2 12 21:31 student_course.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin  131072  2 12 21:31 student_course.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8708  2 12 17:07 tb_user.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin  114688  2 12 17:07 tb_user.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8628 12  6 20:48 tbl_dept.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin  114688 12  6 20:48 tbl_dept.ibd</span><br><span class="line">-rw-r-----   1 chaoqiang  admin    8620 12  5 20:03 tbl_emp.frm</span><br><span class="line">-rw-r-----   1 chaoqiang  admin  114688 12  5 20:03 tbl_emp.ibd</span><br></pre></td></tr></table></figure>

<h4 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h4><ul>
<li>TableSpace: 表空间</li>
<li>Segment:段</li>
<li>Extent:区1M</li>
<li>Page:页16K</li>
<li>Row:行</li>
</ul>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>Mysql早期存储引擎</p>
<ul>
<li>不支持事务</li>
<li>不支持外键</li>
<li>表级锁</li>
<li>访问速度快</li>
</ul>
<blockquote>
<p>相关文件</p>
<p>xxx.sdi:        存储表结构信息</p>
<p>xxx.MYD:     存储数据</p>
<p>xxx.MYI:        存储索引</p>
</blockquote>
<h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3><p>表数据存储在内存，只能将这些表作为临时表或缓存使用</p>
<ul>
<li>内存存放</li>
<li>hash索引(默认)</li>
</ul>
<p>文件</p>
<p>xxx.sdi:存储表结构信息</p>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><table>
<thead>
<tr>
<th>特点</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody><tr>
<td>存储限制</td>
<td>64TB</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td><strong>事务安全</strong></td>
<td>支持</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><strong>锁机制</strong></td>
<td>行级锁</td>
<td>表锁</td>
<td>表锁</td>
</tr>
<tr>
<td>b+tree索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Hash索引</td>
<td>-</td>
<td>-</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持(5.6版本以后)</td>
<td>支持</td>
<td>-</td>
</tr>
<tr>
<td>空间使用</td>
<td>高</td>
<td>低</td>
<td>N/A</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中等</td>
</tr>
<tr>
<td>批量插入速度</td>
<td>低</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td><strong>支持外键</strong></td>
<td>支持</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="存储引擎选择"><a href="#存储引擎选择" class="headerlink" title="存储引擎选择"></a>存储引擎选择</h2><p>合适业务场景选择合适存储引擎</p>
<p>InnoDB:</p>
<blockquote>
<p>支持事务，外键。如果应用中对<strong>事务</strong>的完整性有比较高的要求，在并发条件下要求数据的一致性，除了插入和查询外有很多更新删除操作</p>
</blockquote>
<p>MyISAM</p>
<blockquote>
<p>以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性，并发性要求不高，例如存储日志 -&gt; mongodb</p>
</blockquote>
<p>MEMORY</p>
<blockquote>
<p>将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。对表的大小有限制，无法保障数据的安全性-&gt;redis</p>
</blockquote>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>帮助MYSQL<strong>高效获取数据</strong>的**数据结构(**有序)</p>
<blockquote>
<p>数据库系统在存储数据时，还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据，可以在这些数据结构上实现高级查找算法</p>
</blockquote>
<p>优缺点</p>
<table>
<thead>
<tr>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody><tr>
<td>提高数据检索的效率，降低数据库的IO成本</td>
<td>索引列会占用空间</td>
</tr>
<tr>
<td>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</td>
<td>提高查询效率的同时降低了表的速度，如对表进行INSERT,UPDATE,DELETE时，效率降低</td>
</tr>
</tbody></table>
<h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>MYSQL索引在存储引擎层实现，不同的存储引擎有不同的结构</p>
<table>
<thead>
<tr>
<th>索引结构</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>B+Tree索引</td>
<td>最常见索引类型，大部分引擎都支持B+树索引</td>
</tr>
<tr>
<td>Hash索引</td>
<td>底层数据结构使用Hash表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>
</tr>
<tr>
<td>R-tree(空间索引)</td>
<td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，使用较少</td>
</tr>
<tr>
<td>Full-text全文索引</td>
<td>通过建立倒排索引，快速匹配文档的方式。类似于Lucene,Solr,ES</td>
</tr>
</tbody></table>
<p>不同存储引擎对索引的支持情况</p>
<table>
<thead>
<tr>
<th>索引</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody><tr>
<td>B+Tree</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
</tr>
<tr>
<td>Hash</td>
<td>✕</td>
<td>✕</td>
<td>✓</td>
</tr>
<tr>
<td>R-tree(地理位置相关)</td>
<td>✕</td>
<td>✓</td>
<td>✕</td>
</tr>
<tr>
<td>Full-text</td>
<td>5.6版本以后支持</td>
<td>✓</td>
<td>✕</td>
</tr>
</tbody></table>
<ul>
<li>二叉树</li>
</ul>
<blockquote>
<p>二叉树缺点:顺序插入时，会形成一个链表，查询性能大大降低，大数据量情况下，层级较深，检索速度慢</p>
<p>红黑树:自平衡二叉树，层级较深，检索速度慢</p>
</blockquote>
<ul>
<li>B树(多路平衡查找树)</li>
</ul>
<blockquote>
<p>度数:树的度数指的是一个节点的字节点个数，也称阶数(对于一个n阶树，每个节点最多存储n-1个key，n个指针)</p>
</blockquote>
<p><img src="/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/image-20220213180247064.png" alt="image-20220213180247064"></p>
<ul>
<li>B+树(B树的变种)<ul>
<li>所有元素都会出现在叶子结点</li>
<li>叶子结点形成了一个单向链表</li>
<li>非叶子结点起到了索引作用</li>
</ul>
</li>
</ul>
<p><img src="/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/image-20220213181209745.png" alt="image-20220213181209745"></p>
<blockquote>
<p>mysql对经典B+树进行了优化，在原B+树基础上，增加了一个指向相邻叶子结点的链表指针(即由单向链表改为双向循环链表)</p>
<p>而且没有指定树的阶数，索引或数据存满一个页就</p>
</blockquote>
<p><img src="/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/image-20220213181813708.png" alt="image-20220213181813708"></p>
<ul>
<li>Hash</li>
</ul>
<blockquote>
<p>Hash索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中</p>
<p>如果两个键值，映射到同一个槽位上，产生了hash碰撞，可以通过链表来解决</p>
</blockquote>
<ul>
<li>只能用于等值比较，不支持范围查询</li>
<li>无法利用索引完成排序操作</li>
<li>不支持模糊查询</li>
<li>查询效率高</li>
</ul>
<p>在MYSQL中，支持hash索引的是Memory引擎，而InnoDB中具有<strong>自适应hash</strong>功能，hash索引是存储引擎根据B+Tree索引在<strong>指定条件</strong>下自动构建的</p>
<h3 id="为什么InnoDb存储引擎使用B-数"><a href="#为什么InnoDb存储引擎使用B-数" class="headerlink" title="为什么InnoDb存储引擎使用B+数"></a>为什么InnoDb存储引擎使用B+数</h3><ul>
<li>使用二叉树-最差情况下形成链表</li>
<li>使用平衡二叉树-自旋频率过大</li>
<li>使用红黑树-本质上还是树，树的层级可能很高，搜索效率不稳定</li>
<li>使用B树-MySql的最小存储单元是页(16K),b树的树节点存放索引和数据，这样还是有可能造成树的高度过高，另外B+树的叶子结点是双向循环链表，在范围搜索时效率高</li>
<li>使用Hash索引-不支持模糊搜索，不支持范围查询，不支持索引排序操作</li>
</ul>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><table>
<thead>
<tr>
<th>主键索引</th>
<th>含义</th>
<th>特点</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>主键索引</td>
<td>针对表中主键创建的索引</td>
<td>默认自动创建，只能有一个</td>
<td>PRIMARY</td>
</tr>
<tr>
<td>唯一索引</td>
<td>避免同一个表中某数据列中值重复</td>
<td>可以有多个</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>常规索引</td>
<td>快速定位特定数据</td>
<td>可以有多个</td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>全文索引查找的是文本中的关键字，而不是比较索引中的值</td>
<td>可以有多个</td>
<td>FULLTEXT</td>
</tr>
</tbody></table>
<p>在InnoDB存储引擎中，根据索引的<strong>存储结构</strong>，又分为</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>聚集索引(Clustered Index)</td>
<td>将数据存储与索引放到了一块儿，索引结构的叶子结点保存了行数据</td>
<td>必须有，而且只有一个</td>
</tr>
<tr>
<td>二级索引(辅助索引，非聚集索引)</td>
<td>将数据与索引分开存储，索引结构的叶子结点关联的是对应的主键</td>
<td>可以存在多个</td>
</tr>
</tbody></table>
<p>聚集索引选取规则:</p>
<ul>
<li>如果存在主键，主键索引就是聚集索引</li>
<li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li>
<li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引</li>
</ul>
<p>InnoDB主键索引的B+树索引有多高?</p>
<blockquote>
<p>假设一行数据大小为1k，那么1页中可以存储16个这样的数据，innodb的指针占用6个字节，假设主键为bigint,占用8个字节</p>
<p>当高度为2时:</p>
<p>假设n为一个页中索引个数</p>
<p>n*8+(n+1) = 16*1024得出n 大约是 1170</p>
<p>则高度为2时，最多存放1171*16=18736条数据</p>
<p>高度为3时，最多存放1171*1171*16=不到两千二百万</p>
</blockquote>
<p>PS:这里只是说B+树的最大存储量，没有考虑指针占用空间，另外在mysql中每个页会预留1/2到1/16空间用于未来新建和更新索引记录。</p>
<blockquote><p>When new records are inserted into an <code>InnoDB</code> <a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_clustered_index">clustered index<i class="fas fa-external-link-alt"></i></a>, <code>InnoDB</code> tries to leave 1/16 of the page free for future insertions and updates of the index records. If index records are inserted in a sequential order (ascending or descending), the resulting index pages are about 15/16 full. If records are inserted in a random order, the pages are from 1/2 to 15/16 full.</p>
<p>将新记录插入InnoDB聚集索引时，InnoDB会尝试将页面的1/16空闲以供将来插入和更新索引记录。 如果索引记录以连续顺序（升序或降序）插入，则生成的索引页大约为15/16。 如果记录以随机顺序插入，则页面从1/2到15/16。</p>
<footer><strong>mysql</strong><cite><a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/innodb-physical-structure.html)">The Physical Structure of an InnoDB Index<i class="fas fa-external-link-alt"></i></a></cite></footer></blockquote>

<p>所以最好顺序插入，这样能尽量使用内存中页的缓存并且减少页碎片</p>
<h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">unique</span> <span class="operator">|</span> fulltext] index index_name <span class="keyword">on</span> table_name (index_col_name [<span class="keyword">asc</span><span class="operator">/</span><span class="keyword">desc</span>],...);</span><br></pre></td></tr></table></figure>

<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> table_name</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> tb_sku;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>  <span class="operator">|</span> Non_unique <span class="operator">|</span> Key_name <span class="operator">|</span> Seq_in_index <span class="operator">|</span> Column_name <span class="operator">|</span> <span class="keyword">Collation</span> <span class="operator">|</span> <span class="keyword">Cardinality</span> <span class="operator">|</span> Sub_part <span class="operator">|</span> Packed <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Index_type <span class="operator">|</span> Comment <span class="operator">|</span> Index_comment <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> tb_sku <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>  <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> id          <span class="operator">|</span> A         <span class="operator">|</span>     <span class="number">9812422</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb_sku <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> cid      <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> category_id <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb_sku <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> status   <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> status      <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">1</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb_sku <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> updated  <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> update_time <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> YES  <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tb_sku <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span> idx_sn   <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> sn          <span class="operator">|</span> A         <span class="operator">|</span>     <span class="number">9812422</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> table_name;</span><br></pre></td></tr></table></figure>

<p>练习:按照需求创建索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_name <span class="keyword">ON</span> tb_user(name); </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">unique</span> index idx_phone <span class="keyword">on</span> tb_user(phone);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index idx_profession_age_status <span class="keyword">on</span> tb_user(profession,age,status);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> fulltext index idx_email <span class="keyword">on</span> tb_user(email);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.16</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> index idx_email <span class="keyword">on</span> tb_user;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><p>通过show [session | global] status 可以查看当前会话或全局状态，默认是session</p>
<h3 id="判断数据库执行频次"><a href="#判断数据库执行频次" class="headerlink" title="判断数据库执行频次"></a>判断数据库执行频次</h3><p>查看当前数据库各类语句的执行频次</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Com_______&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Com_binlog    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_commit    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_delete    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_insert    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_repair    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_revoke    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_select    <span class="operator">|</span> <span class="number">3</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_signal    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_update    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Com_xa_end    <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建sku表并导入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_sku`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_sku` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  `sn` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品条码&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;SKU名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格（分）&#x27;</span>,</span><br><span class="line">  `num` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">  `alert_num` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存预警数量&#x27;</span>,</span><br><span class="line">  `image` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品图片&#x27;</span>,</span><br><span class="line">  `images` <span class="type">varchar</span>(<span class="number">2000</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品图片列表&#x27;</span>,</span><br><span class="line">  `weight` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;重量（克）&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `spu_id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;SPUID&#x27;</span>,</span><br><span class="line">  `category_id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;类目ID&#x27;</span>,</span><br><span class="line">  `category_name` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;类目名称&#x27;</span>,</span><br><span class="line">  `brand_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;品牌名称&#x27;</span>,</span><br><span class="line">  `spec` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;规格&#x27;</span>,</span><br><span class="line">  `sale_num` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">  `comment_num` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;评论数&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;商品状态 1-正常，2-下架，3-删除&#x27;</span>,</span><br><span class="line">  `version` <span class="type">int</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `cid` (`category_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `status` (`status`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `updated` (`update_time`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span><span class="string">&#x27;商品表&#x27;</span>;</span><br><span class="line"># 导入数据</span><br><span class="line">load data <span class="keyword">local</span> infile &quot;/Users/chaoqiang/Downloads/baidu-netdisk/进阶篇/相关SQL脚本/1000w的模拟数据/tb_sku5.sql &quot; <span class="keyword">into</span> <span class="keyword">table</span> `tb_sku` fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="按时间判断"><a href="#按时间判断" class="headerlink" title="按时间判断"></a>按时间判断</h3><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>homebrew安装的mysql的配置文件以下面顺序为准</p>
<blockquote>
<p>Default options are read from the following files in the given order:</p>
<p>/etc/my.cnf /etc/mysql/my.cnf /opt/homebrew/etc/my.cnf ~/.my.cnf </p>
</blockquote>
<p>修改/opt/homebrew/etc/my.cnf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Default Homebrew MySQL server config</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Only allow connections from localhost</span></span><br><span class="line">bind-address = 127.0.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启慢日志查询</span></span><br><span class="line">slow_query_log=1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 长执行时间为2秒,默认10s</span></span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看慢查询sql日志</span><br><span class="line">mysql&gt; show variables like &#x27;slow_query_log&#x27;;</span><br><span class="line">+----------------+-------+</span><br><span class="line">| Variable_name  | Value |</span><br><span class="line">+----------------+-------+</span><br><span class="line">| slow_query_log | ON    |</span><br><span class="line">+----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 尴尬，性能太好，1.56秒就查出来了</span><br><span class="line">mysql&gt; select count(1) from tb_sku where id like &#x27;%1%&#x27;;</span><br><span class="line">+----------+</span><br><span class="line">| count(1) |</span><br><span class="line">+----------+</span><br><span class="line">|  5217032 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (1.56 sec)</span><br></pre></td></tr></table></figure>

<p>在文件打出了如下日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Time: 2022-02-14T12:32:40.256927Z</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> User@Host: root[root] @ localhost []  Id:     2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query_time: 29.454343  Lock_time: 0.000257 Rows_sent: 1  Rows_examined: 10000000</span></span><br><span class="line">SET timestamp=1644841960;</span><br><span class="line">select count(1) from tb_sku where name like &#x27;%1%&#x27;;</span><br></pre></td></tr></table></figure>



<h4 id="Profile详情"><a href="#Profile详情" class="headerlink" title="Profile详情"></a>Profile详情</h4><p>show profiles 能在sql优化时分析各阶段分别耗费多少时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看当前数据库是否支持profile操作</span><br><span class="line">mysql&gt; select @@have_profiling;</span><br><span class="line">+------------------+</span><br><span class="line">| @@have_profiling |</span><br><span class="line">+------------------+</span><br><span class="line">| YES              |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查看profiling开启状态，默认关闭</span><br><span class="line">mysql&gt; select @@profiling;</span><br><span class="line">+-------------+</span><br><span class="line">| @@profiling |</span><br><span class="line">+-------------+</span><br><span class="line">|           0 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"># 打开profiling</span><br><span class="line">mysql&gt; set profiling = 1;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@profiling;</span><br><span class="line">+-------------+</span><br><span class="line">| @@profiling |</span><br><span class="line">+-------------+</span><br><span class="line">|           1 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select count(1) from tb_sku;</span><br><span class="line">+----------+</span><br><span class="line">| count(1) |</span><br><span class="line">+----------+</span><br><span class="line">| 10000000 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (1.73 sec)</span><br><span class="line"># 查看每一条SQL的耗时基本情况</span><br><span class="line">mysql&gt; show profiles;</span><br><span class="line">+----------+------------+-----------------------------+</span><br><span class="line">| Query_ID | Duration   | Query                       |</span><br><span class="line">+----------+------------+-----------------------------+</span><br><span class="line">|        1 | 0.00119400 | select @@profiling          |</span><br><span class="line">|        2 | 0.00009600 | show profilings             |</span><br><span class="line">|        3 | 1.73819000 | select count(1) from tb_sku |</span><br><span class="line">+----------+------------+-----------------------------+</span><br><span class="line">3 rows in set, 1 warning (0.00 sec)</span><br><span class="line"># 查看某一条SQL执行的耗时详细情况</span><br><span class="line">mysql&gt; show profile for query  3;</span><br><span class="line">+----------------------+----------+</span><br><span class="line">| Status               | Duration |</span><br><span class="line">+----------------------+----------+</span><br><span class="line">| starting             | 0.000096 |</span><br><span class="line">| checking permissions | 0.000011 |</span><br><span class="line">| Opening tables       | 0.000038 |</span><br><span class="line">| init                 | 0.000024 |</span><br><span class="line">| System lock          | 0.000015 |</span><br><span class="line">| optimizing           | 0.000008 |</span><br><span class="line">| statistics           | 0.000029 |</span><br><span class="line">| preparing            | 0.000017 |</span><br><span class="line">| executing            | 0.000003 |</span><br><span class="line">| Sending data         | 1.737263 |</span><br><span class="line">| end                  | 0.000018 |</span><br><span class="line">| query end            | 0.000006 |</span><br><span class="line">| closing tables       | 0.000010 |</span><br><span class="line">| freeing items        | 0.000016 |</span><br><span class="line">| logging slow query   | 0.000628 |</span><br><span class="line">| cleaning up          | 0.000008 |</span><br><span class="line">+----------------------+----------+</span><br><span class="line">16 rows in set, 1 warning (0.00 sec)</span><br><span class="line"># 查看某一条SQL执行的CPU耗时情况</span><br><span class="line">mysql&gt; show profile cpu for query 3;</span><br><span class="line">+----------------------+----------+----------+------------+</span><br><span class="line">| Status               | Duration | CPU_user | CPU_system |</span><br><span class="line">+----------------------+----------+----------+------------+</span><br><span class="line">| starting             | 0.000096 | 0.000079 |   0.000018 |</span><br><span class="line">| checking permissions | 0.000011 | 0.000007 |   0.000003 |</span><br><span class="line">| Opening tables       | 0.000038 | 0.000026 |   0.000012 |</span><br><span class="line">| init                 | 0.000024 | 0.000020 |   0.000004 |</span><br><span class="line">| System lock          | 0.000015 | 0.000010 |   0.000006 |</span><br><span class="line">| optimizing           | 0.000008 | 0.000005 |   0.000002 |</span><br><span class="line">| statistics           | 0.000029 | 0.000020 |   0.000010 |</span><br><span class="line">| preparing            | 0.000017 | 0.000014 |   0.000002 |</span><br><span class="line">| executing            | 0.000003 | 0.000002 |   0.000001 |</span><br><span class="line">| Sending data         | 1.737263 | 0.807040 |   0.126183 |</span><br><span class="line">| end                  | 0.000018 | 0.000003 |   0.000011 |</span><br><span class="line">| query end            | 0.000006 | 0.000006 |   0.000000 |</span><br><span class="line">| closing tables       | 0.000010 | 0.000009 |   0.000001 |</span><br><span class="line">| freeing items        | 0.000016 | 0.000006 |   0.000009 |</span><br><span class="line">| logging slow query   | 0.000628 | 0.000019 |   0.000069 |</span><br><span class="line">| cleaning up          | 0.000008 | 0.000006 |   0.000000 |</span><br><span class="line">+----------------------+----------+----------+------------+</span><br><span class="line">16 rows in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="按执行计划"><a href="#按执行计划" class="headerlink" title="按执行计划"></a>按执行计划</h3><h4 id="exliain"><a href="#exliain" class="headerlink" title="exliain"></a>exliain</h4><p>explain或desc命令获取执行select语句的信息，包括select语句执行过程中表如何连接和连接的顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看select语句执行计划</span><br><span class="line">mysql&gt; explain select * from tb_user;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | tb_user | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   24 |   100.00 | NULL  |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>字段说明</p>
<ul>
<li>id<ul>
<li>id相同，执行顺序从上到下;id不同，值越大，越先执行</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 学生，课程，选课信息三表联查</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> s.id <span class="keyword">from</span> student s <span class="keyword">inner</span> <span class="keyword">join</span> student_course sc <span class="keyword">on</span> s.id <span class="operator">=</span> sc.studentid  <span class="keyword">inner</span> <span class="keyword">join</span> course c <span class="keyword">on</span> sc.courseid <span class="operator">=</span> c.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+--------+--------------------------+--------------+---------+---------------------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys            <span class="operator">|</span> key          <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>                 <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+--------+--------------------------+--------------+---------+---------------------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> s     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index  <span class="operator">|</span> <span class="keyword">PRIMARY</span>                  <span class="operator">|</span> <span class="keyword">PRIMARY</span>      <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span>                <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> sc    <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>    <span class="operator">|</span> fk_courseid,fk_studentid <span class="operator">|</span> fk_studentid <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> itheima.s.id        <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> c     <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> eq_ref <span class="operator">|</span> <span class="keyword">PRIMARY</span>                  <span class="operator">|</span> <span class="keyword">PRIMARY</span>      <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> itheima.sc.courseid <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+--------+--------------------------+--------------+---------+---------------------+------+----------+-------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"># 使用子查询查询选秀了MySQL课程的学生</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> s.<span class="operator">*</span> <span class="keyword">from</span> student s <span class="keyword">where</span> s.id <span class="keyword">in</span> (<span class="keyword">select</span> studentid <span class="keyword">from</span> student_course sc <span class="keyword">where</span> sc.courseid <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> course c <span class="keyword">where</span> c.name <span class="operator">=</span> <span class="string">&#x27;MySQL&#x27;</span> ));</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+-------------+------------+------+--------------------------+-------------+---------+--------------+------+----------+----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type  <span class="operator">|</span> <span class="keyword">table</span>       <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys            <span class="operator">|</span> key         <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>          <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                                              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+-------------+------------+------+--------------------------+-------------+---------+--------------+------+----------+----------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE       <span class="operator">|</span> <span class="operator">&lt;</span>subquery2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>                     <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE       <span class="operator">|</span> s           <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">PRIMARY</span>                  <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>    <span class="number">25.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> <span class="keyword">join</span> buffer (Block Nested Loop) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> MATERIALIZED <span class="operator">|</span> c           <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">PRIMARY</span>                  <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>    <span class="number">25.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> MATERIALIZED <span class="operator">|</span> sc          <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> fk_courseid,fk_studentid <span class="operator">|</span> fk_courseid <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> itheima.c.id <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+-------------+------------+------+--------------------------+-------------+---------+--------------+------+----------+----------------------------------------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">上面子查询可以看到，执行顺序为c,sc,subquery2,s</span><br></pre></td></tr></table></figure>



<ul>
<li><p>select_type</p>
<ul>
<li>SIMPLE-简单查询(不使用连接或子查询)</li>
<li>PRIMARY-(主查询-外层查询)</li>
<li>UNION-(UNION中的第二个或后面的查询语句)</li>
<li>SUBQUERY-SELECT/WHERE之后包含了子查询</li>
</ul>
</li>
<li><p><strong>type</strong>-连接类型</p>
<ul>
<li>NULL-没有查表时</li>
<li>system-查询系统表且只有唯一记录时</li>
<li>const-使用主键或唯一索引时</li>
<li>eq_ref-两个表连接查询时，连接条件为主键或非空唯一索引</li>
<li>ref-索引字段等号连接</li>
<li>range-索引字段范围扫描</li>
<li>index-索引全表扫描-比如select count(1) from tb</li>
<li>all-全表扫描</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 演示type为<span class="keyword">null</span>情况，或者查询mysql配置项</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="number">1</span>; <span class="keyword">desc</span> <span class="keyword">select</span> @<span class="variable">@have</span>_profiling;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">No</span> tables used <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># 演示<span class="keyword">system</span>查询的该表属于系统表且只有<span class="number">1</span>行</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `mysql`.`proxies_priv`;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------------+------------+--------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>        <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------------+------------+--------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> proxies_priv <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">system</span> <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+--------------</span></span><br><span class="line"></span><br><span class="line"># 演示const,最多只有<span class="number">1</span>个匹配记录(使用主键或唯一索引查找数据时)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tmp t1  <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t1    <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">8</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># <span class="keyword">ref</span> 使用非唯一索引查询时</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tmp <span class="keyword">where</span> tmp.name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> tmp   <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx_name      <span class="operator">|</span> idx_name <span class="operator">|</span> <span class="number">32</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># eq_ref<span class="operator">-</span>使用唯一索引连接等值查询</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> t.name,tb_user.id <span class="keyword">from</span> tmp t <span class="keyword">inner</span> <span class="keyword">join</span> tb_user <span class="keyword">on</span> t.id <span class="operator">=</span> tb_user.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+--------+---------------+----------+---------+--------------+------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>          <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+--------+---------------+----------+---------+--------------+------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> t       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index  <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> idx_name <span class="operator">|</span> <span class="number">32</span>      <span class="operator">|</span> <span class="keyword">NULL</span>         <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> tb_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> eq_ref <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span>  <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> itheima.t.id <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+--------+---------------+----------+---------+--------------+------+----------+--------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="keyword">range</span><span class="operator">-</span>索引字段范围扫描</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> tb_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">23</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># <span class="keyword">all</span><span class="operator">-</span>全表扫描</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> createtime <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> tb_user <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">24</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>select 查询的序列号，表示查询中执行select子句或是操作表的顺序。<strong>id相同，执行顺序从上到下;id不同，值越大，越先执行</strong></td>
</tr>
<tr>
<td>select_type</td>
<td>select类型，常见取值有SIMPLE(简单表,即不使用表连接或者子查询),PRIMARY(主查询,即外层查询),UNION(UNION中的第二个或后面的查询语句),SUBQUERY(SELECT/WHERE之后包含了子查询)等</td>
</tr>
<tr>
<td><strong>type</strong></td>
<td>表示连接类型，性能由好到差为null,system,const,ref_equ,ref,range,index,all</td>
</tr>
<tr>
<td><strong>possible_key</strong></td>
<td>可能应用在这张表上的索引，可能有1个或多个</td>
</tr>
<tr>
<td><strong>key</strong></td>
<td>实际用到的索引</td>
</tr>
<tr>
<td><strong>key_len</strong></td>
<td>索引中使用的字节数，该值为索引字段最大可能长度，长度越短越好</td>
</tr>
<tr>
<td>ref</td>
<td></td>
</tr>
<tr>
<td>rows</td>
<td>mysql认为必须要执行查询的行数，预估值</td>
</tr>
<tr>
<td>filtered</td>
<td>返回结果的行数占需读取行数的百分比,filtered的值越大越好</td>
</tr>
<tr>
<td>Extra</td>
<td>额外信息</td>
</tr>
</tbody></table>
<p><img src="/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/image-20220214210856430.png" alt="image-20220214210856430"></p>
<h2 id="索引使用原则"><a href="#索引使用原则" class="headerlink" title="索引使用原则"></a>索引使用原则</h2><ul>
<li>验证索引效率</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 未建立索引之前</span><br><span class="line">mysql&gt; select * from tb_sku ts where ts.id = &#x27;1&#x27;\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">           sn: 100000003145001</span><br><span class="line">         name: 华为Meta1</span><br><span class="line">        price: 87901</span><br><span class="line">          num: 9961</span><br><span class="line">    alert_num: 100</span><br><span class="line">        image: https://m.360buyimg.com/mobilecms/s720x720_jfs/t5590/64/5811657380/234462/5398e856/5965e173N34179777.jpg!q70.jpg.webp</span><br><span class="line">       images: https://m.360buyimg.com/mobilecms/s720x720_jfs/t5590/64/5811657380/234462/5398e856/5965e173N34179777.jpg!q70.jpg.webp</span><br><span class="line">       weight: 10</span><br><span class="line">  create_time: 2019-05-01 00:00:00</span><br><span class="line">  update_time: 2019-05-01 00:00:00</span><br><span class="line">       spu_id: 真皮包</span><br><span class="line">  category_id: 0</span><br><span class="line">category_name: 白色1</span><br><span class="line">   brand_name: 39</span><br><span class="line">         spec: 0</span><br><span class="line">     sale_num: 1</span><br><span class="line">  comment_num: 0</span><br><span class="line">       status: </span><br><span class="line">      version: 0</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tb_sku ts where ts.sn = &#x27;100000003145001&#x27;\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">           sn: 100000003145001</span><br><span class="line">         name: 华为Meta1</span><br><span class="line">        price: 87901</span><br><span class="line">          num: 9961</span><br><span class="line">    alert_num: 100</span><br><span class="line">        image: https://m.360buyimg.com/mobilecms/s720x720_jfs/t5590/64/5811657380/234462/5398e856/5965e173N34179777.jpg!q70.jpg.webp</span><br><span class="line">       images: https://m.360buyimg.com/mobilecms/s720x720_jfs/t5590/64/5811657380/234462/5398e856/5965e173N34179777.jpg!q70.jpg.webp</span><br><span class="line">       weight: 10</span><br><span class="line">  create_time: 2019-05-01 00:00:00</span><br><span class="line">  update_time: 2019-05-01 00:00:00</span><br><span class="line">       spu_id: 真皮包</span><br><span class="line">  category_id: 0</span><br><span class="line">category_name: 白色1</span><br><span class="line">   brand_name: 39</span><br><span class="line">         spec: 0</span><br><span class="line">     sale_num: 1</span><br><span class="line">  comment_num: 0</span><br><span class="line">       status: </span><br><span class="line">      version: 0</span><br><span class="line">1 row in set (9.95 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br><span class="line"></span><br><span class="line"># 添加索引</span><br><span class="line"></span><br><span class="line">mysql&gt; create index &#x27;idx_sn&#x27; on tb_sku (sn);</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;idx_sn&#x27; on tb_sku (sn)&#x27; at line 1</span><br><span class="line">mysql&gt; create index idx_sn on tb_sku (sn);</span><br><span class="line">Query OK, 0 rows affected (20.76 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tb_sku ts where ts.sn = &#x27;100000003145002&#x27;\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 2</span><br><span class="line">           sn: 100000003145002</span><br><span class="line">         name: 华为Meta2</span><br><span class="line">        price: 3</span><br><span class="line">          num: 9946</span><br><span class="line">    alert_num: 100</span><br><span class="line">        image: https://m.360buyimg.com/mobilecms/s720x720_jfs/t23998/350/2363990466/222391/a6e9581d/5b7cba5bN0c18fb4f.jpg!q70.jpg.webp</span><br><span class="line">       images: https://m.360buyimg.com/mobilecms/s720x720_jfs/t23998/350/2363990466/222391/a6e9581d/5b7cba5bN0c18fb4f.jpg!q70.jpg.webp</span><br><span class="line">       weight: 10</span><br><span class="line">  create_time: 2019-05-01 00:00:00</span><br><span class="line">  update_time: 2019-05-01 00:00:00</span><br><span class="line">       spu_id: 拉拉裤</span><br><span class="line">  category_id: 0</span><br><span class="line">category_name: 白色2</span><br><span class="line">   brand_name: 54</span><br><span class="line">         spec: 0</span><br><span class="line">     sale_num: 1</span><br><span class="line">  comment_num: 0</span><br><span class="line">       status: </span><br><span class="line">      version: 0</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<h3 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h3><p>查询从索引的最左列开始，并且不跳过索引中的列</p>
<blockquote>
<p>与where条件中的顺序无关，只是说索引中的最左列要存在于搜索条件中)</p>
</blockquote>
<p>如果索引了多列(聚合索引，不是聚簇索引)，要遵守最左前缀法则</p>
<h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>联合索引时，如果某个索引列使用了范围查询(&gt;,&lt;)，其右边的索引列会失效</p>
<p>范围查询右边的列会失效(业务允许时，使用&gt;=,&lt;=)</p>
<h3 id="索引列运算"><a href="#索引列运算" class="headerlink" title="索引列运算"></a>索引列运算</h3><p>不要在索引列上进行运算，否则会失效</p>
<h3 id="字符串不加引号"><a href="#字符串不加引号" class="headerlink" title="字符串不加引号"></a>字符串不加引号</h3><p>字符串类型字段使用时，不加单引号存在隐式转换，索引失效</p>
<h3 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h3><p>如果仅仅是尾部模糊，索引能用上，如果头部模糊，索引失效</p>
<h3 id="OR连接的条件"><a href="#OR连接的条件" class="headerlink" title="OR连接的条件"></a>OR连接的条件</h3><p>用or分割开的条件，只要or条件中存在一个没有未被索引的列，那么不会用到任何索引 </p>
<h3 id="数据分布影响"><a href="#数据分布影响" class="headerlink" title="数据分布影响"></a>数据分布影响</h3><p>如果MySQL评估使用索引比全表更慢，则不使用索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果查询条件中mysql发现大部分数据没走上索引，改为使用全表扫描</span><br><span class="line">mysql&gt; select * from tb_user;</span><br><span class="line">+----+-----------+-------------+-----------------------+-----------------------------+------+--------+--------+---------------------+</span><br><span class="line">| id | name      | phone       | email                 | profession                  | age  | gender | status | createtime          |</span><br><span class="line">+----+-----------+-------------+-----------------------+-----------------------------+------+--------+--------+---------------------+</span><br><span class="line">|  1 | 吕布      | 17799990000 | lvbu666@163.com       | 软件工程                    |   23 | 1      | 6      | 2001-02-02 00:00:00 |</span><br><span class="line">|  2 | 曹操      | 17799990001 | caocao666@qq.com      | 通讯工程                    |   33 | 1      | 0      | 2001-03-05 00:00:00 |</span><br><span class="line">|  3 | 赵云      | 17799990002 | 17799990@139.com      | 英语                        |   34 | 1      | 2      | 2002-03-02 00:00:00 |</span><br><span class="line">|  4 | 孙悟空    | 17799990003 | 17799990@sina.com     | 工程造价                    |   54 | 1      | 0      | 2001-07-02 00:00:00 |</span><br><span class="line">|  5 | 花木兰    | 17799990004 | 19980729@sina.com     | 软件工程                    |   23 | 2      | 1      | 2001-04-22 00:00:00 |</span><br><span class="line">|  6 | 大乔      | 17799990005 | daqiao666@sina.com    | 舞蹈                        |   22 | 2      | 0      | 2001-02-07 00:00:00 |</span><br><span class="line">|  7 | 露娜      | 17799990006 | luna_love@sina.com    | 应用数学                    |   24 | 2      | 0      | 2001-02-08 00:00:00 |</span><br><span class="line">|  8 | 程咬金    | 17799990007 | chengyaojin@163.com   | 化工                        |   38 | 1      | 5      | 2001-05-23 00:00:00 |</span><br><span class="line">|  9 | 项羽      | 17799990008 | xiaoyu666@qq.com      | 金属材料                    |   43 | 1      | 0      | 2001-09-18 00:00:00 |</span><br><span class="line">| 10 | 白起      | 17799990009 | baiqi666@sina.com     | 机械工程及其自动化          |   27 | 1      | 2      | 2001-08-16 00:00:00 |</span><br><span class="line">| 11 | 韩信      | 17799990010 | hanxin520@163.com     | 无机非金属材料工程          |   27 | 1      | 0      | 2001-06-12 00:00:00 |</span><br><span class="line">| 12 | 荆轲      | 17799990011 | jingke123@163.com     | 会计                        |   29 | 1      | 0      | 2001-05-11 00:00:00 |</span><br><span class="line">| 13 | 兰陵王    | 17799990012 | lanlinwang666@126.com | 工程造价                    |   44 | 1      | 1      | 2001-04-09 00:00:00 |</span><br><span class="line">| 14 | 狂铁      | 17799990013 | kuangtie@sina.com     | 应用数学                    |   43 | 1      | 2      | 2001-04-10 00:00:00 |</span><br><span class="line">| 15 | 貂蝉      | 17799990014 | 84958948374@qq.com    | 软件工程                    |   40 | 2      | 3      | 2001-02-12 00:00:00 |</span><br><span class="line">| 16 | 妲己      | 17799990015 | 2783238293@qq.com     | 软件工程                    |   31 | 2      | 0      | 2001-01-30 00:00:00 |</span><br><span class="line">| 17 | 芈月      | 17799990016 | xiaomin2001@sina.com  | 工业经济                    |   35 | 2      | 0      | 2000-05-03 00:00:00 |</span><br><span class="line">| 18 | 嬴政      | 17799990017 | 8839434342@qq.com     | 化工                        |   38 | 1      | 1      | 2001-08-08 00:00:00 |</span><br><span class="line">| 19 | 狄仁杰    | 17799990018 | jujiamlm8166@163.com  | 国际贸易                    |   30 | 1      | 0      | 2007-03-12 00:00:00 |</span><br><span class="line">| 20 | 安琪拉    | 17799990019 | jdodm1h@126.com       | 城市规划                    |   51 | 2      | 0      | 2001-08-15 00:00:00 |</span><br><span class="line">| 21 | 典韦      | 17799990020 | ycaunanjian@163.com   | 城市规划                    |   52 | 1      | 2      | 2000-04-12 00:00:00 |</span><br><span class="line">| 22 | 廉颇      | 17799990021 | lianpo321@126.com     | 土木工程                    |   19 | 1      | 3      | 2002-07-18 00:00:00 |</span><br><span class="line">| 23 | 后羿      | 17799990022 | altycj2000@139.com    | 城市园林                    |   20 | 1      | 0      | 2002-03-10 00:00:00 |</span><br><span class="line">| 24 | 姜子牙    | 17799990023 | 37483844@qq.com       | 工程造价                    |   29 | 1      | 4      | 2003-05-26 00:00:00 |</span><br><span class="line">+----+-----------+-------------+-----------------------+-----------------------------+------+--------+--------+---------------------+</span><br><span class="line">24 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from tb_user where phone &gt; &#x27;17799990017&#x27;;</span><br><span class="line">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb_user | NULL       | ALL  | idx_phone     | NULL | NULL    | NULL |   24 |    25.00 | Using where |</span><br><span class="line">+----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from tb_user where phone &gt; &#x27;17799990018&#x27;;</span><br><span class="line">+----+-------------+---------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+</span><br><span class="line">| id | select_type | table   | partitions | type  | possible_keys | key       | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+----+-------------+---------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | tb_user | NULL       | range | idx_phone     | idx_phone | 35      | NULL |    5 |   100.00 | Using index condition |</span><br><span class="line">+----+-------------+---------+------------+-------+---------------+-----------+---------+------+------+----------+-----------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from tb_user where profession is not null;</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys             | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb_user | NULL       | ALL  | idx_profession_age_status | NULL | NULL    | NULL |   24 |   100.00 | Using where |</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+------+---------+------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"># profession为普通索引，数据都不为空情况下:</span><br><span class="line">mysql&gt; explain select * from tb_user where profession is  null;</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+---------------------------+---------+-------+------+----------+-----------------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys             | key                       | key_len | ref   | rows | filtered | Extra                 |</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+---------------------------+---------+-------+------+----------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | tb_user | NULL       | ref  | idx_profession_age_status | idx_profession_age_status | 36      | const |    1 |   100.00 | Using index condition |</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+---------------------------+---------+-------+------+----------+-----------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 数据为空情况下</span><br><span class="line"></span><br><span class="line">mysql&gt; update tb_user tu set tu.profession = null;</span><br><span class="line">Query OK, 24 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 24  Changed: 24  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from tb_user where profession is  null;</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+------+---------+------+------+----------+-------------+</span><br><span class="line">| id | select_type | table   | partitions | type | possible_keys             | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+------+---------+------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb_user | NULL       | ALL  | idx_profession_age_status | NULL | NULL    | NULL |   24 |   100.00 | Using where |</span><br><span class="line">+----+-------------+---------+------------+------+---------------------------+------+---------+------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from tb_user where profession is not  null;</span><br><span class="line">+----+-------------+---------+------------+-------+---------------------------+---------------------------+---------+------+------+----------+-----------------------+</span><br><span class="line">| id | select_type | table   | partitions | type  | possible_keys             | key                       | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+----+-------------+---------+------------+-------+---------------------------+---------------------------+---------+------+------+----------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | tb_user | NULL       | range | idx_profession_age_status | idx_profession_age_status | 36      | NULL |    1 |   100.00 | Using index condition |</span><br><span class="line">+----+-------------+---------+------------+-------+---------------------------+---------------------------+---------+------+------+----------+-----------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h3><p>MySQL会自动选择使用哪个索引，但可能选的索引不是你想用的那个，可以指定MySQL到底使用哪个索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 建议mysql使用该索引</span><br><span class="line"># USE INDEX:</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user use index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br><span class="line"># 不要让mysql使用该索引</span><br><span class="line"># IGNORE INDEX;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user ignore index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span>;</span><br><span class="line"># 强制使用该索引</span><br><span class="line"># FORCE INDEX;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user force index(idx_user_pro) <span class="keyword">where</span> profession <span class="operator">=</span> <span class="string">&#x27;软件工程&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>尽量使用覆盖索引(查询使用了索引，并且需要返回的列，在该索引中已经全部能找到),减少select *</p>
<p>using where;using index查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>
<p>using index condition  查询时使用到了索引，但需要回表查询数据</p>
<h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>长字符串或文本类型字段，有时需要索引很长的字符串，会让索引变得很大，查询时，浪费大量磁盘IO，影响查询效率，可以只将字符串的一部分前缀建立索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#对某字段的前<span class="number">5</span>位创建索引</span><br><span class="line"><span class="keyword">create</span> index idx_xxx <span class="keyword">on</span> table_name(<span class="keyword">column</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> email)<span class="operator">/</span><span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="built_in">substring</span>(email,<span class="number">1</span>,<span class="number">10</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_email_5 <span class="keyword">on</span> tb_user(email(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"># 根据最左前缀索引查找数据时，从聚簇索引中找到记录后还会对email值进行匹配，符合条件的才添加到resultSet</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>根据索引的选择性决定索引长度，选择性越接近1越好</p>
<p>选择性</p>
<blockquote>
<p>不重复的索引值(基数)和数据表记录总数的比值，索引选择性越高，查询效率越高</p>
<p>唯一索引的选择性是1，这是最好的索引选择性</p>
</blockquote>
<h3 id="单列索引-amp-amp-联合索引"><a href="#单列索引-amp-amp-联合索引" class="headerlink" title="单列索引&amp;&amp;联合索引"></a>单列索引&amp;&amp;联合索引</h3><p>单个索引:一个索引中有单个字段(如果涉及多个查询字段会进行回表查询)</p>
<p>联合索引:一个索引中有多个字段(需要考虑索引顺序，最左前缀原则)</p>
<p>如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引</p>
<p>如果有单列索引干扰，可以使用SQL提示指定查询要使用的索引</p>
<h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><ul>
<li>针对数据量较大，而且查询比较频繁的表建立索引(数据量超过100W)</li>
<li>针对于常作为查询条件(where)，排序(order by)，分组(group by)操作的字段建立索引</li>
<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>
<li>如果是长字符串类型字段或文本字段，考虑建立前缀索引</li>
<li>尽量使用联合索引，减少单列索引。联合索引很多时候可以覆盖索引，节省存储空间，避免回表</li>
<li>控制索引数量，会影响增删改速度，占用磁盘空间</li>
<li>如果索引列不能存储null值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含nul值时 ，可以更好确定哪个索引最有效率的用于查询</li>
</ul>
<h1 id="SQL优化-1"><a href="#SQL优化-1" class="headerlink" title="SQL优化"></a>SQL优化</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ul>
<li>批量插入</li>
</ul>
<p>1000条数据以内建议使用批量插入(insert语句中有多条记录)</p>
<ul>
<li><p>手动事务提交</p>
</li>
<li><p>主键顺序插入高于乱序插入</p>
</li>
<li><p>百万级数据-使用load命令</p>
</li>
</ul>
<p>导出数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a,b,a<span class="operator">+</span>b <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/tmp/result.txt&#x27;</span></span><br><span class="line">  FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> OPTIONALLY ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">  LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">  <span class="keyword">FROM</span> test_table;</span><br></pre></td></tr></table></figure>

<p>导入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数<span class="comment">--local-infile</span></span><br><span class="line">mysql <span class="comment">--local-infile -uroot -p</span></span><br><span class="line"># 查看是否开启local_infile，默认为<span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@local</span>_infile;</span><br><span class="line"># 设置全局参数local_infile为<span class="number">1</span>，开启从本地加载文件导入数据的开关</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> local_infile <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># 执行load指令将准备好的数据加载到表结构中</span><br><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;/root/sql.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> `tb_user` fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h2 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h2><p>数据组织方式</p>
<blockquote>
<p>在InnoDB存储引擎中，表数据都是根据主键<strong>顺序</strong>组织存放的，这种存储方式的表称为聚集索引</p>
<p>TableSpace表空间-&gt;Segment段-&gt;Extent区1M-&gt;Page页16K-&gt;Row</p>
</blockquote>
<p>页分裂</p>
<blockquote>
<p>主键乱序插入时，如果待插入数据插不进去那个已存在的页，会将待插入页后半部分的值插入到一个新的页，再将新数据插入到后面，然后指针重新指向。</p>
<p>页可以为空，也可以填充一半，也可以填充100%(会预留1/16)。每个页包含了2-N行数据(如果一行数据很大，会行溢出)。根据主键排列</p>
</blockquote>
<p>页合并</p>
<blockquote>
<p>删除数据时并不会直接物理删除，只是记录被标记为删除并且它的空间变得允许被其他记录声明使用。</p>
<p>当页中删除的记录达到<strong>MERGE_THRESHOLD</strong>(默认为页的50%)，InnoDB会开始寻找其相邻页是否可以将两个页合并以优化使用</p>
</blockquote>
<ul>
<li>尽量降低主键的长度</li>
<li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键</li>
<li>尽量不要使用UUID左主键或其他自然主键，如身份证号</li>
<li>业务操作时，避免对主键的修改</li>
</ul>
<h2 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h2><p>explain 排序sql</p>
<p>extra字段会显示Using filesort(排序在排序缓冲区进行)或Using index(排序通过索引直接插到了)</p>
<p><img src="/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/image-20220216205312472.png" alt="image-20220216205312472"></p>
<p>如果查询的age,phone 同为升序排序，走上面索引的正向查找，如果同为降序排序，走上面索引的逆向查找，如果age升序，phone降序，走下面索引</p>
<p>只针对覆盖索引情况下，如果你使用了select *，会进行回表操作，还是通过file sort排序</p>
<ul>
<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>
<li>尽量使用覆盖索引</li>
<li>多字段查询，一升一降时，需要注意联合索引在创建时的规则</li>
<li>filesort排序缓冲序大小为256K，大数据量排序时，会在磁盘文件中排序，可以修改sort_buffer_size(默认256K)</li>
</ul>
<h2 id="group-by-优化"><a href="#group-by-优化" class="headerlink" title="group by 优化"></a>group by 优化</h2><p>番外:<a class="link" href="https://www.zhihu.com/question/350192991">不符合最左匹配原则一定不走索引吗<i class="fas fa-external-link-alt"></i></a>，非也，如果符合索引覆盖，也会走索引</p>
<p>group by与where差不多，考虑最左匹配原则和覆盖索引分析就没啥大问题</p>
<p>在分组操作时，可以通过索引提高效率</p>
<p>在使用group by时，也要考虑最左匹配原则</p>
<h2 id="Limit分页查询优化"><a href="#Limit分页查询优化" class="headerlink" title="Limit分页查询优化"></a>Limit分页查询优化</h2><p>limit 2000000,10,会比较慢，因为MYSQL需要排序后的前2000010记录，但仅返回最后10条记录，其他记录丢弃，查询排序的代价非常大</p>
<ul>
<li>通过覆盖索引+连接查询的方式优化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_sku s inner join (select id from tb_sku order by id limit 9000000,10) a on s.id = a.id</span><br></pre></td></tr></table></figure>

<h2 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h2><p>MYISAM引擎会把一个表的总行数存在磁盘上，因此执行count(*)的时候会直接返回这个数，效率很高</p>
<p>InnoDB引擎会把数据一行一行地从引擎中读出来，然后累计计数</p>
<p>建议通过redis自己计数</p>
<p>count()是一个聚合函数，对于返回的结果集，一行行地判断，如果count函数的参数不是null，累加值就+1，否则不加，最后返回累加值</p>
<ul>
<li>count(*)</li>
<li>count(1) </li>
<li>count(主键)</li>
<li>count(字段)</li>
<li>count(表达式，返回null或非null )</li>
</ul>
<p>相当于把括号内的值都取出来，返回给服务层，服务层拿到之后判断是否为null，如果不为null，累加</p>
<p>不判断是否为null的情况</p>
<ul>
<li>count(not null字段)</li>
<li>count(*)-mysql做了优化，不取值，不返回数据，直接按行进行累加</li>
<li>count(1)-不取值，服务层对于返回的每一行，放一个数字1进去，直接按行进行累加</li>
</ul>
<p>count(*)略大于count(1) 大于count(非空字段)远大于count(普通字段)</p>
<h2 id="update优化"><a href="#update优化" class="headerlink" title="update优化"></a>update优化</h2><p>InnoDB的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁，一旦锁表，并发性能降低</p>
<p>更新数据时，一定要根据索引字段进行更新，否则事务未提交时，锁住的是整张表。</p>
<h1 id="存储对象"><a href="#存储对象" class="headerlink" title="存储对象"></a>存储对象</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图中动态生成的。</p>
<p>视图只保存查询的SQL逻辑，不保存查询结果。</p>
<p>作用:</p>
<ul>
<li>简单<ul>
<li>可以简化用户对数据的理解，简化操作。经常使用的查询可以被定义为视图，用户不必为以后的操作每次指定全部的条件</li>
</ul>
</li>
<li>安全<ul>
<li>数据库授权只能精确到表级别，不能精确到行级别，可以通过创建视图并对用户进行授权可以保证数据的可见性和安全性</li>
</ul>
</li>
<li>数据独立<ul>
<li>可帮助用户屏蔽真实表结构变化带来的影响</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CASCADED-级联</span><br><span class="line">create [or replace] view 视图名称[(列名列表)] as select语句 [with [CASCADED |LOCAL ] CHECK OPTION]</span><br><span class="line"># 创建视图</span><br><span class="line">mysql&gt; create view tmp_v as select id,name from tmp;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"># 查看建立视图语句</span><br><span class="line">mysql&gt; show create view tmp_v;</span><br><span class="line">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+</span><br><span class="line">| View  | Create View                                                                                                                                            | character_set_client | collation_connection |</span><br><span class="line">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+</span><br><span class="line">| tmp_v | CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `tmp_v` AS select `tmp`.`id` AS `id`,`tmp`.`name` AS `name` from `tmp` | utf8                 | utf8_general_ci      |</span><br><span class="line">+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 使用索引</span><br><span class="line">mysql&gt; select * from tmp_v;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 |        |</span><br><span class="line">|  2 | 张三   |</span><br><span class="line">+----+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 更新视图</span><br><span class="line">mysql&gt; create or replace view tmp_v as select id from tmp;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tmp_v;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">|  1 |</span><br><span class="line">|  2 |</span><br><span class="line">+----+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter view tmp_v as select id,name from tmp;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tmp_v;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 |        |</span><br><span class="line">|  2 | 张三   |</span><br><span class="line">+----+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 删除视图</span><br><span class="line">mysql&gt; drop view if exists tmp_v;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tmp_v;</span><br><span class="line">ERROR 1146 (42S02): Table &#x27;itheima.tmp_v&#x27; doesnt exist</span><br><span class="line"></span><br><span class="line"># 演示cascade-with check option</span><br><span class="line">mysql&gt; create or replace view tmp_v as select * from tmp where id &gt; 1;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create or replace view tmp_v2 as select * from tmp_v where id &lt;3 with cascaded check option;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into tmp_v2 values(2,&#x27;王武&#x27;);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;2&#x27; for key &#x27;PRIMARY&#x27;</span><br><span class="line">mysql&gt; insert into tmp_v2 values(3,&#x27;王武&#x27;);</span><br><span class="line">ERROR 1369 (HY000): CHECK OPTION failed &#x27;itheima.tmp_v2&#x27;</span><br></pre></td></tr></table></figure>



<blockquote><p>In a <code>WITH CHECK OPTION</code> clause for an updatable view, the <code>LOCAL</code> and <code>CASCADED</code> keywords determine the scope of check testing when the view is defined in terms of another view. The <code>LOCAL</code> keyword restricts the <code>CHECK OPTION</code> only to the view being defined. <code>CASCADED</code> causes the checks for underlying views to be evaluated as well. When neither keyword is given, the default is <code>CASCADED</code>.</p>
<p>在<code>WITH CHECK OPTION</code>子句中，local和cascaded关键字决定了当视图在定义时依赖其他视图时的数据检查范围。local只对带有check option的视图进行限制，cascaded会对其关联的所有子条件进行限制。</p>
<p>如果是local，只关注其关联父视图中带有with check option的视图</p>
<p>如果是cascaded，其父视图中即便没有with check option也要检查其条件</p>
<footer><strong>MySQL 5.7 Reference Manual</strong><cite><a class="link" href="https://dev.mysql.com/doc/refman/5.7/en/create-view.html)">CREATE VIEW Statement<i class="fas fa-external-link-alt"></i></a></cite></footer></blockquote>

<h3 id="cascade"><a href="#cascade" class="headerlink" title="cascade"></a>cascade</h3><p><img src="/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/image-20220216224805549-5022898.png" alt="image-20220216224805549"></p>
<p>若视图2依赖视图1，加with check option等于加with cascaded check option，会同时校验本视图查询条件+依赖视图查询条件</p>
<p>视图3依赖视图2，因为没加with check option,只会校验依赖视图查询条件</p>
<h3 id="local"><a href="#local" class="headerlink" title="local"></a>local</h3><p><img src="/2022/02/13/MYSQL%E9%AB%98%E7%BA%A7/image-20220216230209014.png" alt="image-20220216230209014"></p>
<p>更新需满足条件:视图中的行与基础表中的行之间必须存在<strong>一对一</strong>关系</p>
<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><blockquote>
<p>实现经过编译并存储在数据库中的一段SQL语句中的集合</p>
<p>调用存储过程可减少数据库和应用服务器之间的传输，提高数据处理的效率</p>
</blockquote>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h3><ul>
<li>封装，服用</li>
<li>可以接受参数，可以返回数据</li>
<li>减少网络交互</li>
</ul>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建存储过程</span><br><span class="line"># 命令行以分号结束</span><br><span class="line">mysql&gt; delimiter $$</span><br><span class="line">mysql&gt; create procedure p1()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select count(*) from student;</span><br><span class="line">    -&gt; end $$</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 调用存储过程</span><br><span class="line">call p1();</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line"># 查看db_name数据库内的存储过程</span><br><span class="line">select * from INFOMATION_SCHEMA.ROUTINES where ROUTINE_SCHEMA = &#x27;db_name&#x27;;</span><br><span class="line"># 查看p1定义时的sql语句</span><br><span class="line">show create procedure p1;</span><br><span class="line"># 删除</span><br><span class="line">drop procedure [if exists] p1;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>系统变量是MYSQL服务器提供，不是用户定义的，有全局变量(GLOBAL)和会话变量(SESSION)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果没有指定SESSION/GLOBAL,默认是SESSION，会话变量</span><br><span class="line"># 获取系统变量</span><br><span class="line">SHOW [SESSION | GLOBAL ] VARIABLES;		-- 查看所有系统变量,默认SESSION级别</span><br><span class="line">SHOW [SESSION | GLOBAL ] VARIABLES LIKE &#x27;auto%&#x27;; -- 通过like方式查找系统变量</span><br><span class="line">SHOW @@[SESSION. | GLOBAL.] autocommit;		--查找某个具体系统变量</span><br><span class="line"></span><br><span class="line"># 设置环境变量</span><br><span class="line">set [session | global] autocommit = 0; -- 将autocommit置为0,设置global系统变量后，所有会话生效，但重启后会重置为1，想要永久生效需要去/etc/my.cnf</span><br></pre></td></tr></table></figure>

<ul>
<li>用户定义变量:用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用‘@变量名’，作用域 为当前会话</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 赋值</span><br><span class="line">SET @var_name = expr[,@var_name = expr]...;</span><br><span class="line"># 推荐使用:=进行复制，因为=可用于条件判断</span><br><span class="line">SET @var_name := expr[,@var_name := expr]...;</span><br><span class="line"></span><br><span class="line">SELECT @var_name := expr[,@var_name = expr]...;</span><br><span class="line">SELECT 字段名 INTO @var_name FROM 表名;</span><br><span class="line"># 使用</span><br><span class="line">SELECT @var_name;</span><br><span class="line"></span><br><span class="line">#用户定义的变量无需进行赋值或初始化，未存直接取会返回null</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>局部变量:根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明，可用于存储过程内的局部变量和输入参数，局部变量的范围是在其声明的BEGIN…END块。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#声明局部变量</span><br><span class="line"># 变量类型就是数据库字段类型:INT,BIGINT,CHAR,VARCHAR,DATE,TIME等</span><br><span class="line">DECLARE 变量名 变量类型 [DEFAULT ...];</span><br><span class="line"></span><br><span class="line"># 赋值</span><br><span class="line">SET 变量名 = 值;</span><br><span class="line">SET 变量名 := 值;</span><br><span class="line">SELECT 字段名 INTO 变量名 FROM 表名...;</span><br><span class="line"></span><br><span class="line"># 存储过程中创建局部变量并调用</span><br><span class="line">mysql&gt; create procedure p2() begin declare stu_count int default 0; select count(*) into stu_count from student; select stu_count; end $$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p2();</span><br><span class="line">    -&gt; $$</span><br><span class="line">+-----------+</span><br><span class="line">| stu_count |</span><br><span class="line">+-----------+</span><br><span class="line">|         4 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IF 条件<span class="number">1</span> <span class="keyword">THEN</span> </span><br><span class="line">	...</span><br><span class="line"><span class="keyword">ELSE</span> 条件<span class="number">2</span> <span class="keyword">THEN</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">procedure</span> p3() <span class="keyword">begin</span> <span class="keyword">declare</span> score <span class="type">int</span> <span class="keyword">default</span> <span class="number">58</span>; <span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">3</span>); if score <span class="operator">&gt;=</span><span class="number">85</span> <span class="keyword">then</span> <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;优秀&#x27;</span>; elseif score <span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">then</span>  <span class="keyword">set</span> <span class="keyword">result</span> :<span class="operator">=</span> <span class="string">&#x27;及格&#x27;</span>; <span class="keyword">else</span> <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span><span class="string">&#x27;不及格&#x27;</span>; <span class="keyword">end</span> if; <span class="keyword">select</span> <span class="keyword">result</span>; <span class="keyword">end</span>; $$                         </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> p3;</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> $$</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">result</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> 不及格    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>IN(默认)</td>
<td>该类参数作为输入，也就是需要调用时传入值</td>
</tr>
<tr>
<td>OUT</td>
<td>该类参数作为输出，可以作为返回值</td>
</tr>
<tr>
<td>INOUT</td>
<td>既可以作为输入参数，也可以作为输出参数</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE 存储过程名称([In/OUT/INOUT 参数名 参数类型])</span><br><span class="line">BEGIN</span><br><span class="line">	-- SQL语句</span><br><span class="line">END;</span><br><span class="line"># 演示in,out</span><br><span class="line">mysql&gt; create procedure p4(score int,out result varchar(3)) begin  if score &gt;=85 then set result := &#x27;优秀&#x27;; elseif score &gt;=60 then  set result := &#x27;及格&#x27;; else set result =&#x27;不及格&#x27;; end if; end ;$$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p4(80,@result) $$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @result $$</span><br><span class="line">+---------+</span><br><span class="line">| @result |</span><br><span class="line">+---------+</span><br><span class="line">| 及格    |</span><br><span class="line">+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 演示inout</span><br><span class="line">mysql&gt; create procedure p5( inout in_score double) begin set in_score := in_score * 0.5;  end; $$</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set @p5_score = 78;</span><br><span class="line">    -&gt; $$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p5(@p5_score);</span><br><span class="line">    -&gt; $$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @p5_score</span><br><span class="line">    -&gt; $$</span><br><span class="line">+-----------+</span><br><span class="line">| @p5_score |</span><br><span class="line">+-----------+</span><br><span class="line">|        39 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><p>语法一</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CASE</span> case_value</span><br><span class="line">	<span class="keyword">WHEN</span> when_value1 <span class="keyword">THEN</span> statement_list1</span><br><span class="line">	[<span class="keyword">WHEN</span> when_value2 <span class="keyword">THEN</span> statement_list2]...</span><br><span class="line">	[<span class="keyword">ELSE</span> statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure>

<p>语法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CASE </span><br><span class="line">	WHEN search_condition1 THEN statement_list1</span><br><span class="line">	[WHEN search_condition2 THEN statement_list2]</span><br><span class="line">	[ELSE statement_list]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line">mysql&gt; create procedure p6(in month int) begin   declare result varchar(10);   case      when month &gt;= 1 and month &lt;=3 then       set result := &#x27;第一季度&#x27;;     when month &gt;=4 and month &lt;=6 then       set result := &#x27;第二季度&#x27;;     when month &gt;= 7 and month &lt;=9 then       set result := &#x27;第三季度&#x27;;     when month &gt;= 9 and month &lt;= 12 then       set result := &#x27;第四季度&#x27;;   end case; select concat(&#x27;输入月份&#x27;,month,&#x27;所属季度:&#x27;,result); end$$</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p6(13);</span><br><span class="line">    -&gt; $$</span><br><span class="line">ERROR 1339 (20000): Case not found for CASE statement</span><br><span class="line">mysql&gt; call p6(12);</span><br><span class="line">    -&gt; $$</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">| concat(&#x27;输入月份&#x27;,month,&#x27;所属季度:&#x27;,result)         |</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">| 输入月份12所属季度:第四季度                         |</span><br><span class="line">+-----------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>有条件的循环控制语句，满足条件后，再执行循环体中的SQL语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先判定条件，如果条件为true,则执行逻辑，否则，不执行逻辑</span><br><span class="line">WHILE 条件 DO</span><br><span class="line">		SQL逻辑...</span><br><span class="line">END WHILE;</span><br><span class="line"></span><br><span class="line">#计算从1累加到n的值，n为传入参数值</span><br><span class="line">mysql&gt; create procedure p7(in end_num int) begin   declare total int default 0;   while end_num &gt; 0 do   set total := total + end_num;   set end_num := end_num - 1;   end while;   select total; end$$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p7(10)$$</span><br><span class="line">+-------+</span><br><span class="line">| total |</span><br><span class="line">+-------+</span><br><span class="line">|    55 |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><p>repeat是有条件的循环控制语句，满足条件时退出循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sql的do... while语法</span><br><span class="line">REPEAT</span><br><span class="line">	SQL逻辑</span><br><span class="line">	UNTIL 条件</span><br><span class="line">END REPEAT;</span><br><span class="line"></span><br><span class="line">mysql&gt; create  procedure p8(in end_num int) begin   declare total int default 0;   repeat  set total := total + end_num;   set end_num := end_num - 1;   until end_num &lt;= 0   end repeat; select total; end;$$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p8(100);</span><br><span class="line">    -&gt; $$</span><br><span class="line">+-------+</span><br><span class="line">| total |</span><br><span class="line">+-------+</span><br><span class="line">|  5050 |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><p>LOOP实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其实现简单的死循环，LOOP可以配合以下两个语句使用</p>
<p>相当于for(;;)或while(true)</p>
<ul>
<li>LEAVE:配合循环使用，退出循环-break</li>
<li>ITERATE:必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环-continue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[begin_label:] LOOP</span><br><span class="line">	SQL逻辑...</span><br><span class="line">END LOOP [end_label];</span><br><span class="line"></span><br><span class="line">LEAVE label; --退出指定标记的循环体</span><br><span class="line">ITERATE label; --直接进入下一次循环</span><br><span class="line"></span><br><span class="line"># 使用loop累加从1到n的值</span><br><span class="line">mysql&gt; create procedure p9(in n int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt;   declare total int default 0;</span><br><span class="line">    -&gt;   sum:loop</span><br><span class="line">    -&gt;     if n &lt;= 0 then</span><br><span class="line">    -&gt;       leave sum;</span><br><span class="line">    -&gt;     end if;</span><br><span class="line">    -&gt;   set total := total + n;</span><br><span class="line">    -&gt;   set n := n-1;</span><br><span class="line">    -&gt;   end loop sum;</span><br><span class="line">    -&gt;   select total;</span><br><span class="line">    -&gt; end ;</span><br><span class="line">    -&gt; $$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p9(100)$$</span><br><span class="line">+-------+</span><br><span class="line">| total |</span><br><span class="line">+-------+</span><br><span class="line">|  5050 |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">#计算从0到n的偶数累加值</span><br><span class="line">mysql&gt; create procedure p10(in n int)</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt;   declare total int default 0;</span><br><span class="line">    -&gt;   sum:loop</span><br><span class="line">    -&gt;     if n &lt;=0 then</span><br><span class="line">    -&gt;       leave sum;</span><br><span class="line">    -&gt;     end if;</span><br><span class="line">    -&gt;   if n % 2=1 then</span><br><span class="line">    -&gt;     set n :=n-1;</span><br><span class="line">    -&gt;     iterate sum;</span><br><span class="line">    -&gt;   end if;</span><br><span class="line">    -&gt;   set total := total +n;</span><br><span class="line">    -&gt;   set n := n-1;</span><br><span class="line">    -&gt;   end loop sum;</span><br><span class="line">    -&gt;   select total;</span><br><span class="line">    -&gt; end $$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call p10(2)$$</span><br><span class="line">+-------+</span><br><span class="line">| total |</span><br><span class="line">+-------+</span><br><span class="line">|     2 |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH、CLOSE，使用方法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 声明游标</span><br><span class="line">DECLARE 游标名称 CURSOR FOR 查询语句;</span><br><span class="line"># 打开游标</span><br><span class="line">OPEN 游标名称;</span><br><span class="line"># 获取游标记录</span><br><span class="line">FETCH 游标名称 INTO 变量[,变量];</span><br><span class="line"># 关闭游标</span><br><span class="line">CLOSE 游标名称;</span><br><span class="line"></span><br><span class="line"># 根据传入的参数uage，来查询用户表tb_user中，所有的用户年龄小于等于uage的用户姓名（name）和专业（profession），并将用户的姓名和专业插入到所创建的一张新表(id,name,profession)中。</span><br><span class="line"></span><br><span class="line">mysql&gt; create procedure p11(in uage int)  </span><br><span class="line">	begin </span><br><span class="line">		DECLARE uname varchar(100);    </span><br><span class="line">		DECLARE upro varchar(100) ;  </span><br><span class="line">		DECLARE cur_tb_user CURSOR FOR select name,profession from tb_user where age &lt; uage; </span><br><span class="line">		drop table if exists tb_user_new; </span><br><span class="line">		create table if not exists tb_user_new (          </span><br><span class="line">      id int AUTO_INCREMENT PRIMARY KEY,         </span><br><span class="line">      name varchar(100) comment &#x27;姓名&#x27;,        </span><br><span class="line">      profession varchar(100) comment &#x27;专业&#x27; )       </span><br><span class="line">      comment &#x27;存储过程创建临时表&#x27; ;   </span><br><span class="line">    open cur_tb_user;  </span><br><span class="line">    while true do         </span><br><span class="line">    		fetch cur_tb_user into uname,upro;            </span><br><span class="line">    		insert into tb_user_new(name,profession) values (uname,upro);         </span><br><span class="line">    end while;</span><br><span class="line">    close cur_tb_user;  </span><br><span class="line">   end$$</span><br><span class="line">   </span><br><span class="line"># 调用存储过程查询年龄在20以下的用户，报了错但是成功插入了表和数据，因为没有设置条件处理程序</span><br><span class="line">mysql&gt; call p11(20);</span><br><span class="line">    -&gt; $$</span><br><span class="line">ERROR 1329 (02000): No data - zero rows fetched, selected, or processed</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="条件处理程序handler"><a href="#条件处理程序handler" class="headerlink" title="条件处理程序handler"></a>条件处理程序handler</h3><p>可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE handler_action HANDLER FOR condition_value [,condition_value]... statement;</span><br><span class="line">handler_action</span><br><span class="line">	-CONTINUE:继续执行当前程序</span><br><span class="line">	-EXIT:终止执行当前程序</span><br><span class="line">condition_value</span><br><span class="line">	-SQLSTATE sqlstate_value,sql执行状态码，如上面的02000</span><br><span class="line">	-SQLWARNING 所有以01开头的SQLSTATE代码的简写</span><br><span class="line">	-NOT FOUND 所有以02开头的SQLSTATE代码的简写</span><br><span class="line">	-SQLEXCEPTION:所有没有被SQLWARNING或NOT FOUND 捕获的SQLSTATE代码简写</span><br><span class="line"># 完善p11，当游标遍历结束时，优雅退出</span><br><span class="line"></span><br><span class="line">create procedure p12(in uage int)  begin DECLARE uname varchar(100);    DECLARE upro varchar(100) ;  DECLARE cur_tb_user CURSOR FOR select name,profession from tb_user where age &lt; uage; DECLARE exit handler for not found close cur_tb_user; drop table if exists tb_user_new; create table if not exists tb_user_new (          id int AUTO_INCREMENT PRIMARY KEY,          name varchar(100) comment &#x27;姓名&#x27;,        profession varchar(100) comment &#x27;专业&#x27; )       comment &#x27;存储过程创建临时表&#x27; ;   open cur_tb_user;  while true do         fetch cur_tb_user into uname,upro;            insert into tb_user_new(name,profession) values (uname,upro);         end while; close cur_tb_user;  end$$</span><br></pre></td></tr></table></figure>

<h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><p>存储函数是有返回值的存储过程，存储函数的参数只能是IN类型的。</p>
<p>相当于java中的非void方法，且方法参数全是基本类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION 存储函数名称([参数列表])</span><br><span class="line">RETURN type [characteristic ...]</span><br><span class="line">BEGIN </span><br><span class="line">	--SQL语句</span><br><span class="line">	RETURN...;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">characteristic说明</span><br><span class="line">	-DETERMINISTIC:相同的输入参数总是产生相同的结果</span><br><span class="line">	-NOSQL: 不包含SQL语句</span><br><span class="line">	-READS SQL DATA:包含读取数据的语句，但不包含写入数据的语句.</span><br><span class="line">	</span><br><span class="line"># 通过存储函数完成从1到n的累加</span><br><span class="line">mysql&gt; create function fun1( n int) returns int  begin declare total int default 0; while n &gt; 0 do set total := total + n; set n := n-1; end while; return total; end;$$</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 调用存储函数</span><br><span class="line">mysql&gt; select fun1(100);</span><br><span class="line">    -&gt; $$</span><br><span class="line">+-----------+</span><br><span class="line">| fun1(100) |</span><br><span class="line">+-----------+</span><br><span class="line">|      5050 |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>



<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h1 id="InnoDB引擎"><a href="#InnoDB引擎" class="headerlink" title="InnoDB引擎"></a>InnoDB引擎</h1><h1 id="MYSQL管理"><a href="#MYSQL管理" class="headerlink" title="MYSQL管理"></a>MYSQL管理</h1>]]></content>
      <tags>
        <tag>MYSQL</tag>
        <tag>存储引擎</tag>
        <tag>存储过程</tag>
        <tag>触发器</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/28/%E9%BB%91%E9%A9%AC%E9%AB%98%E9%A2%91/</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="单例模式实现方式"><a href="#单例模式实现方式" class="headerlink" title="单例模式实现方式"></a>单例模式实现方式</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><h4 id="枚举型单例"><a href="#枚举型单例" class="headerlink" title="枚举型单例"></a>枚举型单例</h4><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><h4 id="双减锁单例"><a href="#双减锁单例" class="headerlink" title="双减锁单例"></a>双减锁单例</h4><p>volitile 解决指令重排序</p>
<p>可见行</p>
<p>有序性</p>
<h4 id="内部类型懒汉单例"><a href="#内部类型懒汉单例" class="headerlink" title="内部类型懒汉单例"></a>内部类型懒汉单例</h4><h3 id="破坏单例"><a href="#破坏单例" class="headerlink" title="破坏单例"></a>破坏单例</h3><ul>
<li>反射破坏</li>
<li>反序列化破坏。readResolve</li>
<li>Unsafe破坏单例</li>
</ul>
<p>枚举类型反射和反序列化可以破坏单例</p>
<p>java类库中使用单例</p>
<p>Runtime-静态变量</p>
<p>Consol-双检锁懒汉创建单例</p>
<p>Collections中的EmptyXXX对象–懒汉式内部类</p>
<p>Comparators中的NaturalOrderComparator使用的是枚举型饿汉式单例</p>
]]></content>
  </entry>
  <entry>
    <title>类加载与字节码技术</title>
    <url>/2022/01/05/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<ol>
<li>类文件结构</li>
<li>字节码指令</li>
<li>编译期处理</li>
<li>类加载阶段</li>
<li>类加载器</li>
<li>运行期优化</li>
</ol>
<h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><p><a class="link" href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7">doc<i class="fas fa-external-link-alt"></i></a></p>
<p>u[n]代表字节数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic;</span><br><span class="line">    u2             minor_version;</span><br><span class="line">    u2             major_version;</span><br><span class="line">    u2             constant_pool_count;</span><br><span class="line">    cp_info        constant_pool[constant_pool_count-1];</span><br><span class="line">    u2             access_flags;</span><br><span class="line">    u2             this_class;</span><br><span class="line">    u2             super_class;</span><br><span class="line">    u2             interfaces_count;</span><br><span class="line">    u2             interfaces[interfaces_count];</span><br><span class="line">    u2             fields_count;</span><br><span class="line">    field_info     fields[fields_count];</span><br><span class="line">    u2             methods_count;</span><br><span class="line">    method_info    methods[methods_count];</span><br><span class="line">    u2             attributes_count;</span><br><span class="line">    attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>0000000    ca  fe  ba  be  00  00  00  34  00  62  0a  00  16  00  2d  09</p>
<h3 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h3><p>0000000    <strong>ca  fe  ba  be</strong>  00  00  00  34  00  62  0a  00  16  00  2d  09</p>
<p>魔数，表示文件格式，class文件默认为 ca  fe  ba  be</p>
<h3 id="minor-version"><a href="#minor-version" class="headerlink" title="minor_version"></a>minor_version</h3><p>0000000    ca  fe  ba  be  <strong>00  00</strong>  00  34  00  62  0a  00  16  00  2d  09</p>
<p>次版本</p>
<h3 id="major-version"><a href="#major-version" class="headerlink" title="major_version"></a>major_version</h3><p>0000000    ca  fe  ba  be  00  00  <strong>00  34</strong>  00  62  0a  00  16  00  2d  09</p>
<p>主版本，类文件格式的版本表示位主版本.次版本</p>
<h3 id="constant-pool-count"><a href="#constant-pool-count" class="headerlink" title="constant_pool_count"></a>constant_pool_count</h3><p>0000000    ca  fe  ba  be  00  00  00  34  <strong>00  62</strong>  0a  00  16  00  2d  09</p>
<p> 常量池中常量数量,表明有97个常量，索引从1到97</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The value of the constant_pool_count item is equal to the number of entries in the constant_pool table plus one. A constant_pool index is considered valid if it is greater than zero and less than constant_pool_count, with the exception for constants of type long and double noted in §4.4.5.</span><br></pre></td></tr></table></figure>



<h3 id="cp-info"><a href="#cp-info" class="headerlink" title="cp_info"></a>cp_info</h3><p>后面从0000000行的0a  00  16  00  2d 到0003100行的    73  全是常量池中的遍历信息</p>
<p>constant_pool[constant_pool_count-1]</p>
<p>常量池中每一个常量</p>
<h3 id="access-flags"><a href="#access-flags" class="headerlink" title="access_flags"></a>access_flags</h3><p>0003100    73  <strong>00  21</strong>  00  15  00  16  00  00  00  01  00  1a  00  17  00</p>
<p>21表示ACC_PUBLIC + ACC_SUPER 表示它是一个public 类</p>
<p> 该类的访问权限</p>
<table>
<thead>
<tr>
<th>Flag Name</th>
<th>Value</th>
<th>Interpretation</th>
</tr>
</thead>
<tbody><tr>
<td><code>ACC_PUBLIC</code></td>
<td>0x0001</td>
<td>Declared <code>public</code>; may be accessed from outside its package.</td>
</tr>
<tr>
<td><code>ACC_FINAL</code></td>
<td>0x0010</td>
<td>Declared <code>final</code>; no subclasses allowed.</td>
</tr>
<tr>
<td><code>ACC_SUPER</code></td>
<td>0x0020</td>
<td>Treat superclass methods specially when invoked by the <em>invokespecial</em> instruction.</td>
</tr>
<tr>
<td><code>ACC_INTERFACE</code></td>
<td>0x0200</td>
<td>Is an interface, not a class.</td>
</tr>
<tr>
<td><code>ACC_ABSTRACT</code></td>
<td>0x0400</td>
<td>Declared <code>abstract</code>; must not be instantiated.</td>
</tr>
<tr>
<td><code>ACC_SYNTHETIC</code></td>
<td>0x1000</td>
<td>Declared synthetic; not present in the source code.</td>
</tr>
<tr>
<td><code>ACC_ANNOTATION</code></td>
<td>0x2000</td>
<td>Declared as an annotation type.</td>
</tr>
<tr>
<td><code>ACC_ENUM</code></td>
<td>0x4000</td>
<td>Declared as an <code>enum</code> type.</td>
</tr>
</tbody></table>
<h3 id="this-class"><a href="#this-class" class="headerlink" title="this_class"></a>this_class</h3><p>0003100    73  00  21  <strong>00  15</strong>  00  16  00  00  00  01  00  1a  00  17  00</p>
<p>Main</p>
<p> 该类文件定义的类或接口，必须是常量池表中的一个CONSTANT_Class_info类型常量</p>
<h3 id="super-class"><a href="#super-class" class="headerlink" title="super_class"></a>super_class</h3><p>0003100    73  00  21  00  15  <strong>00  16</strong>  00  00  00  01  00  1a  00  17  00</p>
<p>Object</p>
<p>父类，必须是常量池表中的一个类常量</p>
<h3 id="interfaces-count"><a href="#interfaces-count" class="headerlink" title="interfaces_count"></a>interfaces_count</h3><p>0003100    73  00  21  00  15  00  16  <strong>00  00</strong>  00  01  00  1a  00  17  00</p>
<p> 接口数量</p>
<h3 id="interfaces-interfaces-count"><a href="#interfaces-interfaces-count" class="headerlink" title="interfaces[interfaces_count]"></a>interfaces[interfaces_count]</h3><p>每一个接口，必须是常量池表中的一个CONSTANT_Class_info常量</p>
<h3 id="fields-count"><a href="#fields-count" class="headerlink" title="fields_count"></a>fields_count</h3><p>0003100    73  00  21  00  15  00  16  00  00  <strong>00  01</strong>  00  1a  00  17  00</p>
<p>字段数量</p>
<p>拓展:</p>
<p><a class="link" href="https://blog.csdn.net/beyond181/article/details/54928025">何为java中的field<i class="fas fa-external-link-alt"></i></a></p>
<p>What is a field in java?</p>
<p>A field is an attribute. A field may be a class’s variable, an object’s variable, an object’s method’s variable, or a parameter of a function.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bike</span></span>&#123; </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> bikes;</span><br><span class="line">  <span class="keyword">int</span> gear;</span><br><span class="line">  <span class="keyword">int</span> cadence;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">( <span class="keyword">int</span> newGear, <span class="keyword">int</span> newCadence )</span></span>&#123;</span><br><span class="line">    bikes = bikes + <span class="number">1</span>;</span><br><span class="line">    gear = newGear;</span><br><span class="line">    cadence = newCadence;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> speed = gear*cadence*<span class="number">5</span>*<span class="number">3.141</span>;</span><br><span class="line">    <span class="keyword">return</span> speed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;bikes&#x27; is a class&#x27;s variable (class variable) (static field).</span><br><span class="line">&#x27;gear&#x27; and &#x27;cadence&#x27; could be an object&#x27;s variables (instance variables) (non-static fields).</span><br><span class="line">&#x27;speed&#x27; is an object&#x27;s method&#x27;s variable (local variable).</span><br><span class="line">&#x27;newGear&#x27; and &#x27;newCadence&#x27; are parameters of a function (parameters).</span><br></pre></td></tr></table></figure>

<h3 id="fields"><a href="#fields" class="headerlink" title="fields[]"></a>fields[]</h3><p>看不下去了</p>
<p>00  1a </p>
<p>access_flags</p>
<p>4194304 </p>
<p>00  17</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name_index</span><br></pre></td></tr></table></figure>

<p>_4MB </p>
<p>00  18</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">descriptor_index</span><br></pre></td></tr></table></figure>

<p>| </p>
<p>00  01</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attributes_count</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attribute_info</span><br></pre></td></tr></table></figure>

<p>00  19</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attribute_name_index</span><br></pre></td></tr></table></figure>

<p>00  00  00  02</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attribute_length</span><br></pre></td></tr></table></figure>



<p>0003100    73  00  21  00  15  00  16  00  00  00  01  <strong>00  1a  00  17  00</strong></p>
<p>0003120    <strong>18</strong>  <strong>00  01  00  19</strong>  00  00  00  02  00  1a  00  05  00  01  00</p>
<h3 id="methods-count"><a href="#methods-count" class="headerlink" title="methods_count"></a>methods_count</h3><p>方法数量</p>
<h3 id="methods-methods-count"><a href="#methods-methods-count" class="headerlink" title="methods[methods_count]"></a>methods[methods_count]</h3><p>每一个方法，必须是常量池中的method_info结构</p>
<h3 id="attributes-count"><a href="#attributes-count" class="headerlink" title="attributes_count"></a>attributes_count</h3><p>附加属性数量</p>
<p>0003640    00  00  53  00  21  00  00  00  05  01  00  2a  10  00  00  <strong>03</strong></p>
<h3 id="attributes"><a href="#attributes" class="headerlink" title="attributes[]"></a>attributes[]</h3><p>0003660    <strong>00  2b</strong>  00  00  00  02  00  2c  00  40  00  00  00  12  00  02</p>
<p>0003660    00  2b  <strong>00  00  00  02</strong>  00  2c  00  40  00  00  00  12  00  02</p>
<p>0003660    00  2b  00  00  00  02  <strong>00  2c</strong>  00  40  00  00  00  12  00  02</p>
<p>0003660    00  2b  00  00  00  02  00  2c  <strong>00  40</strong>  00  00  00  12  00  02</p>
<p>0003660    00  2b  00  00  00  02  00  2c  00  40  <strong>00  00  00  12</strong>  00  02</p>
<p>代码属性每一个属性，必须是常量池中的<code>CONSTANT_Utf8</code>结构</p>
<p>扩展<a class="link" href="https://stackoverflow.com/questions/10115588/what-is-the-difference-between-field-variable-attribute-and-property-in-java">java POJO中field,variable,attribute,property的区别<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -parameters -d . Main.java</span><br><span class="line"></span><br><span class="line">od -t xC Main.class</span><br><span class="line"></span><br><span class="line">javap -v Main.class</span><br></pre></td></tr></table></figure>





<p>扩展</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000    ca  fe  ba  be  00  00  00  34  00  62  0a  00  16  00  2d  09</span><br><span class="line">0000020    00  2e  00  2f  08  00  30  0a  00  31  00  32  07  00  33  0a</span><br><span class="line">0000040    00  05  00  2d  0a  00  05  00  34  07  00  35  05  00  00  00</span><br><span class="line">0000060    00  00  00  0b  b8  09  00  36  00  37  07  00  38  0a  00  0c</span><br><span class="line">0000100    00  2d  12  00  00  00  3d  07  00  3e  0a  00  0f  00  2d  0a</span><br><span class="line">0000120    00  08  00  41  07  00  42  08  00  43  0a  00  12  00  44  07</span><br><span class="line">0000140    00  45  07  00  46  01  00  04  5f  34  4d  42  01  00  01  49</span><br><span class="line">0000160    01  00  0d  43  6f  6e  73  74  61  6e  74  56  61  6c  75  65</span><br><span class="line">0000200    03  00  40  00  00  01  00  06  3c  69  6e  69  74  3e  01  00</span><br><span class="line">0000220    03  28  29  56  01  00  04  43  6f  64  65  01  00  0f  4c  69</span><br><span class="line">0000240    6e  65  4e  75  6d  62  65  72  54  61  62  6c  65  01  00  04</span><br><span class="line">0000260    6d  61  69  6e  01  00  16  28  5b  4c  6a  61  76  61  2f  6c</span><br><span class="line">0000300    61  6e  67  2f  53  74  72  69  6e  67  3b  29  56  01  00  10</span><br><span class="line">0000320    4d  65  74  68  6f  64  50  61  72  61  6d  65  74  65  72  73</span><br><span class="line">0000340    01  00  04  61  72  67  73  01  00  02  6d  33  01  00  1b  28</span><br><span class="line">0000360    29  4c  6a  61  76  61  2f  6c  61  6e  67  2f  53  74  72  69</span><br><span class="line">0000400    6e  67  42  75  69  6c  64  65  72  3b  01  00  17  72  65  66</span><br><span class="line">0000420    6c  65  63  74  69  6f  6e  43  61  73  74  53  69  6e  67  6c</span><br><span class="line">0000440    65  74  6f  6e  01  00  26  28  4c  6a  61  76  61  2f  6c  61</span><br><span class="line">0000460    6e  67  2f  4f  62  6a  65  63  74  3b  29  4c  6a  61  76  61</span><br><span class="line">0000500    2f  6c  61  6e  67  2f  4f  62  6a  65  63  74  3b  01  00  03</span><br><span class="line">0000520    6f  62  6a  01  00  20  6c  61  6d  62  64  61  24  72  65  66</span><br><span class="line">0000540    6c  65  63  74  69  6f  6e  43  61  73  74  53  69  6e  67  6c</span><br><span class="line">0000560    65  74  6f  6e  24  30  01  00  28  28  4c  6a  61  76  61  2f</span><br><span class="line">0000600    6c  61  6e  67  2f  52  75  6e  6e  61  62  6c  65  3b  29  4c</span><br><span class="line">0000620    6a  61  76  61  2f  6c  61  6e  67  2f  54  68  72  65  61  64</span><br><span class="line">0000640    3b  01  00  01  72  01  00  0a  53  6f  75  72  63  65  46  69</span><br><span class="line">0000660    6c  65  01  00  09  4d  61  69  6e  2e  6a  61  76  61  0c  00</span><br><span class="line">0000700    1b  00  1c  07  00  47  0c  00  48  00  49  01  00  0b  48  65</span><br><span class="line">0000720    6c  6c  6f  20  57  6f  72  6c  64  07  00  4a  0c  00  4b  00</span><br><span class="line">0000740    4c  01  00  17  6a  61  76  61  2f  6c  61  6e  67  2f  53  74</span><br><span class="line">0000760    72  69  6e  67  42  75  69  6c  64  65  72  0c  00  4d  00  4e</span><br><span class="line">0001000    01  00  27  6a  61  76  61  2f  75  74  69  6c  2f  63  6f  6e</span><br><span class="line">0001020    63  75  72  72  65  6e  74  2f  54  68  72  65  61  64  50  6f</span><br><span class="line">0001040    6f  6c  45  78  65  63  75  74  6f  72  07  00  4f  0c  00  50</span><br><span class="line">0001060    00  51  01  00  28  6a  61  76  61  2f  75  74  69  6c  2f  63</span><br><span class="line">0001100    6f  6e  63  75  72  72  65  6e  74  2f  4c  69  6e  6b  65  64</span><br><span class="line">0001120    42  6c  6f  63  6b  69  6e  67  44  65  71  75  65  01  00  10</span><br><span class="line">0001140    42  6f  6f  74  73  74  72  61  70  4d  65  74  68  6f  64  73</span><br><span class="line">0001160    0f  06  00  52  10  00  29  0f  06  00  53  0c  00  54  00  55</span><br><span class="line">0001200    01  00  33  6a  61  76  61  2f  75  74  69  6c  2f  63  6f  6e</span><br><span class="line">0001220    63  75  72  72  65  6e  74  2f  54  68  72  65  61  64  50  6f</span><br><span class="line">0001240    6f  6c  45  78  65  63  75  74  6f  72  24  41  62  6f  72  74</span><br><span class="line">0001260    50  6f  6c  69  63  79  01  00  0b  41  62  6f  72  74  50  6f</span><br><span class="line">0001300    6c  69  63  79  01  00  0c  49  6e  6e  65  72  43  6c  61  73</span><br><span class="line">0001320    73  65  73  0c  00  1b  00  56  01  00  10  6a  61  76  61  2f</span><br><span class="line">0001340    6c  61  6e  67  2f  54  68  72  65  61  64  01  00  03  31  32</span><br><span class="line">0001360    33  0c  00  1b  00  4c  01  00  0e  73  69  6e  67  6c  65  74</span><br><span class="line">0001400    6f  6e  2f  4d  61  69  6e  01  00  10  6a  61  76  61  2f  6c</span><br><span class="line">0001420    61  6e  67  2f  4f  62  6a  65  63  74  01  00  10  6a  61  76</span><br><span class="line">0001440    61  2f  6c  61  6e  67  2f  53  79  73  74  65  6d  01  00  03</span><br><span class="line">0001460    6f  75  74  01  00  15  4c  6a  61  76  61  2f  69  6f  2f  50</span><br><span class="line">0001500    72  69  6e  74  53  74  72  65  61  6d  3b  01  00  13  6a  61</span><br><span class="line">0001520    76  61  2f  69  6f  2f  50  72  69  6e  74  53  74  72  65  61</span><br><span class="line">0001540    6d  01  00  07  70  72  69  6e  74  6c  6e  01  00  15  28  4c</span><br><span class="line">0001560    6a  61  76  61  2f  6c  61  6e  67  2f  53  74  72  69  6e  67</span><br><span class="line">0001600    3b  29  56  01  00  06  61  70  70  65  6e  64  01  00  1c  28</span><br><span class="line">0001620    49  29  4c  6a  61  76  61  2f  6c  61  6e  67  2f  53  74  72</span><br><span class="line">0001640    69  6e  67  42  75  69  6c  64  65  72  3b  01  00  1d  6a  61</span><br><span class="line">0001660    76  61  2f  75  74  69  6c  2f  63  6f  6e  63  75  72  72  65</span><br><span class="line">0001700    6e  74  2f  54  69  6d  65  55  6e  69  74  01  00  0c  4d  49</span><br><span class="line">0001720    4c  4c  49  53  45  43  4f  4e  44  53  01  00  1f  4c  6a  61</span><br><span class="line">0001740    76  61  2f  75  74  69  6c  2f  63  6f  6e  63  75  72  72  65</span><br><span class="line">0001760    6e  74  2f  54  69  6d  65  55  6e  69  74  3b  0a  00  57  00</span><br><span class="line">0002000    58  0a  00  15  00  59  01  00  09  6e  65  77  54  68  72  65</span><br><span class="line">0002020    61  64  01  00  26  28  29  4c  6a  61  76  61  2f  75  74  69</span><br><span class="line">0002040    6c  2f  63  6f  6e  63  75  72  72  65  6e  74  2f  54  68  72</span><br><span class="line">0002060    65  61  64  46  61  63  74  6f  72  79  3b  01  00  9c  28  49</span><br><span class="line">0002100    49  4a  4c  6a  61  76  61  2f  75  74  69  6c  2f  63  6f  6e</span><br><span class="line">0002120    63  75  72  72  65  6e  74  2f  54  69  6d  65  55  6e  69  74</span><br><span class="line">0002140    3b  4c  6a  61  76  61  2f  75  74  69  6c  2f  63  6f  6e  63</span><br><span class="line">0002160    75  72  72  65  6e  74  2f  42  6c  6f  63  6b  69  6e  67  51</span><br><span class="line">0002200    75  65  75  65  3b  4c  6a  61  76  61  2f  75  74  69  6c  2f</span><br><span class="line">0002220    63  6f  6e  63  75  72  72  65  6e  74  2f  54  68  72  65  61</span><br><span class="line">0002240    64  46  61  63  74  6f  72  79  3b  4c  6a  61  76  61  2f  75</span><br><span class="line">0002260    74  69  6c  2f  63  6f  6e  63  75  72  72  65  6e  74  2f  52</span><br><span class="line">0002300    65  6a  65  63  74  65  64  45  78  65  63  75  74  69  6f  6e</span><br><span class="line">0002320    48  61  6e  64  6c  65  72  3b  29  56  07  00  5a  0c  00  5b</span><br><span class="line">0002340    00  5e  0c  00  28  00  29  01  00  22  6a  61  76  61  2f  6c</span><br><span class="line">0002360    61  6e  67  2f  69  6e  76  6f  6b  65  2f  4c  61  6d  62  64</span><br><span class="line">0002400    61  4d  65  74  61  66  61  63  74  6f  72  79  01  00  0b  6d</span><br><span class="line">0002420    65  74  61  66  61  63  74  6f  72  79  07  00  60  01  00  06</span><br><span class="line">0002440    4c  6f  6f  6b  75  70  01  00  cc  28  4c  6a  61  76  61  2f</span><br><span class="line">0002460    6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  4d  65  74  68</span><br><span class="line">0002500    6f  64  48  61  6e  64  6c  65  73  24  4c  6f  6f  6b  75  70</span><br><span class="line">0002520    3b  4c  6a  61  76  61  2f  6c  61  6e  67  2f  53  74  72  69</span><br><span class="line">0002540    6e  67  3b  4c  6a  61  76  61  2f  6c  61  6e  67  2f  69  6e</span><br><span class="line">0002560    76  6f  6b  65  2f  4d  65  74  68  6f  64  54  79  70  65  3b</span><br><span class="line">0002600    4c  6a  61  76  61  2f  6c  61  6e  67  2f  69  6e  76  6f  6b</span><br><span class="line">0002620    65  2f  4d  65  74  68  6f  64  54  79  70  65  3b  4c  6a  61</span><br><span class="line">0002640    76  61  2f  6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  4d</span><br><span class="line">0002660    65  74  68  6f  64  48  61  6e  64  6c  65  3b  4c  6a  61  76</span><br><span class="line">0002700    61  2f  6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  4d  65</span><br><span class="line">0002720    74  68  6f  64  54  79  70  65  3b  29  4c  6a  61  76  61  2f</span><br><span class="line">0002740    6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  43  61  6c  6c</span><br><span class="line">0002760    53  69  74  65  3b  07  00  61  01  00  25  6a  61  76  61  2f</span><br><span class="line">0003000    6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  4d  65  74  68</span><br><span class="line">0003020    6f  64  48  61  6e  64  6c  65  73  24  4c  6f  6f  6b  75  70</span><br><span class="line">0003040    01  00  1e  6a  61  76  61  2f  6c  61  6e  67  2f  69  6e  76</span><br><span class="line">0003060    6f  6b  65  2f  4d  65  74  68  6f  64  48  61  6e  64  6c  65</span><br><span class="line">0003100    73  00  21  00  15  00  16  00  00  00  01  00  1a  00  17  00</span><br><span class="line">0003120    18  00  01  00  19  00  00  00  02  00  1a  00  05  00  01  00</span><br><span class="line">0003140    1b  00  1c  00  01  00  1d  00  00  00  1d  00  01  00  01  00</span><br><span class="line">0003160    00  00  05  2a  b7  00  01  b1  00  00  00  01  00  1e  00  00</span><br><span class="line">0003200    00  06  00  01  00  00  00  08  00  09  00  1f  00  20  00  02</span><br><span class="line">0003220    00  1d  00  00  00  25  00  02  00  01  00  00  00  09  b2  00</span><br><span class="line">0003240    02  12  03  b6  00  04  b1  00  00  00  01  00  1e  00  00  00</span><br><span class="line">0003260    0a  00  02  00  00  00  3c  00  08  00  44  00  21  00  00  00</span><br><span class="line">0003300    05  01  00  22  00  00  00  09  00  23  00  24  00  01  00  1d</span><br><span class="line">0003320    00  00  00  44  00  02  00  01  00  00  00  1c  bb  00  05  59</span><br><span class="line">0003340    b7  00  06  4b  2a  04  b6  00  07  57  2a  05  b6  00  07  57</span><br><span class="line">0003360    2a  06  b6  00  07  57  2a  b0  00  00  00  01  00  1e  00  00</span><br><span class="line">0003400    00  16  00  05  00  00  00  4b  00  08  00  4c  00  0e  00  4d</span><br><span class="line">0003420    00  14  00  4e  00  1a  00  4f  00  0a  00  25  00  26  00  02</span><br><span class="line">0003440    00  1d  00  00  00  42  00  0b  00  02  00  00  00  26  bb  00</span><br><span class="line">0003460    08  59  08  10  07  14  00  09  b2  00  0b  bb  00  0c  59  b7</span><br><span class="line">0003500    00  0d  ba  00  0e  00  00  bb  00  0f  59  b7  00  10  b7  00</span><br><span class="line">0003520    11  4c  01  b0  00  00  00  01  00  1e  00  00  00  0a  00  02</span><br><span class="line">0003540    00  00  00  53  00  24  00  54  00  21  00  00  00  05  01  00</span><br><span class="line">0003560    27  00  00  10  0a  00  28  00  29  00  02  00  1d  00  00  00</span><br><span class="line">0003600    22  00  03  00  01  00  00  00  0a  bb  00  12  59  12  13  b7</span><br><span class="line">0003620    00  14  b0  00  00  00  01  00  1e  00  00  00  06  00  01  00</span><br><span class="line">0003640    00  00  53  00  21  00  00  00  05  01  00  2a  10  00  00  03</span><br><span class="line">0003660    00  2b  00  00  00  02  00  2c  00  40  00  00  00  12  00  02</span><br><span class="line">0003700    00  0f  00  08  00  3f  00  09  00  5c  00  5f  00  5d  00  19</span><br><span class="line">0003720    00  39  00  00  00  0c  00  01  00  3a  00  03  00  3b  00  3c</span><br><span class="line">0003740    00  3b                                                        </span><br><span class="line">0003742</span><br></pre></td></tr></table></figure>

<p>附表</p>
<p>1.常量池类型索引</p>
<p>Constant pool tags</p>
<table>
<thead>
<tr>
<th>Constant Type</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td><code>CONSTANT_Class</code></td>
<td>7</td>
</tr>
<tr>
<td><code>CONSTANT_Fieldref</code></td>
<td>9</td>
</tr>
<tr>
<td><code>CONSTANT_Methodref</code></td>
<td>10</td>
</tr>
<tr>
<td><code>CONSTANT_InterfaceMethodref</code></td>
<td>11</td>
</tr>
<tr>
<td><code>CONSTANT_String</code></td>
<td>8</td>
</tr>
<tr>
<td><code>CONSTANT_Integer</code></td>
<td>3</td>
</tr>
<tr>
<td><code>CONSTANT_Float</code></td>
<td>4</td>
</tr>
<tr>
<td><code>CONSTANT_Long</code></td>
<td>5</td>
</tr>
<tr>
<td><code>CONSTANT_Double</code></td>
<td>6</td>
</tr>
<tr>
<td><code>CONSTANT_NameAndType</code></td>
<td>12</td>
</tr>
<tr>
<td><code>CONSTANT_Utf8</code></td>
<td>1</td>
</tr>
<tr>
<td><code>CONSTANT_MethodHandle</code></td>
<td>15</td>
</tr>
<tr>
<td><code>CONSTANT_MethodType</code></td>
<td>16</td>
</tr>
<tr>
<td><code>CONSTANT_InvokeDynamic</code></td>
<td>18</td>
</tr>
</tbody></table>
<p>2.常量池中各种类型结构</p>
<p>CONSTANT_Class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Class_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 name_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Fieldref</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Fieldref_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 class_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Methodref</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Methodref_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 class_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_InterfaceMethodref</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_InterfaceMethodref_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 class_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_String</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_String_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 string_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Integer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Integer_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u4 bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Float</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Float_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u4 bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CONSTANT_Long</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Long_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u4 high_bytes;</span><br><span class="line">    u4 low_bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Double</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Double_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u4 high_bytes;</span><br><span class="line">    u4 low_bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CONSTANT_NameAndType</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_NameAndType_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 name_index;</span><br><span class="line">    u2 descriptor_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Utf8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Utf8_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 length;</span><br><span class="line">    u1 bytes[length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_MethodHandle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_MethodHandle_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u1 reference_kind;</span><br><span class="line">    u2 reference_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_MethodType</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_MethodType_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 descriptor_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_InvokeDynamic</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_InvokeDynamic_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 bootstrap_method_attr_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JAVAP工具"><a href="#JAVAP工具" class="headerlink" title="JAVAP工具"></a>JAVAP工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple singleton % javap --<span class="built_in">help</span></span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -<span class="built_in">help</span>  --<span class="built_in">help</span>  -?        输出此用法消息</span><br><span class="line">  -version                 版本信息</span><br><span class="line">  -v  -verbose             输出附加信息</span><br><span class="line">  -l                       输出行号和本地变量表</span><br><span class="line">  -public                  仅显示公共类和成员</span><br><span class="line">  -protected               显示受保护的/公共类和成员</span><br><span class="line">  -package                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  -p  -private             显示所有类和成员</span><br><span class="line">  -c                       对代码进行反汇编</span><br><span class="line">  -s                       输出内部类型签名</span><br><span class="line">  -sysinfo                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants               显示最终常量</span><br><span class="line">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple singleton % javap -v Main.class</span><br><span class="line">Classfile /Users/chaoqiang/IdeaProjects/learning/interview/src/main/java/singleton/singleton/Main.class</span><br><span class="line">  Last modified 2022-1-2; size 2018 bytes</span><br><span class="line">  MD5 checksum 4e01c6c498e93b2bc4ee92022604825c</span><br><span class="line">  Compiled from <span class="string">&quot;Main.java&quot;</span></span><br><span class="line">public class singleton.Main</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="comment">#1 = Methodref          #22.#45        // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   <span class="comment">#2 = Fieldref           #46.#47        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   <span class="comment">#3 = String             #48            // Hello World</span></span><br><span class="line">   <span class="comment">#4 = Methodref          #49.#50        // java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   <span class="comment">#5 = Class              #51            // java/lang/StringBuilder</span></span><br><span class="line">   <span class="comment">#6 = Methodref          #5.#45         // java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   <span class="comment">#7 = Methodref          #5.#52         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">   <span class="comment">#8 = Class              #53            // java/util/concurrent/ThreadPoolExecutor</span></span><br><span class="line">   <span class="comment">#9 = Long               3000l</span></span><br><span class="line">  <span class="comment">#11 = Fieldref           #54.#55        // java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;</span></span><br><span class="line">  <span class="comment">#12 = Class              #56            // java/util/concurrent/LinkedBlockingDeque</span></span><br><span class="line">  <span class="comment">#13 = Methodref          #12.#45        // java/util/concurrent/LinkedBlockingDeque.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#14 = InvokeDynamic      #0:#61         // #0:newThread:()Ljava/util/concurrent/ThreadFactory;</span></span><br><span class="line">  <span class="comment">#15 = Class              #62            // java/util/concurrent/ThreadPoolExecutor$AbortPolicy</span></span><br><span class="line">  <span class="comment">#16 = Methodref          #15.#45        // java/util/concurrent/ThreadPoolExecutor$AbortPolicy.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#17 = Methodref          #8.#65         // java/util/concurrent/ThreadPoolExecutor.&quot;&lt;init&gt;&quot;:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V</span></span><br><span class="line">  <span class="comment">#18 = Class              #66            // java/lang/Thread</span></span><br><span class="line">  <span class="comment">#19 = String             #67            // 123</span></span><br><span class="line">  <span class="comment">#20 = Methodref          #18.#68        // java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#21 = Class              #69            // singleton/Main</span></span><br><span class="line">  <span class="comment">#22 = Class              #70            // java/lang/Object</span></span><br><span class="line">  <span class="comment">#23 = Utf8               _4MB</span></span><br><span class="line">  <span class="comment">#24 = Utf8               I</span></span><br><span class="line">  <span class="comment">#25 = Utf8               ConstantValue</span></span><br><span class="line">  <span class="comment">#26 = Integer            4194304</span></span><br><span class="line">  <span class="comment">#27 = Utf8               &lt;init&gt;</span></span><br><span class="line">  <span class="comment">#28 = Utf8               ()V</span></span><br><span class="line">  <span class="comment">#29 = Utf8               Code</span></span><br><span class="line">  <span class="comment">#30 = Utf8               LineNumberTable</span></span><br><span class="line">  <span class="comment">#31 = Utf8               main</span></span><br><span class="line">  <span class="comment">#32 = Utf8               ([Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#33 = Utf8               MethodParameters</span></span><br><span class="line">  <span class="comment">#34 = Utf8               args</span></span><br><span class="line">  <span class="comment">#35 = Utf8               m3</span></span><br><span class="line">  <span class="comment">#36 = Utf8               ()Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="comment">#37 = Utf8               reflectionCastSingleton</span></span><br><span class="line">  <span class="comment">#38 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;</span></span><br><span class="line">  <span class="comment">#39 = Utf8               obj</span></span><br><span class="line">  <span class="comment">#40 = Utf8               lambda$reflectionCastSingleton$0</span></span><br><span class="line">  <span class="comment">#41 = Utf8               (Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#42 = Utf8               r</span></span><br><span class="line">  <span class="comment">#43 = Utf8               SourceFile</span></span><br><span class="line">  <span class="comment">#44 = Utf8               Main.java</span></span><br><span class="line">  <span class="comment">#45 = NameAndType        #27:#28        // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#46 = Class              #71            // java/lang/System</span></span><br><span class="line">  <span class="comment">#47 = NameAndType        #72:#73        // out:Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="comment">#48 = Utf8               Hello World</span></span><br><span class="line">  <span class="comment">#49 = Class              #74            // java/io/PrintStream</span></span><br><span class="line">  <span class="comment">#50 = NameAndType        #75:#76        // println:(Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#51 = Utf8               java/lang/StringBuilder</span></span><br><span class="line">  <span class="comment">#52 = NameAndType        #77:#78        // append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="comment">#53 = Utf8               java/util/concurrent/ThreadPoolExecutor</span></span><br><span class="line">  <span class="comment">#54 = Class              #79            // java/util/concurrent/TimeUnit</span></span><br><span class="line">  <span class="comment">#55 = NameAndType        #80:#81        // MILLISECONDS:Ljava/util/concurrent/TimeUnit;</span></span><br><span class="line">  <span class="comment">#56 = Utf8               java/util/concurrent/LinkedBlockingDeque</span></span><br><span class="line">  <span class="comment">#57 = Utf8               BootstrapMethods</span></span><br><span class="line">  <span class="comment">#58 = MethodHandle       #6:#82         // invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  <span class="comment">#59 = MethodType         #41            //  (Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#60 = MethodHandle       #6:#83         // invokestatic singleton/Main.lambda$reflectionCastSingleton$0:(Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#61 = NameAndType        #84:#85        // newThread:()Ljava/util/concurrent/ThreadFactory;</span></span><br><span class="line">  <span class="comment">#62 = Utf8               java/util/concurrent/ThreadPoolExecutor$AbortPolicy</span></span><br><span class="line">  <span class="comment">#63 = Utf8               AbortPolicy</span></span><br><span class="line">  <span class="comment">#64 = Utf8               InnerClasses</span></span><br><span class="line">  <span class="comment">#65 = NameAndType        #27:#86        // &quot;&lt;init&gt;&quot;:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V</span></span><br><span class="line">  <span class="comment">#66 = Utf8               java/lang/Thread</span></span><br><span class="line">  <span class="comment">#67 = Utf8               123</span></span><br><span class="line">  <span class="comment">#68 = NameAndType        #27:#76        // &quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#69 = Utf8               singleton/Main</span></span><br><span class="line">  <span class="comment">#70 = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="comment">#71 = Utf8               java/lang/System</span></span><br><span class="line">  <span class="comment">#72 = Utf8               out</span></span><br><span class="line">  <span class="comment">#73 = Utf8               Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="comment">#74 = Utf8               java/io/PrintStream</span></span><br><span class="line">  <span class="comment">#75 = Utf8               println</span></span><br><span class="line">  <span class="comment">#76 = Utf8               (Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#77 = Utf8               append</span></span><br><span class="line">  <span class="comment">#78 = Utf8               (I)Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="comment">#79 = Utf8               java/util/concurrent/TimeUnit</span></span><br><span class="line">  <span class="comment">#80 = Utf8               MILLISECONDS</span></span><br><span class="line">  <span class="comment">#81 = Utf8               Ljava/util/concurrent/TimeUnit;</span></span><br><span class="line">  <span class="comment">#82 = Methodref          #87.#88        // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  <span class="comment">#83 = Methodref          #21.#89        // singleton/Main.lambda$reflectionCastSingleton$0:(Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#84 = Utf8               newThread</span></span><br><span class="line">  <span class="comment">#85 = Utf8               ()Ljava/util/concurrent/ThreadFactory;</span></span><br><span class="line">  <span class="comment">#86 = Utf8               (IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V</span></span><br><span class="line">  <span class="comment">#87 = Class              #90            // java/lang/invoke/LambdaMetafactory</span></span><br><span class="line">  <span class="comment">#88 = NameAndType        #91:#94        // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  <span class="comment">#89 = NameAndType        #40:#41        // lambda$reflectionCastSingleton$0:(Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#90 = Utf8               java/lang/invoke/LambdaMetafactory</span></span><br><span class="line">  <span class="comment">#91 = Utf8               metafactory</span></span><br><span class="line">  <span class="comment">#92 = Class              #96            // java/lang/invoke/MethodHandles$Lookup</span></span><br><span class="line">  <span class="comment">#93 = Utf8               Lookup</span></span><br><span class="line">  <span class="comment">#94 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  <span class="comment">#95 = Class              #97            // java/lang/invoke/MethodHandles</span></span><br><span class="line">  <span class="comment">#96 = Utf8               java/lang/invoke/MethodHandles$Lookup</span></span><br><span class="line">  <span class="comment">#97 = Utf8               java/lang/invoke/MethodHandles</span></span><br><span class="line">  <span class="comment"># 构造方法</span></span><br><span class="line">&#123;</span><br><span class="line">  public singleton.Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         4: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 8: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     <span class="comment">#2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         3: ldc           <span class="comment">#3                  // String Hello World</span></span><br><span class="line">         5: invokevirtual <span class="comment">#4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         8: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 61: 0</span><br><span class="line">        line 69: 8</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      args</span><br><span class="line"></span><br><span class="line">  public static java.lang.StringBuilder m3();</span><br><span class="line">    descriptor: ()Ljava/lang/StringBuilder;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=0</span><br><span class="line">         0: new           <span class="comment">#5                  // class java/lang/StringBuilder</span></span><br><span class="line">         3: dup</span><br><span class="line">         4: invokespecial <span class="comment">#6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         7: astore_0</span><br><span class="line">         8: aload_0</span><br><span class="line">         9: iconst_1</span><br><span class="line">        10: invokevirtual <span class="comment">#7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">        13: pop</span><br><span class="line">        14: aload_0</span><br><span class="line">        15: iconst_2</span><br><span class="line">        16: invokevirtual <span class="comment">#7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">        19: pop</span><br><span class="line">        20: aload_0</span><br><span class="line">        21: iconst_3</span><br><span class="line">        22: invokevirtual <span class="comment">#7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">        25: pop</span><br><span class="line">        26: aload_0</span><br><span class="line">        27: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 76: 0</span><br><span class="line">        line 77: 8</span><br><span class="line">        line 78: 14</span><br><span class="line">        line 79: 20</span><br><span class="line">        line 80: 26</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Main.java&quot;</span></span><br><span class="line">InnerClasses:</span><br><span class="line">     public static <span class="comment">#63= #15 of #8; //AbortPolicy=class java/util/concurrent/ThreadPoolExecutor$AbortPolicy of class java/util/concurrent/ThreadPoolExecutor</span></span><br><span class="line">     public static final <span class="comment">#93= #92 of #95; //Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span></span><br><span class="line">BootstrapMethods:</span><br><span class="line">  0: <span class="comment">#58 invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">    Method arguments:</span><br><span class="line">      <span class="comment">#59 (Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">      <span class="comment">#60 invokestatic singleton/Main.lambda$reflectionCastSingleton$0:(Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">      <span class="comment">#59 (Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>类加载时</p>
<p>常量池载入运行时常量池，运行时常量池属于方法区</p>
<p>short内的数字和字节码指令存在一起，一旦超过short的最大值，该数字就存储在运行时常量池</p>
<p>方法字节码载入方法区 </p>
<h3 id="CInit"><a href="#CInit" class="headerlink" title="CInit"></a>CInit</h3><p>静态代码块和静态变量会在编译时合并为一个static方法，按代码中的顺序加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  static int i;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line"></span><br><span class="line">  public singleton.Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 8: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: getstatic     #3                  // Field i:I</span><br><span class="line">         6: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 36: 0</span><br><span class="line">        line 104: 9</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      args</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=0, args_size=0</span><br><span class="line">         0: bipush        20</span><br><span class="line">         2: putstatic     #3                  // Field i:I</span><br><span class="line">         5: bipush        30</span><br><span class="line">         7: putstatic     #3                  // Field i:I</span><br><span class="line">        10: bipush        10</span><br><span class="line">        12: putstatic     #3                  // Field i:I</span><br><span class="line">        15: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 26: 0</span><br><span class="line">        line 30: 5</span><br><span class="line">        line 33: 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p>编译器会按照从上至下的顺序，收集所有{}代码块和成员变量赋值的构造方法，但原始构造方法内的代码总是在最后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String a = <span class="string">&quot;s1&quot;</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="string">&quot;s2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Main(String a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main main = <span class="keyword">new</span> Main(<span class="string">&quot;s3&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        System.out.println(main.a);</span><br><span class="line">        System.out.println(main.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  singleton.Main(java.lang.String, int);</span><br><span class="line">    descriptor: (Ljava/lang/String;I)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=3, args_size=3</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: ldc           #2                  // String s1</span><br><span class="line">         7: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">        10: aload_0</span><br><span class="line">        11: bipush        20</span><br><span class="line">        13: putfield      #4                  // Field b:I</span><br><span class="line">        16: aload_0</span><br><span class="line">        17: bipush        10</span><br><span class="line">        19: putfield      #4                  // Field b:I</span><br><span class="line">        22: aload_0</span><br><span class="line">        23: ldc           #5                  // String s2</span><br><span class="line">        25: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">        28: aload_0</span><br><span class="line">        29: aload_1</span><br><span class="line">        30: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">        33: aload_0</span><br><span class="line">        34: iload_2</span><br><span class="line">        35: putfield      #4                  // Field b:I</span><br><span class="line">        38: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 29: 0</span><br><span class="line">        line 20: 4</span><br><span class="line">        line 22: 10</span><br><span class="line">        line 24: 16</span><br><span class="line">        line 26: 22</span><br><span class="line">        line 30: 28</span><br><span class="line">        line 31: 33</span><br><span class="line">        line 32: 38</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      a</span><br><span class="line">      b</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=4, locals=2, args_size=1</span><br><span class="line">         0: new           #6                  // class singleton/Main</span><br><span class="line">         3: dup</span><br><span class="line">         4: ldc           #7                  // String s3</span><br><span class="line">         6: bipush        30</span><br><span class="line">         8: invokespecial #8                  // Method &quot;&lt;init&gt;&quot;:(Ljava/lang/String;I)V</span><br><span class="line">        11: astore_1</span><br><span class="line">        12: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        15: aload_1</span><br><span class="line">        16: getfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">        19: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        22: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        25: aload_1</span><br><span class="line">        26: getfield      #4                  // Field b:I</span><br><span class="line">        29: invokevirtual #11                 // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        32: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 35: 0</span><br><span class="line">        line 36: 12</span><br><span class="line">        line 37: 22</span><br><span class="line">        line 105: 32</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      args</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="方法调用字节码"><a href="#方法调用字节码" class="headerlink" title="方法调用字节码"></a>方法调用字节码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="comment">//invokespecial</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">  <span class="comment">//invokespecial</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">  <span class="comment">//invokevirtual</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main main = <span class="keyword">new</span> Main();</span><br><span class="line">        main.test1();</span><br><span class="line">        main.test2();</span><br><span class="line">        main.test3();</span><br><span class="line">        main.test4();</span><br><span class="line">        Main.test4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  public singleton.Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 8: 0</span><br><span class="line"></span><br><span class="line">  public void test3();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=0, locals=1, args_size=1</span><br><span class="line">         0: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 37: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=1</span><br><span class="line">         0: new           #2                  // class singleton/Main分配新创建的对象地址，压栈</span><br><span class="line">         3: dup																//复制栈顶引用压栈</span><br><span class="line">         4: invokespecial #3                  // Method &quot;&lt;init&gt;&quot;:()V//栈顶引用对象调用构造方法，弹栈 </span><br><span class="line">         7: astore_1																								//出站，将引用保存到1槽位</span><br><span class="line">         8: aload_1</span><br><span class="line">         9: invokespecial #4                  // Method test1:()V</span><br><span class="line">        12: aload_1</span><br><span class="line">        13: invokespecial #5                  // Method test2:()V</span><br><span class="line">        16: aload_1</span><br><span class="line">        17: invokevirtual #6                  // Method test3:()V		//调用虚拟方法，因为编译时不确定方法的入口地址</span><br><span class="line">        20: aload_1</span><br><span class="line">        21: pop																//静态方法不需要使用对象调用，所以压栈后直接弹栈了</span><br><span class="line">        22: invokestatic  #7                  // Method test4:()V</span><br><span class="line">        25: invokestatic  #7                  // Method test4:()V</span><br><span class="line">        28: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 41: 0</span><br><span class="line">        line 42: 8</span><br><span class="line">        line 43: 12</span><br><span class="line">        line 44: 16</span><br><span class="line">        line 45: 20</span><br><span class="line">        line 46: 25</span><br><span class="line">        line 115: 28</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      args</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="多态方法查找实际调用地址"><a href="#多态方法查找实际调用地址" class="headerlink" title="多态方法查找实际调用地址"></a>多态方法查找实际调用地址</h3><p>当执行invokevirtual指令时</p>
<ol>
<li>先通过栈帧中的对象引用找到对象</li>
<li>分析对象头，找到对象的实际Class</li>
<li>Class结构中有vtable，它在类加载的链接阶段就已经根据方法的重写规则生成好了</li>
<li>查表得到方法的具体地址</li>
<li>执行方法的字节码</li>
</ol>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>Exception table</p>
<p>​    from        to        target        type</p>
<p>​            2        5            8                java/lang/NullPointerException</p>
<p>​            2        5            22                java/lang/Exception</p>
<h3 id="multi-catch情况"><a href="#multi-catch情况" class="headerlink" title="multi-catch情况"></a>multi-catch情况</h3><p>多种异常可以捕获多种catch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">&#125;catch(NoSuchMethodException | IllegalAccessException | InvocationTargetException)</span><br></pre></td></tr></table></figure>

<h3 id="finally字节码"><a href="#finally字节码" class="headerlink" title="finally字节码"></a>finally字节码</h3><p>finally块的字节码分别加在try块的最后和catch块的最后</p>
<p>如果在finally中出现了return，会吞掉throw，千万不要在finally中return</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span></span>;</span><br><span class="line">   descriptor: ()I</span><br><span class="line">   flags: ACC_PUBLIC</span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">3</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">        <span class="number">0</span>: iconst_1</span><br><span class="line">        <span class="number">1</span>: iconst_0</span><br><span class="line">        <span class="number">2</span>: idiv</span><br><span class="line">        <span class="number">3</span>: istore_1</span><br><span class="line">        <span class="number">4</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">6</span>: istore_2				<span class="comment">//将栈顶元素进行暂存</span></span><br><span class="line">        <span class="number">7</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">9</span>: ireturn</span><br><span class="line">       <span class="number">10</span>: astore_1</span><br><span class="line">       <span class="number">11</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/Error</span></span><br><span class="line">       <span class="number">14</span>: dup</span><br><span class="line">       <span class="number">15</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String error</span></span><br><span class="line">       <span class="number">17</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method java/lang/Error.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">       <span class="number">20</span>: athrow</span><br><span class="line">       <span class="number">21</span>: astore_3</span><br><span class="line">       <span class="number">22</span>: bipush        <span class="number">30</span>											<span class="comment">//注意，此处并没有throw出去</span></span><br><span class="line">       <span class="number">24</span>: ireturn</span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">0</span>     <span class="number">7</span>    <span class="number">10</span>   Class java/lang/Exception</span><br><span class="line">            <span class="number">0</span>     <span class="number">7</span>    <span class="number">21</span>   any</span><br><span class="line">           <span class="number">10</span>    <span class="number">22</span>    <span class="number">21</span>   any</span><br><span class="line">     LineNumberTable:</span><br><span class="line">       line <span class="number">41</span>: <span class="number">0</span></span><br><span class="line">       line <span class="number">43</span>: <span class="number">4</span></span><br><span class="line">       line <span class="number">48</span>: <span class="number">7</span></span><br><span class="line">       line <span class="number">45</span>: <span class="number">10</span></span><br><span class="line">       line <span class="number">46</span>: <span class="number">11</span></span><br><span class="line">       line <span class="number">48</span>: <span class="number">21</span></span><br><span class="line">     StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">       frame_type = <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">         stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Exception</span> ]</span></span><br><span class="line"><span class="class">       <span class="title">frame_type</span> </span>= <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">         stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Throwable</span> ]</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_1</span><br><span class="line">         <span class="number">1</span>: iconst_0</span><br><span class="line">         <span class="number">2</span>: idiv</span><br><span class="line">         <span class="number">3</span>: istore_1</span><br><span class="line">         <span class="number">4</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">6</span>: istore_2			</span><br><span class="line">         <span class="number">7</span>: iload_2			</span><br><span class="line">         <span class="number">8</span>: ireturn</span><br><span class="line">         <span class="number">9</span>: astore_1</span><br><span class="line">        <span class="number">10</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/Error</span></span><br><span class="line">        <span class="number">13</span>: dup</span><br><span class="line">        <span class="number">14</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String error</span></span><br><span class="line">        <span class="number">16</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method java/lang/Error.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">19</span>: athrow</span><br><span class="line">        <span class="number">20</span>: astore_3</span><br><span class="line">        <span class="number">21</span>: aload_3</span><br><span class="line">        <span class="number">22</span>: athrow</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">0</span>     <span class="number">7</span>     <span class="number">9</span>   Class java/lang/Exception</span><br><span class="line">             <span class="number">0</span>     <span class="number">7</span>    <span class="number">20</span>   any</span><br><span class="line">             <span class="number">9</span>    <span class="number">21</span>    <span class="number">20</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">41</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">43</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">45</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">46</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">47</span>: <span class="number">20</span></span><br><span class="line">        line <span class="number">48</span>: <span class="number">21</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">73</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Exception</span> ]</span></span><br><span class="line"><span class="class">        <span class="title">frame_type</span> </span>= <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Throwable</span> ]</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i = <span class="number">12</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">11</span></span><br><span class="line">         <span class="number">5</span>: istore_2					<span class="comment">//注意，此处try正常执行到return语句，会将return结果存到slot2进行暂存，固定返回值，执行finally会返回11</span></span><br><span class="line">         <span class="number">6</span>: bipush        <span class="number">12</span></span><br><span class="line">         <span class="number">8</span>: istore_1</span><br><span class="line">         <span class="number">9</span>: iload_2</span><br><span class="line">        <span class="number">10</span>: ireturn</span><br><span class="line">        <span class="number">11</span>: astore_2</span><br><span class="line">        <span class="number">12</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/Error</span></span><br><span class="line">        <span class="number">15</span>: dup</span><br><span class="line">        <span class="number">16</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String error</span></span><br><span class="line">        <span class="number">18</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method java/lang/Error.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">21</span>: athrow</span><br><span class="line">        <span class="number">22</span>: astore_3</span><br><span class="line">        <span class="number">23</span>: bipush        <span class="number">12</span></span><br><span class="line">        <span class="number">25</span>: istore_1</span><br><span class="line">        <span class="number">26</span>: aload_3</span><br><span class="line">        <span class="number">27</span>: athrow</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">11</span>   Class java/lang/Exception</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">22</span>   any</span><br><span class="line">            <span class="number">11</span>    <span class="number">23</span>    <span class="number">22</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">40</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">43</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">48</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">43</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">45</span>: <span class="number">11</span></span><br><span class="line">        line <span class="number">46</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">48</span>: <span class="number">22</span></span><br><span class="line">        line <span class="number">49</span>: <span class="number">26</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">11</span></span><br><span class="line">          locals = [ <span class="class"><span class="keyword">class</span> <span class="title">singleton</span>/<span class="title">Main</span>, <span class="title">int</span> ]</span></span><br><span class="line"><span class="class">          <span class="title">stack</span> </span>= [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Exception</span> ]</span></span><br><span class="line"><span class="class">        <span class="title">frame_type</span> </span>= <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Throwable</span> ]</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
