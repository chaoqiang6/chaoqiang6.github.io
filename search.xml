<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ant构建Tomcat源码开发环境，解决乱码</title>
    <url>/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>学习tomcat，因为网上好多使用maven搭建的tomcat，但tomcat官方推荐的是使用ant搭建，所以在此记录。</p>
<p>上半部分搭建环境，下半部分解决乱码。</p>
<p>参考资料:</p>
<p><a class="link" href="https://tomcat.apache.org/tomcat-8.5-doc/building.html">官方搭建开发环境文档<i class="fas fa-external-link-alt"></i></a>(推荐一定要先看一下文档)</p>
<p>解决乱码{</p>
<p><a class="link" href="https://juejin.cn/post/6967701837696729124">关于Tomcat源码启动的乱码问题的解决<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://stackoverflow.com/questions/4659929/how-to-use-utf-8-in-resource-properties-with-resourcebundle">How to use UTF-8 in resource properties with ResourceBundle<i class="fas fa-external-link-alt"></i></a></p>
<p>}</p>
<p>解决访问报错{</p>
<p><a class="link" href="https://github.com/gqzdev/tomcat-start">解决访问500无法为JSP编译类问题<i class="fas fa-external-link-alt"></i></a></p>
<p>}</p>
<h2 id="搭建源码启动环境"><a href="#搭建源码启动环境" class="headerlink" title="搭建源码启动环境"></a>搭建源码启动环境</h2><p>当前环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装jdk</span></span><br><span class="line">chaoqiang@Pineapple bin % java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_322&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (Zulu 8.60.0.21-CA-macos-aarch64) (build 1.8.0_322-b06)</span><br><span class="line">OpenJDK 64-Bit Server VM (Zulu 8.60.0.21-CA-macos-aarch64) (build 25.322-b06, mixed mode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ant</span></span><br><span class="line">chaoqiang@Pineapple bin % ant -version</span><br><span class="line">Apache Ant(TM) version 1.10.10 compiled on April 12 2021</span><br></pre></td></tr></table></figure>

<h2 id="下载tomcat源码"><a href="#下载tomcat源码" class="headerlink" title="下载tomcat源码"></a>下载tomcat源码</h2><p>本人使用tomcat8.5,可根据个人需求在官网选择版本</p>
<h3 id="解压源码包"><a href="#解压源码包" class="headerlink" title="解压源码包"></a>解压源码包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple self-learn % ll</span><br><span class="line">total 13728</span><br><span class="line">drwxr-xr-x  16 chaoqiang  staff      512  2  6 13:46 ./</span><br><span class="line">drwxr-xr-x+ 68 chaoqiang  staff     2176  2  5 23:26 ../</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    10244  2  5 21:34 .DS_Store</span><br><span class="line">drwx------@  7 chaoqiang  staff      224 10 17 16:06 SpringBoot打包部署/</span><br><span class="line">drwx------@  5 chaoqiang  staff      160  4 23  2021 VODUploadDemo-java-1.4.14/</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff  5961981  1 31 14:42 apache-tomcat-8.5.75-src.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple self-learn % tar -zxvf apache-tomcat-8.5.75-src.tar.gz </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改构建jar包指定路径"><a href="#修改构建jar包指定路径" class="headerlink" title="修改构建jar包指定路径"></a>修改构建jar包指定路径</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple apache-tomcat-8.5.75-src % <span class="built_in">pwd</span></span><br><span class="line">/Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src</span><br><span class="line">chaoqiang@Pineapple apache-tomcat-8.5.75-src % vi build.properties.default </span><br></pre></td></tr></table></figure>



<p>修改base.path属性，默认为用户路径下的/tomcat-build-libs，修改为源码目录下/tomcat-build-libs</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206142732170.png" alt="image-20220206142732170"></p>
<h3 id="指定ide开始构建"><a href="#指定ide开始构建" class="headerlink" title="指定ide开始构建"></a>指定ide开始构建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple apache-tomcat-8.5.75-src % ant ide-intellij </span><br><span class="line">Buildfile: /Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src/build.xml</span><br><span class="line"></span><br><span class="line">download-compile:</span><br><span class="line"></span><br><span class="line">testexist:</span><br><span class="line">     [<span class="built_in">echo</span>] Testing  <span class="keyword">for</span> /Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src/commons-daemon-1.2.4/commons-daemon-1.2.4.jar</span><br><span class="line"></span><br><span class="line">downloadgz-2:</span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ide-intellij:</span><br><span class="line">     [copy] Copying 10 files to /Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src/.idea</span><br><span class="line">     [<span class="built_in">echo</span>] IntelliJ IDEA project directory created. Please create PATH VARIABLES <span class="keyword">for</span></span><br><span class="line">     [<span class="built_in">echo</span>] </span><br><span class="line">     [<span class="built_in">echo</span>]       ANT_HOME          = /Users/chaoqiang/.sdkman/candidates/ant/current</span><br><span class="line">     [<span class="built_in">echo</span>]       TOMCAT_BUILD_LIBS = /Users/chaoqiang/self-learn/apache-tomcat-8.5.75-src</span><br><span class="line">     [<span class="built_in">echo</span>]     </span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line">Total time: 27 seconds</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple ~ % <span class="built_in">export</span> | grep ANT_HOME</span><br><span class="line">ANT_HOME=/Users/chaoqiang/.sdkman/candidates/ant/current</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple ~ % <span class="built_in">export</span> | grep TOMCAT_BUILD_LIBS</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple apache-tomcat-8.5.75-src % ll</span><br><span class="line">total 680</span><br><span class="line">drwxr-xr-x  36 chaoqiang  staff    1152  2  6 13:58 ./</span><br><span class="line">drwxr-xr-x  17 chaoqiang  staff     544  2  6 13:47 ../</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    1061  1 18 06:07 .editorconfig</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    1451  1 18 06:07 .gitignore</span><br><span class="line">drwxr-xr-x  10 chaoqiang  staff     320  2  6 13:58 .idea/</span><br><span class="line">drwxr-xr-x@  3 chaoqiang  staff      96  1 18 06:07 .travis/</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    3181  1 18 06:07 .travis.yml</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff   19585  1 18 06:07 BUILDING.txt</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    6210  1 18 06:07 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff   44901  1 18 06:07 KEYS</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff   57011  1 18 06:07 LICENSE</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    3225  1 18 06:07 MERGE.txt</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    1726  1 18 06:07 NOTICE</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    3378  1 18 06:07 README.md</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff    7228  1 18 06:07 RELEASE-NOTES</span><br><span class="line">-rw-r--r--@  1 chaoqiang  staff   16696  1 18 06:07 RUNNING.txt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>让添加两个环境变量，先暂时不添加TOMCAT_BUILD_LIBS，可以看到当前源码目录已经有.idea项目文件了</p>
<h3 id="idea导入项目"><a href="#idea导入项目" class="headerlink" title="idea导入项目"></a>idea导入项目</h3><p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141142916.png" alt="image-20220206141142916"></p>
<p>选择源码路径，new Window</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141419296.png" alt="image-20220206141419296"></p>
<p>项目导入后，找到BootStrap类，启动报错，说是部分包没找到</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141547288.png" alt="image-20220206141547288"></p>
<p>打开File-&gt;ProjectStructure</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141719356.png" alt="image-20220206141719356"></p>
<p>发现module中的dependency中部分jar没法正常依赖</p>
<p>第一次打开应该是${TOMCAT_BUILD_LIBS}/*.jar这种带环境变量参数的相对路径</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206143054522.png" alt="image-20220206143054522"></p>
<p>打开项目启动设置</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206141937586.png" alt="image-20220206141937586"></p>
<p>添加环境变量</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206142031646.png" alt="image-20220206142031646"></p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206143558758.png" alt="image-20220206143558758"></p>
<p>点击确定后，你可能会发现没什么变化，清一下idea缓存重新打开，会发现使用环境变量参数依赖的jar包都已成功转化为相对路径</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206143701905.png" alt="image-20220206143701905"></p>
<p>但还有一个junit的jar包找不到，手动设置上就好</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206143940847.png" alt="image-20220206143940847"></p>
<p>启动bootstrap类的main方法，尴尬的发现控制台输出全部乱码</p>
<p>​    <img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206144149233.png" alt="image-20220206144149233"></p>
<h2 id="乱码原因分析"><a href="#乱码原因分析" class="headerlink" title="乱码原因分析"></a>乱码原因分析</h2><p><a href="./Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90">原因</a></p>
<a href="/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/" title="Ant构建tomcat源码环境乱码原因分析">Ant构建tomcat源码环境乱码原因分析</a>


<h2 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h2><p>创建一个UTF8Control子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.tomcat.util.res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.PropertyResourceBundle;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTF8Control</span> <span class="keyword">extends</span> <span class="title">ResourceBundle</span>.<span class="title">Control</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里重写父类的newBundle方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResourceBundle <span class="title">newBundle</span></span></span><br><span class="line"><span class="function">            <span class="params">(String baseName, Locale locale, String format, ClassLoader loader, <span class="keyword">boolean</span> reload)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IllegalAccessException, InstantiationException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// The below is a copy of the default implementation.</span></span><br><span class="line">        <span class="comment">//这里时默认的实现,c-v一下就好</span></span><br><span class="line">        String bundleName = toBundleName(baseName, locale);</span><br><span class="line">        String resourceName = toResourceName(bundleName, <span class="string">&quot;properties&quot;</span>);</span><br><span class="line">        ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line">        InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (reload) &#123;</span><br><span class="line">            URL url = loader.getResource(resourceName);</span><br><span class="line">            <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">                URLConnection connection = url.openConnection();</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">                    stream = connection.getInputStream();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stream = loader.getResourceAsStream(resourceName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Only this line is changed to make it to read properties files as UTF-8.</span></span><br><span class="line">                <span class="comment">//这里就是一个关键的地方,将原来的is使用UTF-8格式读取的InputStremReader包装起来</span></span><br><span class="line">                <span class="comment">//这里就会默认按照UTF-8格式读取!!!</span></span><br><span class="line">                bundle = <span class="keyword">new</span> PropertyResourceBundle(<span class="keyword">new</span> InputStreamReader(stream, StandardCharsets.UTF_8));</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bundle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，上面读取stream流后使用了StandardCharsets.UTF_8方式读取数据</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206172008318.png" alt="image-20220206172008318"></p>
<p>然后在StringManager中，指定control为常见的UTF8Control对象，就不会再使用那个默认的Control对象了</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206165620070.png" alt="image-20220206165620070"></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>重新启动BootStrap,发现控制台已经可以正常打印中文</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206163217154.png" alt="image-20220206163217154"></p>
<p>出现报错是因为example项目中classes包默认标记为test类型，idea读不到，把它标记为Sources类型</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206163539516.png" alt="image-20220206163539516"></p>
<p>启动看起来没问题，浏览器访问<a class="link" href="http://127.0.0.1:8080/%E6%8A%A5%E9%94%99">http://127.0.0.1:8080/报错<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206163726207.png" alt="image-20220206163726207"></p>
<p>我去，又是500又是乱码，心态崩了啊</p>
<p>修改Localizer中的static代码块，将control传刚才创建的UTF8Bundle，重新启动</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206163947013.png" alt="image-20220206163947013"></p>
<p>乱码解决了，还是无法访问，前往org.apache.catalina.startup.ContextConfig#configureStart</p>
<p>添加一行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化 jsp 解析引擎</span></span><br><span class="line">        context.addServletContainerInitializer(<span class="keyword">new</span> JasperInitializer(),<span class="keyword">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重启完美解决，放一张汤姆猫压压惊:smiley:</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/image-20220206165702691.png" alt="image-20220206165702691"></p>
]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>idea</tag>
        <tag>ant</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS与原子类</title>
    <url>/2022/01/05/CAS%E4%B8%8E%E5%8E%9F%E5%AD%90%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>compare and swap,体现的是乐观锁思想，比如多个线程要对一个共享的整形变量执行+1操作</p>
<p>获取共享变量时，为了保证该变量的可见性，需要使用volitile修饰，结合CAS和volitile可以实现无锁并发，适用于竞争不激烈，多核CPU(因为重试需要耗费CPU时间，老师说的CAS的前提是多个线程多核并行对某一共享变量进行操作)场景下</p>
<ul>
<li>没有使用synchronized，所以线程不会陷入阻塞(没有线程上下文切换的时间了)，这是效率提升的因素之一</li>
<li>如果竞争激烈，重试必然频繁发生，反而效率会受影响</li>
</ul>
<p>底层使用Unsafe类的compareAndSwapXXX</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndSetLong</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">long</span> newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> v;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            v = getLongVolatile(o, offset);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSwapLong(o, offset, v, newValue));</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h2><ul>
<li>CAS基于乐观锁的思想</li>
<li>synchronized是悲观锁</li>
</ul>
<h3 id="原子操作类"><a href="#原子操作类" class="headerlink" title="原子操作类"></a>原子操作类</h3><ul>
<li>AtomicInteger</li>
<li>AtomicBoolean</li>
<li>AtomicLong等</li>
</ul>
<h2 id="synchronized锁优化"><a href="#synchronized锁优化" class="headerlink" title="synchronized锁优化"></a>synchronized锁优化</h2><p>HotSpot虚拟机中，每个对象都有对象头(包含class指针和MarkWord(8个字节，存储对象hash码，分代年龄，一旦加锁，这些信息就根据情况被替换为标记位，线程锁记录指针，重量级锁指针，线程ID等内容)) </p>
<h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>如果一个对象有多个线程访问，但多线程访问的时间是错开的，那么可以使用轻量级锁来优化</p>
<p>每个线程的栈帧都会包含一个锁记录(栈结构)的结构，内部可以存储解锁对象加锁前的Mark Word</p>
<h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>轻量级锁通过锁膨胀升级为重量级锁</p>
<p>![截屏2022-01-03 下午10.37.29](./CAS与原子类/截屏2022-01-03 下午10.37.29.png)</p>
<h4 id="重量级锁优化"><a href="#重量级锁优化" class="headerlink" title="重量级锁优化"></a>重量级锁优化</h4><p>自旋</p>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li>尽量减少上锁时间</li>
<li>减小锁的粒度<ul>
<li>ConcurrentHashMap</li>
</ul>
</li>
<li>锁粗化</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Ant构建tomcat源码环境乱码原因分析</title>
    <url>/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><p>为什么会有乱码呢，根据网上资料，打印日志文件时，调用了StringManager类的getString方法，str就是getString方法返回的乱码值。</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/image-20220206150523421.png" alt="image-20220206150523421"></p>
<p>追ResoutceBundle的getString方法</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/image-20220206150949647-4140269.png" alt="image-20220206150949647"></p>
<p>可以看到，getString方法中调用了getObject,getObject中调用了handleGetObject，追handleGetObject发现它是一个抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets an object for the given key from this resource bundle.</span></span><br><span class="line"><span class="comment"> * Returns null if this resource bundle does not contain an</span></span><br><span class="line"><span class="comment"> * object for the given key.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key for the desired object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span> NullPointerException if &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the object for the given key, or null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">handleGetObject</span><span class="params">(String key)</span></span>;</span><br></pre></td></tr></table></figure>

<p>通过debug发现当打印日志时，传来的bundle是PropertyResourceBundle，PropertyResourceBundle是从lookup的Map中取值的,这个Map在初始化时候读取到的文件必须使用ISO-8859-1的编码，但tomcat国际化文件使用的是utf8编码，用iso-8859-1读肯定乱码。</p>
<p><img src="/2022/02/06/Ant%E6%9E%84%E5%BB%BAtomcat%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E4%B9%B1%E7%A0%81%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/image-20220206151441768-4140277.png" alt="ProprotyResourceBundle中的handleGetObject方法"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a property resource bundle from an &#123;<span class="doctag">@link</span> java.io.InputStream</span></span><br><span class="line"><span class="comment">     * InputStream&#125;.  The property file read with this constructor</span></span><br><span class="line"><span class="comment">     * must be encoded in ISO-8859-1.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stream an InputStream that represents a property file</span></span><br><span class="line"><span class="comment">     *        to read from.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if an I/O error occurs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &lt;code&gt;stream&lt;/code&gt; is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> stream&#125; contains a</span></span><br><span class="line"><span class="comment">     *     malformed Unicode escape sequence.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;rawtypes&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PropertyResourceBundle</span> <span class="params">(InputStream stream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(stream);</span><br><span class="line">        lookup = <span class="keyword">new</span> HashMap(properties);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>解决三种思路：</p>
<ul>
<li>修改tomcat国际化文件为utf-8编码</li>
<li>将使用ISO-8859-1读取的乱码字符串转化为字节数组再转为UTF-8字符串str = new String(str.getBytes(“ISO-8859-1”), “UTF-8”);<ul>
<li>这样会向堆中创建大量String对象，这么干肯定不行</li>
</ul>
</li>
<li>换一个ResourceBundle，这样调用其</li>
<li>java8之前的PropertyResourceBundle默认编码是ISO-8859-1,java9后默认为UTF-8，所以升级jdk版本是最方便的办法</li>
</ul>
<p>换tomcat国际化编码文件太多，换jdk版本也太简单，所以考虑换一个ResourceBundle,那这个ResourceBundle从哪里来的呢?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new StringManager for a given package. This is a</span></span><br><span class="line"><span class="comment">     * private method and all access to it is arbitrated by the</span></span><br><span class="line"><span class="comment">     * static getManager method call so that only one StringManager</span></span><br><span class="line"><span class="comment">     * per package will be created.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName Name of package to create StringManager for.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StringManager</span><span class="params">(String packageName, Locale locale)</span> </span>&#123;</span><br><span class="line">        String bundleName = packageName + <span class="string">&quot;.LocalStrings&quot;</span>;</span><br><span class="line">        ResourceBundle bnd = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// The ROOT Locale uses English. If English is requested, force the</span></span><br><span class="line">            <span class="comment">// use of the ROOT Locale else incorrect results may be obtained if</span></span><br><span class="line">            <span class="comment">// the system default locale is not English and translations are</span></span><br><span class="line">            <span class="comment">// available for the system default locale.</span></span><br><span class="line">            <span class="keyword">if</span> (locale.getLanguage().equals(Locale.ENGLISH.getLanguage())) &#123;</span><br><span class="line">                locale = Locale.ROOT;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">//使用ExtClassLoader获取到bnd对象</span></span><br><span class="line">            bnd = ResourceBundle.getBundle(bundleName, locale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MissingResourceException ex) &#123;</span><br><span class="line">            <span class="comment">// Try from the current loader (that&#x27;s the case for trusted apps)</span></span><br><span class="line">            <span class="comment">// Should only be required if using a TC5 style classloader structure</span></span><br><span class="line">            <span class="comment">// where common != shared != server</span></span><br><span class="line">            ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            <span class="keyword">if</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bnd = ResourceBundle.getBundle(bundleName, locale, cl);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MissingResourceException ex2) &#123;</span><br><span class="line">                    <span class="comment">// Ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bundle = bnd;</span><br><span class="line">        <span class="comment">// Get the actual locale, which may be different from the requested one</span></span><br><span class="line">        <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Locale bundleLocale = bundle.getLocale();</span><br><span class="line">            <span class="keyword">if</span> (bundleLocale.equals(Locale.ROOT)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.locale = Locale.ENGLISH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.locale = bundleLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.locale = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>21行bnd = ResourceBundle.getBundle(bundleName, locale);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle <span class="title">getBundle</span><span class="params">(String baseName,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                 Locale locale)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getBundleImpl(baseName, locale,</span><br><span class="line">                             getLoader(Reflection.getCallerClass()),</span><br><span class="line">                             getDefaultControl(baseName));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第7行返回一个默认的Control对象</p>
<p>第5行获取Bundle实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle <span class="title">getBundleImpl</span><span class="params">(String baseName, Locale locale,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                ClassLoader loader, Control control)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (locale == <span class="keyword">null</span> || control == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We create a CacheKey here for use by this call. The base</span></span><br><span class="line">        <span class="comment">// name and loader will never change during the bundle loading</span></span><br><span class="line">        <span class="comment">// process. We have to make sure that the locale is set before</span></span><br><span class="line">        <span class="comment">// using it as a cache key.</span></span><br><span class="line">        CacheKey cacheKey = <span class="keyword">new</span> CacheKey(baseName, locale, loader);</span><br><span class="line">        ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Quick lookup of the cache.</span></span><br><span class="line">        BundleReference bundleRef = cacheList.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (bundleRef != <span class="keyword">null</span>) &#123;</span><br><span class="line">            bundle = bundleRef.get();</span><br><span class="line">            bundleRef = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If this bundle and all of its parents are valid (not expired),</span></span><br><span class="line">        <span class="comment">// then return this bundle. If any of the bundles is expired, we</span></span><br><span class="line">        <span class="comment">// don&#x27;t call control.needsReload here but instead drop into the</span></span><br><span class="line">        <span class="comment">// complete loading process below.</span></span><br><span class="line">        <span class="keyword">if</span> (isValidBundle(bundle) &amp;&amp; hasValidParentChain(bundle)) &#123;</span><br><span class="line">            <span class="keyword">return</span> bundle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// No valid bundle was found in the cache, so we need to load the</span></span><br><span class="line">        <span class="comment">// resource bundle and its parents.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isKnownControl = (control == Control.INSTANCE) ||</span><br><span class="line">                                   (control <span class="keyword">instanceof</span> SingleFormatControl);</span><br><span class="line">        List&lt;String&gt; formats = control.getFormats(baseName);</span><br><span class="line">        <span class="keyword">if</span> (!isKnownControl &amp;&amp; !checkList(formats)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid Control: getFormats&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ResourceBundle baseBundle = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Locale targetLocale = locale;</span><br><span class="line">             targetLocale != <span class="keyword">null</span>;</span><br><span class="line">             targetLocale = control.getFallbackLocale(baseName, targetLocale)) &#123;</span><br><span class="line">            List&lt;Locale&gt; candidateLocales = control.getCandidateLocales(baseName, targetLocale);</span><br><span class="line">            <span class="keyword">if</span> (!isKnownControl &amp;&amp; !checkList(candidateLocales)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid Control: getCandidateLocales&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bundle = findBundle(cacheKey, candidateLocales, formats, <span class="number">0</span>, control, baseBundle);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If the loaded bundle is the base bundle and exactly for the</span></span><br><span class="line">            <span class="comment">// requested locale or the only candidate locale, then take the</span></span><br><span class="line">            <span class="comment">// bundle as the resulting one. If the loaded bundle is the base</span></span><br><span class="line">            <span class="comment">// bundle, it&#x27;s put on hold until we finish processing all</span></span><br><span class="line">            <span class="comment">// fallback locales.</span></span><br><span class="line">            <span class="keyword">if</span> (isValidBundle(bundle)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isBaseBundle = Locale.ROOT.equals(bundle.locale);</span><br><span class="line">                <span class="keyword">if</span> (!isBaseBundle || bundle.locale.equals(locale)</span><br><span class="line">                    || (candidateLocales.size() == <span class="number">1</span></span><br><span class="line">                        &amp;&amp; bundle.locale.equals(candidateLocales.get(<span class="number">0</span>)))) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If the base bundle has been loaded, keep the reference in</span></span><br><span class="line">                <span class="comment">// baseBundle so that we can avoid any redundant loading in case</span></span><br><span class="line">                <span class="comment">// the control specify not to cache bundles.</span></span><br><span class="line">                <span class="keyword">if</span> (isBaseBundle &amp;&amp; baseBundle == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    baseBundle = bundle;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bundle == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (baseBundle == <span class="keyword">null</span>) &#123;</span><br><span class="line">                throwMissingResourceException(baseName, locale, cacheKey.getCause());</span><br><span class="line">            &#125;</span><br><span class="line">            bundle = baseBundle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        keepAlive(loader);</span><br><span class="line">        <span class="keyword">return</span> bundle;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第48行findBundle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle <span class="title">findBundle</span><span class="params">(CacheKey cacheKey,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             List&lt;Locale&gt; candidateLocales,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             List&lt;String&gt; formats,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="keyword">int</span> index,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             Control control,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             ResourceBundle baseBundle)</span> </span>&#123;</span><br><span class="line">        Locale targetLocale = candidateLocales.get(index);</span><br><span class="line">        ResourceBundle parent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (index != candidateLocales.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            parent = findBundle(cacheKey, candidateLocales, formats, index + <span class="number">1</span>,</span><br><span class="line">                                control, baseBundle);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (baseBundle != <span class="keyword">null</span> &amp;&amp; Locale.ROOT.equals(targetLocale)) &#123;</span><br><span class="line">            <span class="keyword">return</span> baseBundle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Before we do the real loading work, see whether we need to</span></span><br><span class="line">        <span class="comment">// do some housekeeping: If references to class loaders or</span></span><br><span class="line">        <span class="comment">// resource bundles have been nulled out, remove all related</span></span><br><span class="line">        <span class="comment">// information from the cache.</span></span><br><span class="line">        Object ref;</span><br><span class="line">        <span class="keyword">while</span> ((ref = referenceQueue.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cacheList.remove(((CacheKeyReference)ref).getCacheKey());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// flag indicating the resource bundle has expired in the cache</span></span><br><span class="line">        <span class="keyword">boolean</span> expiredBundle = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First, look up the cache to see if it&#x27;s in the cache, without</span></span><br><span class="line">        <span class="comment">// attempting to load bundle.</span></span><br><span class="line">        cacheKey.setLocale(targetLocale);</span><br><span class="line">        ResourceBundle bundle = findBundleInCache(cacheKey, control);</span><br><span class="line">        <span class="keyword">if</span> (isValidBundle(bundle)) &#123;</span><br><span class="line">            expiredBundle = bundle.expired;</span><br><span class="line">            <span class="keyword">if</span> (!expiredBundle) &#123;</span><br><span class="line">                <span class="comment">// If its parent is the one asked for by the candidate</span></span><br><span class="line">                <span class="comment">// locales (the runtime lookup path), we can take the cached</span></span><br><span class="line">                <span class="comment">// one. (If it&#x27;s not identical, then we&#x27;d have to check the</span></span><br><span class="line">                <span class="comment">// parent&#x27;s parents to be consistent with what&#x27;s been</span></span><br><span class="line">                <span class="comment">// requested.)</span></span><br><span class="line">                <span class="keyword">if</span> (bundle.parent == parent) &#123;</span><br><span class="line">                    <span class="keyword">return</span> bundle;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Otherwise, remove the cached one since we can&#x27;t keep</span></span><br><span class="line">                <span class="comment">// the same bundles having different parents.</span></span><br><span class="line">                BundleReference bundleRef = cacheList.get(cacheKey);</span><br><span class="line">                <span class="keyword">if</span> (bundleRef != <span class="keyword">null</span> &amp;&amp; bundleRef.get() == bundle) &#123;</span><br><span class="line">                    cacheList.remove(cacheKey, bundleRef);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bundle != NONEXISTENT_BUNDLE) &#123;</span><br><span class="line">            CacheKey constKey = (CacheKey) cacheKey.clone();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bundle = loadBundle(cacheKey, formats, control, expiredBundle);</span><br><span class="line">                <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (bundle.parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        bundle.setParent(parent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    bundle.locale = targetLocale;</span><br><span class="line">                    bundle = putBundleInCache(cacheKey, bundle, control);</span><br><span class="line">                    <span class="keyword">return</span> bundle;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Put NONEXISTENT_BUNDLE in the cache as a mark that there&#x27;s no bundle</span></span><br><span class="line">                <span class="comment">// instance for the locale.</span></span><br><span class="line">                putBundleInCache(cacheKey, NONEXISTENT_BUNDLE, control);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (constKey.getCause() <span class="keyword">instanceof</span> InterruptedException) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第56行loadBundle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle <span class="title">loadBundle</span><span class="params">(CacheKey cacheKey,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             List&lt;String&gt; formats,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             Control control,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="keyword">boolean</span> reload)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Here we actually load the bundle in the order of formats</span></span><br><span class="line">        <span class="comment">// specified by the getFormats() value.</span></span><br><span class="line">        Locale targetLocale = cacheKey.getLocale();</span><br><span class="line"></span><br><span class="line">        ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> size = formats.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            String format = formats.get(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bundle = control.newBundle(cacheKey.getName(), targetLocale, format,</span><br><span class="line">                                           cacheKey.getLoader(), reload);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LinkageError error) &#123;</span><br><span class="line">                <span class="comment">// We need to handle the LinkageError case due to</span></span><br><span class="line">                <span class="comment">// inconsistent case-sensitivity in ClassLoader.</span></span><br><span class="line">                <span class="comment">// See 6572242 for details.</span></span><br><span class="line">                cacheKey.setCause(error);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception cause) &#123;</span><br><span class="line">                cacheKey.setCause(cause);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Set the format in the cache key so that it can be</span></span><br><span class="line">                <span class="comment">// used when calling needsReload later.</span></span><br><span class="line">                cacheKey.setFormat(format);</span><br><span class="line">                bundle.name = cacheKey.getName();</span><br><span class="line">                bundle.locale = targetLocale;</span><br><span class="line">                <span class="comment">// Bundle provider might reuse instances. So we should make</span></span><br><span class="line">                <span class="comment">// sure to clear the expired flag here.</span></span><br><span class="line">                bundle.expired = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bundle;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第15行newBundle</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResourceBundle <span class="title">newBundle</span><span class="params">(String baseName, Locale locale, String format,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        ClassLoader loader, <span class="keyword">boolean</span> reload)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> IllegalAccessException, InstantiationException, IOException </span>&#123;</span><br><span class="line">            String bundleName = toBundleName(baseName, locale);</span><br><span class="line">            ResourceBundle bundle = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (format.equals(<span class="string">&quot;java.class&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Class&lt;? extends ResourceBundle&gt; bundleClass</span><br><span class="line">                        = (Class&lt;? extends ResourceBundle&gt;)loader.loadClass(bundleName);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// If the class isn&#x27;t a ResourceBundle subclass, throw a</span></span><br><span class="line">                    <span class="comment">// ClassCastException.</span></span><br><span class="line">                    <span class="keyword">if</span> (ResourceBundle.class.isAssignableFrom(bundleClass)) &#123;</span><br><span class="line">                        bundle = bundleClass.newInstance();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(bundleClass.getName()</span><br><span class="line">                                     + <span class="string">&quot; cannot be cast to ResourceBundle&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (format.equals(<span class="string">&quot;java.properties&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String resourceName = toResourceName0(bundleName, <span class="string">&quot;properties&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (resourceName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> bundle;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> ClassLoader classLoader = loader;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> reloadFlag = reload;</span><br><span class="line">                InputStream stream = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stream = AccessController.doPrivileged(</span><br><span class="line">                        <span class="keyword">new</span> PrivilegedExceptionAction&lt;InputStream&gt;() &#123;</span><br><span class="line">                            <span class="function"><span class="keyword">public</span> InputStream <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                                InputStream is = <span class="keyword">null</span>;</span><br><span class="line">                                <span class="keyword">if</span> (reloadFlag) &#123;</span><br><span class="line">                                    URL url = classLoader.getResource(resourceName);</span><br><span class="line">                                    <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                        URLConnection connection = url.openConnection();</span><br><span class="line">                                        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                            <span class="comment">// Disable caches to get fresh data for</span></span><br><span class="line">                                            <span class="comment">// reloading.</span></span><br><span class="line">                                            connection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">                                            is = connection.getInputStream();</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    is = classLoader.getResourceAsStream(resourceName);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">return</span> is;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (PrivilegedActionException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (IOException) e.getException();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bundle = <span class="keyword">new</span> PropertyResourceBundle(stream);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        stream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;unknown format: &quot;</span> + format);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> bundle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>31行读取STREAM流，55行发现stream流不为空，所以创建了一个PropertyResourceBundle。</p>
<p>难道真的没有办法了?</p>
<p>等等，我们是通过control的newBundle获取Bundle对象的，但是tomcat没有指定control对象，导致系统查找默认的Control对象，如果我们写一个Control对象，重写newBundle方法,返回一个使用UTF-8编码读取文件的bundle对象。</p>
<a href="/2022/02/06/Ant%E6%9E%84%E5%BB%BATomcat%E6%BA%90%E7%A0%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/" title="Ant构建Tomcat源码开发环境，解决乱码">Ant构建Tomcat源码开发环境，解决乱码</a>#解决乱码

]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>i18n</tag>
        <tag>Singleton</tag>
        <tag>类加载</tag>
      </tags>
  </entry>
  <entry>
    <title>JMM内存模型</title>
    <url>/2022/01/05/JMM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="JMM内存模型"><a href="#JMM内存模型" class="headerlink" title="JMM内存模型"></a>JMM内存模型</h1><p>java内存模型</p>
<p><a class="link" href="https://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf">Java Memory Model(JMM)<i class="fas fa-external-link-alt"></i></a></p>
<p>JMM定义了一套在多线程读写共享数据时(成员变量，数组)时，对数据的可见性，有序性和原子性的规则和保障</p>
<h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>现象：</p>
<p>两个线程对同一个静态变量分别做5000次自增和自减，结果不一定是0，是因为java对静态变量的自增自减不是原子操作</p>
<p>![截屏2022-01-03 下午5.27.05](./JMM内存模型/截屏2022-01-03 下午5.27.05.png)</p>
<p>解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">	<span class="comment">//要作为原子操作代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>![截屏2022-01-03 下午5.41.55](./JMM内存模型/截屏2022-01-03 下午5.41.55.png)</p>
<p>方便的话加锁范围，因为频繁moniterenter和moniterexit相对耗时</p>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>JIT编译器会将频繁执行的代码放入高速缓存，如果线程中检测的对象被缓存到该线程的内存中，主存对检测对象的修改不会被上面线程检测到</p>
<p>解决方法:</p>
<p>volitile</p>
<p>可修饰成员变量，避免线程从自己的工作缓存中查找变量的值</p>
<p>它保证的是多个线程之间，一个线程对volitile变量的修改对另一个线程可见，不能保证原子性，仅用在一个写线程，多个读线程的情况</p>
<p>注意:</p>
<p>synchronized语句块可保证代码块的原子性和可见性，但缺点是重量级锁，性能相对更低</p>
<p>System.out.println在内部加了锁</p>
<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>jit编译器对于在单线程操作，不影响操作结果的情况下进行指令重排</p>
<p>双重校验锁单例不使用volitile可能会返回没有实例化完成的对象</p>
<p>使用volitile禁止指令重排，有方向</p>
]]></content>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2022/01/04/JVM-1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JVM内存结构</title>
    <url>/2022/01/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="/2022/01/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20220104232039407.png" alt="image-20220104232039407"></p>
<h3 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h3><p>每个线程独有，永远不会发生内存溢出，对应CPU中的高速缓存器,用于记录线程下一条执行语句的行数，当时间片轮转回该线程时，从原有位置继续执行</p>
<h3 id="2-栈内存"><a href="#2-栈内存" class="headerlink" title="2.栈内存"></a>2.栈内存</h3><p>每个线程数独有</p>
<h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><ul>
<li>每个线程运行时所需要的内存，成为虚拟机栈</li>
<li>每个栈有多个栈帧组成，对应着每 次方法调用时所占用的内存</li>
<li>每个线程只能有一个活动栈帧，对应着当前正在执行的方法</li>
</ul>
<p>垃圾回收不涉及栈内存</p>
<p>方法内的局部变量是否线程安全</p>
<ul>
<li>如果方法内局部变量没有逃离方法的作用范围，它是线程安全的</li>
<li>如果局部变量引用了对象，并逃离了方法的作用范围，需要考虑线程安全</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法可能发生指令重排序，sb还没有发生append时被其他线程引用到，导致变量不安全(看弹幕里一个人说的，好像蛮有道理)</span></span><br><span class="line"><span class="comment">     * //todo学习逃逸分析</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">m3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="number">2</span>);</span><br><span class="line">        sb.append(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>栈内存设置越大，最大线程数随之越少，设置大了只会增大方法调用次数</p>
<h5 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h5><p>java.lang.StackOverflowError</p>
<ol>
<li>栈帧过多可能导致栈内存溢出(递归调用)<ol>
<li>自己写的递归方法未写好破坏方法</li>
<li>使用第三方框架(比如部门中有员工，员工中有部门，使用JSONObject映射部门和员工数据)</li>
</ol>
</li>
<li>栈帧过大可能导致栈内存溢出(不太可能出现)</li>
</ol>
<h3 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h3><p>给本地方法运行提供内存空间</p>
<p>native方法</p>
<ul>
<li>Object<ul>
<li>clone</li>
<li>hashCode</li>
<li>notify</li>
<li>notifyAll</li>
<li>wait</li>
</ul>
</li>
</ul>
<h3 id="4-堆Heap"><a href="#4-堆Heap" class="headerlink" title="4.堆Heap"></a>4.堆Heap</h3><p>通过new关键字创建的对象都会使用对内存</p>
<p>特点:</p>
<ul>
<li>线程共享的，堆中对象都需要考虑线程安全的问题</li>
<li>有垃圾回收机制</li>
</ul>
<h4 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h4><p>java.lang.OutOfMemoryError:Java heap space </p>
<h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><h5 id="eden区"><a href="#eden区" class="headerlink" title="eden区"></a>eden区</h5><h5 id="survior"><a href="#survior" class="headerlink" title="survior"></a>survior</h5><h6 id="From-Space"><a href="#From-Space" class="headerlink" title="From Space"></a>From Space</h6><h6 id="To-Space"><a href="#To-Space" class="headerlink" title="To Space"></a>To Space</h6><h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h4><h3 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h3><p>概念上属于堆，但是具体实现上不同JVM厂商实现方式不同，可能不在堆内存</p>
<p><img src="/2022/01/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/2.png" alt="HotSpot虚拟机JVM内存结构"></p>
<h4 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h4><p>jdk1.6以前使用堆的一部分</p>
<h4 id="元空间"><a href="#元空间" class="headerlink" title="元空间"></a>元空间</h4><p>jdk1.8以后使用的是操作系统内存</p>
<h4 id="方法区内存溢出"><a href="#方法区内存溢出" class="headerlink" title="方法区内存溢出"></a>方法区内存溢出</h4><p>元空间内存溢出java.lang.OutOfMemoryError:Metaspace</p>
<p>永久代内存溢出java.lang.OutOfMemoryError:PermGen space</p>
<p>实际开发方法区内存溢出场景</p>
<ul>
<li>spring</li>
<li>mybatis</li>
</ul>
<p>使用cglib动态生成加载类可能导致方法区内存溢出</p>
<h5 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p>常量池</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">就是一张表，虚拟机指令根据这张常量表找到要执行的类名，方法名，参数类型，字面量等信息</span><br></pre></td></tr></table></figure>

<p>运行时常量池</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常量池是在*.class文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</span><br></pre></td></tr></table></figure>

<h6 id="StringTable串池"><a href="#StringTable串池" class="headerlink" title="StringTable串池[]"></a>StringTable串池[]</h6><ul>
<li>常量池中的字符串仅是符号，第一次用到时才变为对象</li>
<li>利用串池的机制，来避免重复创建字符串对象</li>
<li>字符串变量拼接的原理是StringBuilder(1.8)</li>
<li>字符串常量拼接的原理是编译期优化</li>
<li>可以使用intern方法，主动将串池中还没有的字符串对象放入串池<ul>
<li>1.8将这个字符串对象尝试放入串池，如果有则不会放入，如果没有则放入串池，会把串池中的对象返回</li>
<li>1.6将这个字符串对象尝试放入串池，如果有则不会放入，如果没有会把此对象复制一份放入串池，会把串池中的对象返回</li>
</ul>
</li>
</ul>
<p>常量池中的信息，都会被加载到运行时常量池中，这时a b ab都是常量池中的符号，还没有变为java字符串对象，当执行命令使用到该符号时，才从常量池中拿出来转变为java字符串对象并放入串池中</p>
<p>HashTable结构，不能扩容</p>
<p>java编译器在遇到常量字符串拼接时，会将拼接后的结果也定义为常量并放到字符串常量池中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">String s3 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">String s4 = s1+s2;<span class="comment">//相当于StringBuilder.append...toString方法，StringBuilder的toString方法实现为new String</span></span><br><span class="line">String s5 = <span class="string">&quot;a&quot;</span>+<span class="string">&quot;b&quot;</span>;<span class="comment">//java编译器在编译时优化，已确定s5为&quot;ab&quot;，运行时直接找&quot;ab&quot;这个常量</span></span><br><span class="line">String s6 = s4.intern();</span><br><span class="line">s3 == s4; <span class="comment">// false</span></span><br><span class="line">s3 == s5;	<span class="comment">//true</span></span><br><span class="line">s3 == s6;	<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String x2 = <span class="keyword">new</span> String(<span class="string">&quot;c&quot;</span>)+<span class="keyword">new</span> String(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">String x1 = <span class="string">&quot;cd&quot;</span>;</span><br><span class="line">x2.intern()</span><br><span class="line">x1 == x2; <span class="comment">//jdk1.8false,jdk1.6false</span></span><br><span class="line"></span><br><span class="line">String x2 = <span class="keyword">new</span> String(<span class="string">&quot;c&quot;</span>)+<span class="keyword">new</span> String(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">x2.intern();</span><br><span class="line">String x1 = <span class="string">&quot;cd&quot;</span>;</span><br><span class="line"></span><br><span class="line">x1 == x2; <span class="comment">//jdk1.8true,jdk1.6false</span></span><br></pre></td></tr></table></figure>

<p>StringTable位置</p>
<ul>
<li>1.6时，stringtable是常量池一部分，位于方法区(永久代)（永久代回收效率低，需要full gc时才会触发垃圾回收）</li>
<li>1.7开始，StringTable转移到堆中（miner gc就会触发回收）</li>
</ul>
<p>StringTable属于堆中新生代位置，可以进行垃圾回收</p>
<h6 id="StringTable性能调优"><a href="#StringTable性能调优" class="headerlink" title="StringTable性能调优"></a>StringTable性能调优</h6><ul>
<li>如果字符串常量较多，调大字符串常量池桶初始大小，减少hash冲突<ul>
<li>-XX:StringTableSize=200000</li>
</ul>
</li>
<li>考虑将字符串对象是否入池<ul>
<li>推特存储用户地址将地址入池后内存占用减少</li>
</ul>
</li>
</ul>
<h2 id="6-直接内存"><a href="#6-直接内存" class="headerlink" title="6.直接内存"></a>6.直接内存</h2><p>操作系统内存Direct Memory</p>
<ul>
<li>常见于NIO操作，用于数据缓冲区</li>
<li>分配回收成本较高，但读写性能高</li>
<li>不受JVM内存回收管理</li>
</ul>
<p>使用直接内存比使用普通内存少了一次系统缓存与jvm缓存交换数据的操作，java代码可以直接操作系统内存中的数据</p>
<p>可能出现直接内存溢出错误</p>
<p>java.lang.OutOfMemoryError: Direct buffer memory</p>
<p>直接对象的分配和释放通过Unsafe对象进行，必须通过反射才能拿到，垃圾回收只能释放java内存，回收时必须主动调用unsafe对象的freeMemory方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Unsafe unsafe = getUnsafe();</span><br><span class="line"><span class="keyword">long</span> base = unsafe.allocateMemory(_1Gb);</span><br><span class="line"><span class="comment">//base 内存首地址 _1Gb偏移量 0(将内存中地址范围内所有字节都设置为0)</span></span><br><span class="line">unsafe.setMemory(base,_1Gb,(<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">unsafe.freeMemory(base);</span><br><span class="line">System.in.read();</span><br></pre></td></tr></table></figure>

<p>DirectByteBuffer在构造函数中分配了一个Cleaner对象(虚引用类型)，当与之关联的对象被垃圾回收时，向队列中添加一个会触发虚引用对象Cleaner中的clean方法(不是在主线程执行，而是在referenceHandler守护线程执行)，clean方法执行传入的释放内存任务对象的run方法去释放内存<a href="/Users/chaoqiang/Documents/ByteBuffer%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E9%87%8A%E6%94%BE%E6%BA%90%E7%A0%81.md">参见ByteBuffer源码</a></p>
<p>System.gc()是fullgc</p>
<h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><h4 id="JIT编译器"><a href="#JIT编译器" class="headerlink" title="JIT编译器"></a>JIT编译器</h4>]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2021/12/28/JVM/</url>
    <content><![CDATA[<p>本文档根据黑马JVM教程书写，在此感谢黑马和满一航老师的知识分享</p>
<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-typdsurQDugoYAgw" src="https://player.bilibili.com/player.html?bvid=BV1yE411Z7AP&page=1&high_quality=1&danmaku=false" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-typdsurQDugoYAgw").style.height=document.getElementById("mmedia-typdsurQDugoYAgw").scrollWidth*0.76+"px";
    window.onresize = function(){
      document.getElementById("mmedia-typdsurQDugoYAgw").style.height=document.getElementById("mmedia-typdsurQDugoYAgw").scrollWidth*0.76+"px";
    }; </script>


<ul>
<li><a href="/2022/01/04/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/" title="JVM内存结构">JVM内存结构</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JIT运行时优化</title>
    <url>/2022/01/05/JIT%E8%BF%90%E8%A1%8C%E6%97%B6%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="即时编译"><a href="#即时编译" class="headerlink" title="即时编译"></a>即时编译</h2><p>JVM将执行状态分成了5个层次</p>
<ul>
<li>0层:解释执行</li>
<li>1层:使用C1即时编译执行(不带profiling)</li>
<li>2层:使用C1即时编译执行(带基本的profiling)</li>
<li>3层:使用C1即时编译执行(带完全的profiling)</li>
<li>4层:使用C2即时编译器编译执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">profiling是指运行过程中收集一些程序执行状态的数据，例如【方法调用次数】，【循环的回编次数】</span><br></pre></td></tr></table></figure>

<p>即时编译器(JIT)与解释器的区别</p>
<ul>
<li>解释器是将字节码解释为机器码6，下次即时遇到相同的字节码，仍会执行重复的解释</li>
<li>JIT是将一些字节码编译为机器码，并存入Code Cache，下次遇到相同的代码，直接执行，无需再编译</li>
<li>解释器是将字节码解释为所有平台都通用的机器码</li>
<li>JIT会根据平台类型，生成平台特定的机器码</li>
</ul>
<p>HotSpot虚拟机发现热点代码并加以优化</p>
<h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C2编译器发现对象仅创建后没有引用，它干脆就不创建对象了</span><br></pre></td></tr></table></figure>

<h3 id="方法内连"><a href="#方法内连" class="headerlink" title="方法内连"></a>方法内连</h3><p>如果发现square是热点方法并且长度不长时，会进行内联:将方法内代码拷贝，粘贴到调用者位置</p>
<h4 id="常量折叠"><a href="#常量折叠" class="headerlink" title="常量折叠"></a>常量折叠</h4><p>如果发现方法内连每次调用的参数不变，干脆将结果直接作为一个常量返回</p>
<h4 id="字段优化"><a href="#字段优化" class="headerlink" title="字段优化"></a>字段优化</h4><p>方法内连会影响成员变量的读取结果，干脆直接将成员变量复制一份到局部变量中</p>
<h3 id="方法反射调用优化"><a href="#方法反射调用优化" class="headerlink" title="方法反射调用优化"></a>方法反射调用优化</h3><p>如果反射调用同一方法超过阈值15，不再通过native调用方法，JIT编译器会生成一个方法访问器类，由反射方法调用改为正常方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment"> * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This code is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="comment"> * under the terms of the GNU General Public License version 2 only, as</span></span><br><span class="line"><span class="comment"> * published by the Free Software Foundation.  Oracle designates this</span></span><br><span class="line"><span class="comment"> * particular file as subject to the &quot;Classpath&quot; exception as provided</span></span><br><span class="line"><span class="comment"> * by Oracle in the LICENSE file that accompanied this code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This code is distributed in the hope that it will be useful, but WITHOUT</span></span><br><span class="line"><span class="comment"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</span></span><br><span class="line"><span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</span></span><br><span class="line"><span class="comment"> * version 2 for more details (a copy is included in the LICENSE file that</span></span><br><span class="line"><span class="comment"> * accompanied this code).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * You should have received a copy of the GNU General Public License version</span></span><br><span class="line"><span class="comment"> * 2 along with this work; if not, write to the Free Software Foundation,</span></span><br><span class="line"><span class="comment"> * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA</span></span><br><span class="line"><span class="comment"> * or visit www.oracle.com if you need additional information or have any</span></span><br><span class="line"><span class="comment"> * questions.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> sun.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.misc.ReflectUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Used only for the first few invocations of a Method; afterward,</span></span><br><span class="line"><span class="comment">    switches to bytecode-based implementation */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeMethodAccessorImpl</span> <span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> DelegatingMethodAccessorImpl parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numInvocations;</span><br><span class="line"></span><br><span class="line">    NativeMethodAccessorImpl(Method method) &#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// We can&#x27;t inflate methods belonging to vm-anonymous classes because</span></span><br><span class="line">        <span class="comment">// that kind of class can&#x27;t be referred to by name, hence can&#x27;t be</span></span><br><span class="line">        <span class="comment">// found from the generated bytecode.</span></span><br><span class="line">        <span class="keyword">if</span> (++numInvocations &gt; ReflectionFactory.inflationThreshold()</span><br><span class="line">                &amp;&amp; !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) &#123;</span><br><span class="line">            MethodAccessorImpl acc = (MethodAccessorImpl)</span><br><span class="line">                <span class="keyword">new</span> MethodAccessorGenerator().</span><br><span class="line">                    generateMethod(method.getDeclaringClass(),</span><br><span class="line">                                   method.getName(),</span><br><span class="line">                                   method.getParameterTypes(),</span><br><span class="line">                                   method.getReturnType(),</span><br><span class="line">                                   method.getExceptionTypes(),</span><br><span class="line">                                   method.getModifiers());</span><br><span class="line">            parent.setDelegate(acc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invoke0(method, obj, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(DelegatingMethodAccessorImpl parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">invoke0</span><span class="params">(Method m, Object obj, Object[] args)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>TODO</title>
    <url>/2022/01/04/TODO/</url>
    <content><![CDATA[<ul>
<li>SLF4J</li>
<li>FunctionalInterface</li>
<li>逃逸分析</li>
<li>MAT</li>
<li>jmap</li>
<li>JMH</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/28/Linux%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<h1 id="java命令实操"><a href="#java命令实操" class="headerlink" title="java命令实操"></a>java命令实操</h1><p>案例1:CPU占用过高</p>
<p>定位</p>
<ul>
<li>top实时检测进程对CPU和内存资源的消耗，检测哪个进程对资源占用高</li>
<li>ps H -eo pid,tid,%cpu | grep 进程id  查看指定进程中所有线程，线程(10进制)，占用内存</li>
<li>jstack 进程id <ul>
<li>根据进程id查看进程中所有线程，定位nid(16进制)(tid指Java Thread Id，nid指的是native线程的id)</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br><span class="line">ps H -eo pid,tid,%cpu | grep 进程id </span><br><span class="line">jstack 进程id</span><br></pre></td></tr></table></figure>



<p>演示代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">null</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">null</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100000000L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">null</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100000000L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;thread3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>案例2：线程运行很长时间没有结果</p>
<p>jstack 进程id</p>
<p>![](/Users/chaoqiang/Pictures/snapshots/截屏2021-12-28 下午11.30.05.png)</p>
<p>死锁代码</p>
<p>![死锁](/Users/chaoqiang/Pictures/snapshots/截屏2021-12-28 下午11.32.47.png)</p>
<p>案例3:堆内存诊断(垃圾回收后，内存占用仍然较高)</p>
<ol>
<li><p>jps:查看当前系统中有哪些java内存</p>
</li>
<li><p>jmap -heap java进程id:查看堆内存占用情况</p>
</li>
<li><p>jconsole:图形界面，多功能的检测工具，可以连续监测</p>
</li>
<li><p>jvisualvm:java可视化虚拟机</p>
</li>
</ol>
<p>编译字节码信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple singleton % javac -<span class="built_in">help</span>                             </span><br><span class="line">用法: javac &lt;options&gt; &lt;<span class="built_in">source</span> files&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -g                         生成所有调试信息</span><br><span class="line">  -g:none                    不生成任何调试信息</span><br><span class="line">  -g:&#123;lines,vars,<span class="built_in">source</span>&#125;     只生成某些调试信息</span><br><span class="line">  -nowarn                    不生成任何警告</span><br><span class="line">  -verbose                   输出有关编译器正在执行的操作的消息</span><br><span class="line">  -deprecation               输出使用已过时的 API 的源位置</span><br><span class="line">  -classpath &lt;路径&gt;            指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -cp &lt;路径&gt;                   指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -sourcepath &lt;路径&gt;           指定查找输入源文件的位置</span><br><span class="line">  -bootclasspath &lt;路径&gt;        覆盖引导类文件的位置</span><br><span class="line">  -extdirs &lt;目录&gt;              覆盖所安装扩展的位置</span><br><span class="line">  -endorseddirs &lt;目录&gt;         覆盖签名的标准路径的位置</span><br><span class="line">  -proc:&#123;none,only&#125;          控制是否执行注释处理和/或编译。</span><br><span class="line">  -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程</span><br><span class="line">  -processorpath &lt;路径&gt;        指定查找注释处理程序的位置</span><br><span class="line">  -parameters                生成元数据以用于方法参数的反射</span><br><span class="line">  -d &lt;目录&gt;                    指定放置生成的类文件的位置</span><br><span class="line">  -s &lt;目录&gt;                    指定放置生成的源文件的位置</span><br><span class="line">  -h &lt;目录&gt;                    指定放置生成的本机标头文件的位置</span><br><span class="line">  -implicit:&#123;none,class&#125;     指定是否为隐式引用文件生成类文件</span><br><span class="line">  -encoding &lt;编码&gt;             指定源文件使用的字符编码</span><br><span class="line">  -<span class="built_in">source</span> &lt;发行版&gt;              提供与指定发行版的源兼容性</span><br><span class="line">  -target &lt;发行版&gt;              生成特定 VM 版本的类文件</span><br><span class="line">  -profile &lt;配置文件&gt;            请确保使用的 API 在指定的配置文件中可用</span><br><span class="line">  -version                   版本信息</span><br><span class="line">  -<span class="built_in">help</span>                      输出标准选项的提要</span><br><span class="line">  -A关键字[=值]                  传递给注释处理程序的选项</span><br><span class="line">  -X                         输出非标准选项的提要</span><br><span class="line">  -J&lt;标记&gt;                     直接将 &lt;标记&gt; 传递给运行时系统</span><br><span class="line">  -Werror                    出现警告时终止编译</span><br><span class="line">  @&lt;文件名&gt;                     从文件读取选项和文件名</span><br><span class="line"></span><br><span class="line">chaoqiang@Pineapple singleton % javac -parameters -g:vars -d . Main.java</span><br></pre></td></tr></table></figure>



<p>查看编译后的字节码信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javap -v HelloWorld.class</span><br></pre></td></tr></table></figure>

<p>使用jconsole远程连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote - Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 - Dcom.sun.management.jmxremote.authenticate=是否认证 java类</span><br></pre></td></tr></table></figure>





<p>查看进程线程方法</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>Windows</th>
<th>Linux</th>
<th>java</th>
</tr>
</thead>
<tbody><tr>
<td>获取进程的方式</td>
<td>tasklist | findstr java</td>
<td>ps -ef | grep java</td>
<td>jps(查看所有java进程)</td>
</tr>
<tr>
<td>停止进程</td>
<td>taskkill /F /PID 28060</td>
<td>kill pid</td>
<td></td>
</tr>
<tr>
<td>动态查看进程信息</td>
<td></td>
<td>top</td>
<td></td>
</tr>
<tr>
<td>查看进程中的线程信息</td>
<td></td>
<td>top -H -p pid</td>
<td></td>
</tr>
<tr>
<td>抓取java即时线程详细信息</td>
<td></td>
<td></td>
<td>jstack pid</td>
</tr>
<tr>
<td>远程监控</td>
<td></td>
<td></td>
<td>jconsole</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/28/VmOptions/</url>
    <content><![CDATA[<h1 id="VM-Options"><a href="#VM-Options" class="headerlink" title="VM Options"></a>VM Options</h1><table>
<thead>
<tr>
<th>参数</th>
<th>用途</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>-Xss</td>
<td>指定栈内存大小</td>
<td>-Xss256k</td>
</tr>
<tr>
<td>-XX:MaxMetaspaceSize</td>
<td>指定元空间内存大小</td>
<td>-XX:MaxMetaspaceSize=8m</td>
</tr>
<tr>
<td>-XX:MaxPermSize</td>
<td>指定永久代内存</td>
<td>-XX:MaxPermSize=8m</td>
</tr>
<tr>
<td>–XX:-UseGCOverheadLimit</td>
<td>不使用垃圾回收开销限制</td>
<td>-号设置为不开启，+号设置为开启java.lang.OutOfMemoryError: GC overhead limit exceed 如果超过98%的时间花费在垃圾回收但只有小于2%的堆空间被回收，会触发上述错误,避免程序假死</td>
</tr>
<tr>
<td>-XX:+PrintStringTableStatistics</td>
<td>打印字符串常量池统计信息</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>-XX:StringTableSize</td>
<td>设置字符串常量池初始桶大小</td>
<td>-XX:StringTableSize=200000</td>
</tr>
<tr>
<td>-XX:+DisableExplicitGC</td>
<td>禁用显式垃圾回收</td>
<td>由于System.gc()是full gc，为避免程序员在代码中不慎操作full gc，可添加此配置禁用显式垃圾回收，但是添加该配置后，可能ByteBuffer不能及时得到释放导致占用物理内存空间，可以用UnSafe对象的freeMemory(xxx)手动释放内存</td>
</tr>
<tr>
<td>-XX:UseCompressedOops -XX:-UseCompressedClassPointers</td>
<td>禁用指针压缩</td>
<td></td>
</tr>
<tr>
<td>-Xbootclasspath/a:.</td>
<td>设置启动类加载器加载路径</td>
<td>java -Xbootclasspath: <code>&lt;new bootclasspath&gt;</code> 完全替换<br>/a:.表示将当前目录追加至bootclasspath之后<br>/p:.表示将当前目录追加至bootclasspath之前-用这个方法替换核心类</td>
</tr>
<tr>
<td>-XX:-DoEscapeAnalysis</td>
<td>关闭逃逸分析</td>
<td></td>
</tr>
<tr>
<td>-XX+UnlockDiagnosticVMOptions -XX:+PrintInlining</td>
<td>打印方法内连优化详情</td>
<td></td>
</tr>
<tr>
<td>-XX:CompileCommand=dontinline,*类名.square</td>
<td></td>
<td>针对任意包下指定类名的指定方法禁用方法内联</td>
</tr>
<tr>
<td>-XX:-UseBiasedLocking</td>
<td>禁用偏向锁</td>
<td></td>
</tr>
<tr>
<td>堆相关</td>
<td></td>
<td></td>
</tr>
<tr>
<td>-Xms</td>
<td>指定堆的初始大小</td>
<td>-Xms8m，生产中一般和-Xmx大小一样</td>
</tr>
<tr>
<td>-Xmx</td>
<td>指定堆内存最大值</td>
<td>-Xmx8m等价于-XX:MaxHeapSize=size</td>
</tr>
<tr>
<td>-Xmn</td>
<td>新生代大小</td>
<td>-Xmn1m等价于-XX:NewSize=1m -XX:MaxNewSize=1m<br>即将新生代初始大小NewSize和新生代最大大小MaxNewSize都设置为1m</td>
</tr>
<tr>
<td>-XX:InitialSurvivorRatio=ratio</td>
<td>设置幸存区比例，默认为8</td>
<td>Eden区与From区比例</td>
</tr>
<tr>
<td>-XX:InitialSurvivorRatio=ratio -XX:+UseAdaptiveSizePolicy</td>
<td>动态调整幸存区比例</td>
<td>指定初始化幸存区比例，动态调整新生代中Eden与From区比例</td>
</tr>
<tr>
<td>-XX:MaxTenuringThreshold=threshold</td>
<td>晋升阈值</td>
<td></td>
</tr>
<tr>
<td>-XX:+PrintTenuringDistribution</td>
<td>打印晋升详情</td>
<td></td>
</tr>
<tr>
<td>-XX:+PrintGCDetails</td>
<td>打印垃圾回收详细信息</td>
<td></td>
</tr>
<tr>
<td>-verbose:gc</td>
<td>以最简单形式激活垃圾收集信息的日志记录</td>
<td>-XX:+PrintGCDetails -verbose:gc</td>
</tr>
<tr>
<td>-XX:+ScavengeBeforeFullGC</td>
<td>FullGC前Minor GC</td>
<td></td>
</tr>
</tbody></table>
<p>-Xmx20m -Xms20m -Xmn10m -XX:+UseSerialGC   -XX:+PrintGCDetails -verbose:gc</p>
<p>执行main方法打印堆信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 9216K, used 2214K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000)</span><br><span class="line">  eden space 8192K, 27% used [0x00000007bf600000,0x00000007bf8299b0,0x00000007bfe00000)</span><br><span class="line">  from space 1024K, 0% used [0x00000007bff00000,0x00000007bff00000,0x00000007c0000000)</span><br><span class="line">  to   space 1024K, 0% used [0x00000007bfe00000,0x00000007bfe00000,0x00000007bff00000)</span><br><span class="line"> ParOldGen       total 14336K, used 0K [0x00000007be800000, 0x00000007bf600000, 0x00000007bf600000)</span><br><span class="line">  object space 14336K, 0% used [0x00000007be800000,0x00000007be800000,0x00000007bf600000)</span><br><span class="line"> Metaspace       used 3081K, capacity 4620K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 324K, capacity 392K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure>

<p>新生代中total为Eden+From，因为To始终要空着，所以，total大概为9m</p>
<p>调用垃圾回收信息</p>
<p>DefNew: 6146K-&gt;480K(9216K),新生代回收前内存占用，回收后内存占用，新生代内存大小</p>
<p>6146K-&gt;4576K(23552K), 0.0011131 secs回收前堆内存占用，回收后堆内存占用，整个堆的内存大小</p>
<p>因为第二次创建对象时，新生代没有足够空间存放新创建的4M对象，直接将第一个4m对象存放到老年区了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="keyword">byte</span>[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB]);</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="keyword">byte</span>[_4MB]);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew: 6146K-&gt;480K(9216K), 0.0010934 secs] 6146K-&gt;4576K(23552K), 0.0011131 secs] [Times: user=0.00 sys=0.01, real=0.00 secs] </span><br><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 4658K [0x00000007be800000, 0x00000007bf200000, 0x00000007bf200000)</span><br><span class="line">  eden space 8192K,  53% used [0x00000007be800000, 0x00000007bec3d8a0, 0x00000007bf000000)</span><br><span class="line">  from space 1024K,  46% used [0x00000007bf100000, 0x00000007bf1781b8, 0x00000007bf200000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000007bf000000, 0x00000007bf000000, 0x00000007bf100000)</span><br><span class="line"> tenured generation   total 14336K, used 4096K [0x00000007bf200000, 0x00000007c0000000, 0x00000007c0000000)</span><br><span class="line">   the space 14336K,  28% used [0x00000007bf200000, 0x00000007bf600010, 0x00000007bf600200, 0x00000007c0000000)</span><br><span class="line"> Metaspace       used 3082K, capacity 4620K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 324K, capacity 392K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure>





<p>​    </p>
<p>HSDB工具</p>
<p>arthas-boot.jar可以反编译动态生成类</p>
<p>并发压测 工具jcstress</p>
<p>JMH工具</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2021/12/28/%E9%BB%91%E9%A9%AC%E9%AB%98%E9%A2%91/</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="单例模式实现方式"><a href="#单例模式实现方式" class="headerlink" title="单例模式实现方式"></a>单例模式实现方式</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><h4 id="枚举型单例"><a href="#枚举型单例" class="headerlink" title="枚举型单例"></a>枚举型单例</h4><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><h4 id="双减锁单例"><a href="#双减锁单例" class="headerlink" title="双减锁单例"></a>双减锁单例</h4><p>volitile 解决指令重排序</p>
<p>可见行</p>
<p>有序性</p>
<h4 id="内部类型懒汉单例"><a href="#内部类型懒汉单例" class="headerlink" title="内部类型懒汉单例"></a>内部类型懒汉单例</h4><h3 id="破坏单例"><a href="#破坏单例" class="headerlink" title="破坏单例"></a>破坏单例</h3><ul>
<li>反射破坏</li>
<li>反序列化破坏。readResolve</li>
<li>Unsafe破坏单例</li>
</ul>
<p>枚举类型反射和反序列化可以破坏单例</p>
<p>java类库中使用单例</p>
<p>Runtime-静态变量</p>
<p>Consol-双检锁懒汉创建单例</p>
<p>Collections中的EmptyXXX对象–懒汉式内部类</p>
<p>Comparators中的NaturalOrderComparator使用的是枚举型饿汉式单例</p>
]]></content>
  </entry>
  <entry>
    <title>类加载与字节码技术</title>
    <url>/2022/01/05/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<ol>
<li>类文件结构</li>
<li>字节码指令</li>
<li>编译期处理</li>
<li>类加载阶段</li>
<li>类加载器</li>
<li>运行期优化</li>
</ol>
<h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><p><a class="link" href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.7">doc<i class="fas fa-external-link-alt"></i></a></p>
<p>u[n]代表字节数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic;</span><br><span class="line">    u2             minor_version;</span><br><span class="line">    u2             major_version;</span><br><span class="line">    u2             constant_pool_count;</span><br><span class="line">    cp_info        constant_pool[constant_pool_count-1];</span><br><span class="line">    u2             access_flags;</span><br><span class="line">    u2             this_class;</span><br><span class="line">    u2             super_class;</span><br><span class="line">    u2             interfaces_count;</span><br><span class="line">    u2             interfaces[interfaces_count];</span><br><span class="line">    u2             fields_count;</span><br><span class="line">    field_info     fields[fields_count];</span><br><span class="line">    u2             methods_count;</span><br><span class="line">    method_info    methods[methods_count];</span><br><span class="line">    u2             attributes_count;</span><br><span class="line">    attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>0000000    ca  fe  ba  be  00  00  00  34  00  62  0a  00  16  00  2d  09</p>
<h3 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h3><p>0000000    <strong>ca  fe  ba  be</strong>  00  00  00  34  00  62  0a  00  16  00  2d  09</p>
<p>魔数，表示文件格式，class文件默认为 ca  fe  ba  be</p>
<h3 id="minor-version"><a href="#minor-version" class="headerlink" title="minor_version"></a>minor_version</h3><p>0000000    ca  fe  ba  be  <strong>00  00</strong>  00  34  00  62  0a  00  16  00  2d  09</p>
<p>次版本</p>
<h3 id="major-version"><a href="#major-version" class="headerlink" title="major_version"></a>major_version</h3><p>0000000    ca  fe  ba  be  00  00  <strong>00  34</strong>  00  62  0a  00  16  00  2d  09</p>
<p>主版本，类文件格式的版本表示位主版本.次版本</p>
<h3 id="constant-pool-count"><a href="#constant-pool-count" class="headerlink" title="constant_pool_count"></a>constant_pool_count</h3><p>0000000    ca  fe  ba  be  00  00  00  34  <strong>00  62</strong>  0a  00  16  00  2d  09</p>
<p> 常量池中常量数量,表明有97个常量，索引从1到97</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The value of the constant_pool_count item is equal to the number of entries in the constant_pool table plus one. A constant_pool index is considered valid if it is greater than zero and less than constant_pool_count, with the exception for constants of type long and double noted in §4.4.5.</span><br></pre></td></tr></table></figure>



<h3 id="cp-info"><a href="#cp-info" class="headerlink" title="cp_info"></a>cp_info</h3><p>后面从0000000行的0a  00  16  00  2d 到0003100行的    73  全是常量池中的遍历信息</p>
<p>constant_pool[constant_pool_count-1]</p>
<p>常量池中每一个常量</p>
<h3 id="access-flags"><a href="#access-flags" class="headerlink" title="access_flags"></a>access_flags</h3><p>0003100    73  <strong>00  21</strong>  00  15  00  16  00  00  00  01  00  1a  00  17  00</p>
<p>21表示ACC_PUBLIC + ACC_SUPER 表示它是一个public 类</p>
<p> 该类的访问权限</p>
<table>
<thead>
<tr>
<th>Flag Name</th>
<th>Value</th>
<th>Interpretation</th>
</tr>
</thead>
<tbody><tr>
<td><code>ACC_PUBLIC</code></td>
<td>0x0001</td>
<td>Declared <code>public</code>; may be accessed from outside its package.</td>
</tr>
<tr>
<td><code>ACC_FINAL</code></td>
<td>0x0010</td>
<td>Declared <code>final</code>; no subclasses allowed.</td>
</tr>
<tr>
<td><code>ACC_SUPER</code></td>
<td>0x0020</td>
<td>Treat superclass methods specially when invoked by the <em>invokespecial</em> instruction.</td>
</tr>
<tr>
<td><code>ACC_INTERFACE</code></td>
<td>0x0200</td>
<td>Is an interface, not a class.</td>
</tr>
<tr>
<td><code>ACC_ABSTRACT</code></td>
<td>0x0400</td>
<td>Declared <code>abstract</code>; must not be instantiated.</td>
</tr>
<tr>
<td><code>ACC_SYNTHETIC</code></td>
<td>0x1000</td>
<td>Declared synthetic; not present in the source code.</td>
</tr>
<tr>
<td><code>ACC_ANNOTATION</code></td>
<td>0x2000</td>
<td>Declared as an annotation type.</td>
</tr>
<tr>
<td><code>ACC_ENUM</code></td>
<td>0x4000</td>
<td>Declared as an <code>enum</code> type.</td>
</tr>
</tbody></table>
<h3 id="this-class"><a href="#this-class" class="headerlink" title="this_class"></a>this_class</h3><p>0003100    73  00  21  <strong>00  15</strong>  00  16  00  00  00  01  00  1a  00  17  00</p>
<p>Main</p>
<p> 该类文件定义的类或接口，必须是常量池表中的一个CONSTANT_Class_info类型常量</p>
<h3 id="super-class"><a href="#super-class" class="headerlink" title="super_class"></a>super_class</h3><p>0003100    73  00  21  00  15  <strong>00  16</strong>  00  00  00  01  00  1a  00  17  00</p>
<p>Object</p>
<p>父类，必须是常量池表中的一个类常量</p>
<h3 id="interfaces-count"><a href="#interfaces-count" class="headerlink" title="interfaces_count"></a>interfaces_count</h3><p>0003100    73  00  21  00  15  00  16  <strong>00  00</strong>  00  01  00  1a  00  17  00</p>
<p> 接口数量</p>
<h3 id="interfaces-interfaces-count"><a href="#interfaces-interfaces-count" class="headerlink" title="interfaces[interfaces_count]"></a>interfaces[interfaces_count]</h3><p>每一个接口，必须是常量池表中的一个CONSTANT_Class_info常量</p>
<h3 id="fields-count"><a href="#fields-count" class="headerlink" title="fields_count"></a>fields_count</h3><p>0003100    73  00  21  00  15  00  16  00  00  <strong>00  01</strong>  00  1a  00  17  00</p>
<p>字段数量</p>
<p>拓展:</p>
<p><a class="link" href="https://blog.csdn.net/beyond181/article/details/54928025">何为java中的field<i class="fas fa-external-link-alt"></i></a></p>
<p>What is a field in java?</p>
<p>A field is an attribute. A field may be a class’s variable, an object’s variable, an object’s method’s variable, or a parameter of a function.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bike</span></span>&#123; </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> bikes;</span><br><span class="line">  <span class="keyword">int</span> gear;</span><br><span class="line">  <span class="keyword">int</span> cadence;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">( <span class="keyword">int</span> newGear, <span class="keyword">int</span> newCadence )</span></span>&#123;</span><br><span class="line">    bikes = bikes + <span class="number">1</span>;</span><br><span class="line">    gear = newGear;</span><br><span class="line">    cadence = newCadence;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getSpeed</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> speed = gear*cadence*<span class="number">5</span>*<span class="number">3.141</span>;</span><br><span class="line">    <span class="keyword">return</span> speed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;bikes&#x27; is a class&#x27;s variable (class variable) (static field).</span><br><span class="line">&#x27;gear&#x27; and &#x27;cadence&#x27; could be an object&#x27;s variables (instance variables) (non-static fields).</span><br><span class="line">&#x27;speed&#x27; is an object&#x27;s method&#x27;s variable (local variable).</span><br><span class="line">&#x27;newGear&#x27; and &#x27;newCadence&#x27; are parameters of a function (parameters).</span><br></pre></td></tr></table></figure>

<h3 id="fields"><a href="#fields" class="headerlink" title="fields[]"></a>fields[]</h3><p>看不下去了</p>
<p>00  1a </p>
<p>access_flags</p>
<p>4194304 </p>
<p>00  17</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name_index</span><br></pre></td></tr></table></figure>

<p>_4MB </p>
<p>00  18</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">descriptor_index</span><br></pre></td></tr></table></figure>

<p>| </p>
<p>00  01</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attributes_count</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attribute_info</span><br></pre></td></tr></table></figure>

<p>00  19</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attribute_name_index</span><br></pre></td></tr></table></figure>

<p>00  00  00  02</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">attribute_length</span><br></pre></td></tr></table></figure>



<p>0003100    73  00  21  00  15  00  16  00  00  00  01  <strong>00  1a  00  17  00</strong></p>
<p>0003120    <strong>18</strong>  <strong>00  01  00  19</strong>  00  00  00  02  00  1a  00  05  00  01  00</p>
<h3 id="methods-count"><a href="#methods-count" class="headerlink" title="methods_count"></a>methods_count</h3><p>方法数量</p>
<h3 id="methods-methods-count"><a href="#methods-methods-count" class="headerlink" title="methods[methods_count]"></a>methods[methods_count]</h3><p>每一个方法，必须是常量池中的method_info结构</p>
<h3 id="attributes-count"><a href="#attributes-count" class="headerlink" title="attributes_count"></a>attributes_count</h3><p>附加属性数量</p>
<p>0003640    00  00  53  00  21  00  00  00  05  01  00  2a  10  00  00  <strong>03</strong></p>
<h3 id="attributes"><a href="#attributes" class="headerlink" title="attributes[]"></a>attributes[]</h3><p>0003660    <strong>00  2b</strong>  00  00  00  02  00  2c  00  40  00  00  00  12  00  02</p>
<p>0003660    00  2b  <strong>00  00  00  02</strong>  00  2c  00  40  00  00  00  12  00  02</p>
<p>0003660    00  2b  00  00  00  02  <strong>00  2c</strong>  00  40  00  00  00  12  00  02</p>
<p>0003660    00  2b  00  00  00  02  00  2c  <strong>00  40</strong>  00  00  00  12  00  02</p>
<p>0003660    00  2b  00  00  00  02  00  2c  00  40  <strong>00  00  00  12</strong>  00  02</p>
<p>代码属性每一个属性，必须是常量池中的<code>CONSTANT_Utf8</code>结构</p>
<p>扩展<a class="link" href="https://stackoverflow.com/questions/10115588/what-is-the-difference-between-field-variable-attribute-and-property-in-java">java POJO中field,variable,attribute,property的区别<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -parameters -d . Main.java</span><br><span class="line"></span><br><span class="line">od -t xC Main.class</span><br><span class="line"></span><br><span class="line">javap -v Main.class</span><br></pre></td></tr></table></figure>





<p>扩展</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000    ca  fe  ba  be  00  00  00  34  00  62  0a  00  16  00  2d  09</span><br><span class="line">0000020    00  2e  00  2f  08  00  30  0a  00  31  00  32  07  00  33  0a</span><br><span class="line">0000040    00  05  00  2d  0a  00  05  00  34  07  00  35  05  00  00  00</span><br><span class="line">0000060    00  00  00  0b  b8  09  00  36  00  37  07  00  38  0a  00  0c</span><br><span class="line">0000100    00  2d  12  00  00  00  3d  07  00  3e  0a  00  0f  00  2d  0a</span><br><span class="line">0000120    00  08  00  41  07  00  42  08  00  43  0a  00  12  00  44  07</span><br><span class="line">0000140    00  45  07  00  46  01  00  04  5f  34  4d  42  01  00  01  49</span><br><span class="line">0000160    01  00  0d  43  6f  6e  73  74  61  6e  74  56  61  6c  75  65</span><br><span class="line">0000200    03  00  40  00  00  01  00  06  3c  69  6e  69  74  3e  01  00</span><br><span class="line">0000220    03  28  29  56  01  00  04  43  6f  64  65  01  00  0f  4c  69</span><br><span class="line">0000240    6e  65  4e  75  6d  62  65  72  54  61  62  6c  65  01  00  04</span><br><span class="line">0000260    6d  61  69  6e  01  00  16  28  5b  4c  6a  61  76  61  2f  6c</span><br><span class="line">0000300    61  6e  67  2f  53  74  72  69  6e  67  3b  29  56  01  00  10</span><br><span class="line">0000320    4d  65  74  68  6f  64  50  61  72  61  6d  65  74  65  72  73</span><br><span class="line">0000340    01  00  04  61  72  67  73  01  00  02  6d  33  01  00  1b  28</span><br><span class="line">0000360    29  4c  6a  61  76  61  2f  6c  61  6e  67  2f  53  74  72  69</span><br><span class="line">0000400    6e  67  42  75  69  6c  64  65  72  3b  01  00  17  72  65  66</span><br><span class="line">0000420    6c  65  63  74  69  6f  6e  43  61  73  74  53  69  6e  67  6c</span><br><span class="line">0000440    65  74  6f  6e  01  00  26  28  4c  6a  61  76  61  2f  6c  61</span><br><span class="line">0000460    6e  67  2f  4f  62  6a  65  63  74  3b  29  4c  6a  61  76  61</span><br><span class="line">0000500    2f  6c  61  6e  67  2f  4f  62  6a  65  63  74  3b  01  00  03</span><br><span class="line">0000520    6f  62  6a  01  00  20  6c  61  6d  62  64  61  24  72  65  66</span><br><span class="line">0000540    6c  65  63  74  69  6f  6e  43  61  73  74  53  69  6e  67  6c</span><br><span class="line">0000560    65  74  6f  6e  24  30  01  00  28  28  4c  6a  61  76  61  2f</span><br><span class="line">0000600    6c  61  6e  67  2f  52  75  6e  6e  61  62  6c  65  3b  29  4c</span><br><span class="line">0000620    6a  61  76  61  2f  6c  61  6e  67  2f  54  68  72  65  61  64</span><br><span class="line">0000640    3b  01  00  01  72  01  00  0a  53  6f  75  72  63  65  46  69</span><br><span class="line">0000660    6c  65  01  00  09  4d  61  69  6e  2e  6a  61  76  61  0c  00</span><br><span class="line">0000700    1b  00  1c  07  00  47  0c  00  48  00  49  01  00  0b  48  65</span><br><span class="line">0000720    6c  6c  6f  20  57  6f  72  6c  64  07  00  4a  0c  00  4b  00</span><br><span class="line">0000740    4c  01  00  17  6a  61  76  61  2f  6c  61  6e  67  2f  53  74</span><br><span class="line">0000760    72  69  6e  67  42  75  69  6c  64  65  72  0c  00  4d  00  4e</span><br><span class="line">0001000    01  00  27  6a  61  76  61  2f  75  74  69  6c  2f  63  6f  6e</span><br><span class="line">0001020    63  75  72  72  65  6e  74  2f  54  68  72  65  61  64  50  6f</span><br><span class="line">0001040    6f  6c  45  78  65  63  75  74  6f  72  07  00  4f  0c  00  50</span><br><span class="line">0001060    00  51  01  00  28  6a  61  76  61  2f  75  74  69  6c  2f  63</span><br><span class="line">0001100    6f  6e  63  75  72  72  65  6e  74  2f  4c  69  6e  6b  65  64</span><br><span class="line">0001120    42  6c  6f  63  6b  69  6e  67  44  65  71  75  65  01  00  10</span><br><span class="line">0001140    42  6f  6f  74  73  74  72  61  70  4d  65  74  68  6f  64  73</span><br><span class="line">0001160    0f  06  00  52  10  00  29  0f  06  00  53  0c  00  54  00  55</span><br><span class="line">0001200    01  00  33  6a  61  76  61  2f  75  74  69  6c  2f  63  6f  6e</span><br><span class="line">0001220    63  75  72  72  65  6e  74  2f  54  68  72  65  61  64  50  6f</span><br><span class="line">0001240    6f  6c  45  78  65  63  75  74  6f  72  24  41  62  6f  72  74</span><br><span class="line">0001260    50  6f  6c  69  63  79  01  00  0b  41  62  6f  72  74  50  6f</span><br><span class="line">0001300    6c  69  63  79  01  00  0c  49  6e  6e  65  72  43  6c  61  73</span><br><span class="line">0001320    73  65  73  0c  00  1b  00  56  01  00  10  6a  61  76  61  2f</span><br><span class="line">0001340    6c  61  6e  67  2f  54  68  72  65  61  64  01  00  03  31  32</span><br><span class="line">0001360    33  0c  00  1b  00  4c  01  00  0e  73  69  6e  67  6c  65  74</span><br><span class="line">0001400    6f  6e  2f  4d  61  69  6e  01  00  10  6a  61  76  61  2f  6c</span><br><span class="line">0001420    61  6e  67  2f  4f  62  6a  65  63  74  01  00  10  6a  61  76</span><br><span class="line">0001440    61  2f  6c  61  6e  67  2f  53  79  73  74  65  6d  01  00  03</span><br><span class="line">0001460    6f  75  74  01  00  15  4c  6a  61  76  61  2f  69  6f  2f  50</span><br><span class="line">0001500    72  69  6e  74  53  74  72  65  61  6d  3b  01  00  13  6a  61</span><br><span class="line">0001520    76  61  2f  69  6f  2f  50  72  69  6e  74  53  74  72  65  61</span><br><span class="line">0001540    6d  01  00  07  70  72  69  6e  74  6c  6e  01  00  15  28  4c</span><br><span class="line">0001560    6a  61  76  61  2f  6c  61  6e  67  2f  53  74  72  69  6e  67</span><br><span class="line">0001600    3b  29  56  01  00  06  61  70  70  65  6e  64  01  00  1c  28</span><br><span class="line">0001620    49  29  4c  6a  61  76  61  2f  6c  61  6e  67  2f  53  74  72</span><br><span class="line">0001640    69  6e  67  42  75  69  6c  64  65  72  3b  01  00  1d  6a  61</span><br><span class="line">0001660    76  61  2f  75  74  69  6c  2f  63  6f  6e  63  75  72  72  65</span><br><span class="line">0001700    6e  74  2f  54  69  6d  65  55  6e  69  74  01  00  0c  4d  49</span><br><span class="line">0001720    4c  4c  49  53  45  43  4f  4e  44  53  01  00  1f  4c  6a  61</span><br><span class="line">0001740    76  61  2f  75  74  69  6c  2f  63  6f  6e  63  75  72  72  65</span><br><span class="line">0001760    6e  74  2f  54  69  6d  65  55  6e  69  74  3b  0a  00  57  00</span><br><span class="line">0002000    58  0a  00  15  00  59  01  00  09  6e  65  77  54  68  72  65</span><br><span class="line">0002020    61  64  01  00  26  28  29  4c  6a  61  76  61  2f  75  74  69</span><br><span class="line">0002040    6c  2f  63  6f  6e  63  75  72  72  65  6e  74  2f  54  68  72</span><br><span class="line">0002060    65  61  64  46  61  63  74  6f  72  79  3b  01  00  9c  28  49</span><br><span class="line">0002100    49  4a  4c  6a  61  76  61  2f  75  74  69  6c  2f  63  6f  6e</span><br><span class="line">0002120    63  75  72  72  65  6e  74  2f  54  69  6d  65  55  6e  69  74</span><br><span class="line">0002140    3b  4c  6a  61  76  61  2f  75  74  69  6c  2f  63  6f  6e  63</span><br><span class="line">0002160    75  72  72  65  6e  74  2f  42  6c  6f  63  6b  69  6e  67  51</span><br><span class="line">0002200    75  65  75  65  3b  4c  6a  61  76  61  2f  75  74  69  6c  2f</span><br><span class="line">0002220    63  6f  6e  63  75  72  72  65  6e  74  2f  54  68  72  65  61</span><br><span class="line">0002240    64  46  61  63  74  6f  72  79  3b  4c  6a  61  76  61  2f  75</span><br><span class="line">0002260    74  69  6c  2f  63  6f  6e  63  75  72  72  65  6e  74  2f  52</span><br><span class="line">0002300    65  6a  65  63  74  65  64  45  78  65  63  75  74  69  6f  6e</span><br><span class="line">0002320    48  61  6e  64  6c  65  72  3b  29  56  07  00  5a  0c  00  5b</span><br><span class="line">0002340    00  5e  0c  00  28  00  29  01  00  22  6a  61  76  61  2f  6c</span><br><span class="line">0002360    61  6e  67  2f  69  6e  76  6f  6b  65  2f  4c  61  6d  62  64</span><br><span class="line">0002400    61  4d  65  74  61  66  61  63  74  6f  72  79  01  00  0b  6d</span><br><span class="line">0002420    65  74  61  66  61  63  74  6f  72  79  07  00  60  01  00  06</span><br><span class="line">0002440    4c  6f  6f  6b  75  70  01  00  cc  28  4c  6a  61  76  61  2f</span><br><span class="line">0002460    6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  4d  65  74  68</span><br><span class="line">0002500    6f  64  48  61  6e  64  6c  65  73  24  4c  6f  6f  6b  75  70</span><br><span class="line">0002520    3b  4c  6a  61  76  61  2f  6c  61  6e  67  2f  53  74  72  69</span><br><span class="line">0002540    6e  67  3b  4c  6a  61  76  61  2f  6c  61  6e  67  2f  69  6e</span><br><span class="line">0002560    76  6f  6b  65  2f  4d  65  74  68  6f  64  54  79  70  65  3b</span><br><span class="line">0002600    4c  6a  61  76  61  2f  6c  61  6e  67  2f  69  6e  76  6f  6b</span><br><span class="line">0002620    65  2f  4d  65  74  68  6f  64  54  79  70  65  3b  4c  6a  61</span><br><span class="line">0002640    76  61  2f  6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  4d</span><br><span class="line">0002660    65  74  68  6f  64  48  61  6e  64  6c  65  3b  4c  6a  61  76</span><br><span class="line">0002700    61  2f  6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  4d  65</span><br><span class="line">0002720    74  68  6f  64  54  79  70  65  3b  29  4c  6a  61  76  61  2f</span><br><span class="line">0002740    6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  43  61  6c  6c</span><br><span class="line">0002760    53  69  74  65  3b  07  00  61  01  00  25  6a  61  76  61  2f</span><br><span class="line">0003000    6c  61  6e  67  2f  69  6e  76  6f  6b  65  2f  4d  65  74  68</span><br><span class="line">0003020    6f  64  48  61  6e  64  6c  65  73  24  4c  6f  6f  6b  75  70</span><br><span class="line">0003040    01  00  1e  6a  61  76  61  2f  6c  61  6e  67  2f  69  6e  76</span><br><span class="line">0003060    6f  6b  65  2f  4d  65  74  68  6f  64  48  61  6e  64  6c  65</span><br><span class="line">0003100    73  00  21  00  15  00  16  00  00  00  01  00  1a  00  17  00</span><br><span class="line">0003120    18  00  01  00  19  00  00  00  02  00  1a  00  05  00  01  00</span><br><span class="line">0003140    1b  00  1c  00  01  00  1d  00  00  00  1d  00  01  00  01  00</span><br><span class="line">0003160    00  00  05  2a  b7  00  01  b1  00  00  00  01  00  1e  00  00</span><br><span class="line">0003200    00  06  00  01  00  00  00  08  00  09  00  1f  00  20  00  02</span><br><span class="line">0003220    00  1d  00  00  00  25  00  02  00  01  00  00  00  09  b2  00</span><br><span class="line">0003240    02  12  03  b6  00  04  b1  00  00  00  01  00  1e  00  00  00</span><br><span class="line">0003260    0a  00  02  00  00  00  3c  00  08  00  44  00  21  00  00  00</span><br><span class="line">0003300    05  01  00  22  00  00  00  09  00  23  00  24  00  01  00  1d</span><br><span class="line">0003320    00  00  00  44  00  02  00  01  00  00  00  1c  bb  00  05  59</span><br><span class="line">0003340    b7  00  06  4b  2a  04  b6  00  07  57  2a  05  b6  00  07  57</span><br><span class="line">0003360    2a  06  b6  00  07  57  2a  b0  00  00  00  01  00  1e  00  00</span><br><span class="line">0003400    00  16  00  05  00  00  00  4b  00  08  00  4c  00  0e  00  4d</span><br><span class="line">0003420    00  14  00  4e  00  1a  00  4f  00  0a  00  25  00  26  00  02</span><br><span class="line">0003440    00  1d  00  00  00  42  00  0b  00  02  00  00  00  26  bb  00</span><br><span class="line">0003460    08  59  08  10  07  14  00  09  b2  00  0b  bb  00  0c  59  b7</span><br><span class="line">0003500    00  0d  ba  00  0e  00  00  bb  00  0f  59  b7  00  10  b7  00</span><br><span class="line">0003520    11  4c  01  b0  00  00  00  01  00  1e  00  00  00  0a  00  02</span><br><span class="line">0003540    00  00  00  53  00  24  00  54  00  21  00  00  00  05  01  00</span><br><span class="line">0003560    27  00  00  10  0a  00  28  00  29  00  02  00  1d  00  00  00</span><br><span class="line">0003600    22  00  03  00  01  00  00  00  0a  bb  00  12  59  12  13  b7</span><br><span class="line">0003620    00  14  b0  00  00  00  01  00  1e  00  00  00  06  00  01  00</span><br><span class="line">0003640    00  00  53  00  21  00  00  00  05  01  00  2a  10  00  00  03</span><br><span class="line">0003660    00  2b  00  00  00  02  00  2c  00  40  00  00  00  12  00  02</span><br><span class="line">0003700    00  0f  00  08  00  3f  00  09  00  5c  00  5f  00  5d  00  19</span><br><span class="line">0003720    00  39  00  00  00  0c  00  01  00  3a  00  03  00  3b  00  3c</span><br><span class="line">0003740    00  3b                                                        </span><br><span class="line">0003742</span><br></pre></td></tr></table></figure>

<p>附表</p>
<p>1.常量池类型索引</p>
<p>Constant pool tags</p>
<table>
<thead>
<tr>
<th>Constant Type</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td><code>CONSTANT_Class</code></td>
<td>7</td>
</tr>
<tr>
<td><code>CONSTANT_Fieldref</code></td>
<td>9</td>
</tr>
<tr>
<td><code>CONSTANT_Methodref</code></td>
<td>10</td>
</tr>
<tr>
<td><code>CONSTANT_InterfaceMethodref</code></td>
<td>11</td>
</tr>
<tr>
<td><code>CONSTANT_String</code></td>
<td>8</td>
</tr>
<tr>
<td><code>CONSTANT_Integer</code></td>
<td>3</td>
</tr>
<tr>
<td><code>CONSTANT_Float</code></td>
<td>4</td>
</tr>
<tr>
<td><code>CONSTANT_Long</code></td>
<td>5</td>
</tr>
<tr>
<td><code>CONSTANT_Double</code></td>
<td>6</td>
</tr>
<tr>
<td><code>CONSTANT_NameAndType</code></td>
<td>12</td>
</tr>
<tr>
<td><code>CONSTANT_Utf8</code></td>
<td>1</td>
</tr>
<tr>
<td><code>CONSTANT_MethodHandle</code></td>
<td>15</td>
</tr>
<tr>
<td><code>CONSTANT_MethodType</code></td>
<td>16</td>
</tr>
<tr>
<td><code>CONSTANT_InvokeDynamic</code></td>
<td>18</td>
</tr>
</tbody></table>
<p>2.常量池中各种类型结构</p>
<p>CONSTANT_Class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Class_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 name_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Fieldref</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Fieldref_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 class_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Methodref</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Methodref_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 class_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_InterfaceMethodref</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_InterfaceMethodref_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 class_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_String</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_String_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 string_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Integer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Integer_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u4 bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Float</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Float_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u4 bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CONSTANT_Long</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Long_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u4 high_bytes;</span><br><span class="line">    u4 low_bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Double</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Double_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u4 high_bytes;</span><br><span class="line">    u4 low_bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>CONSTANT_NameAndType</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_NameAndType_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 name_index;</span><br><span class="line">    u2 descriptor_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_Utf8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_Utf8_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 length;</span><br><span class="line">    u1 bytes[length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_MethodHandle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_MethodHandle_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u1 reference_kind;</span><br><span class="line">    u2 reference_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_MethodType</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_MethodType_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 descriptor_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CONSTANT_InvokeDynamic</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTANT_InvokeDynamic_info &#123;</span><br><span class="line">    u1 tag;</span><br><span class="line">    u2 bootstrap_method_attr_index;</span><br><span class="line">    u2 name_and_type_index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JAVAP工具"><a href="#JAVAP工具" class="headerlink" title="JAVAP工具"></a>JAVAP工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple singleton % javap --<span class="built_in">help</span></span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -<span class="built_in">help</span>  --<span class="built_in">help</span>  -?        输出此用法消息</span><br><span class="line">  -version                 版本信息</span><br><span class="line">  -v  -verbose             输出附加信息</span><br><span class="line">  -l                       输出行号和本地变量表</span><br><span class="line">  -public                  仅显示公共类和成员</span><br><span class="line">  -protected               显示受保护的/公共类和成员</span><br><span class="line">  -package                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  -p  -private             显示所有类和成员</span><br><span class="line">  -c                       对代码进行反汇编</span><br><span class="line">  -s                       输出内部类型签名</span><br><span class="line">  -sysinfo                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants               显示最终常量</span><br><span class="line">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chaoqiang@Pineapple singleton % javap -v Main.class</span><br><span class="line">Classfile /Users/chaoqiang/IdeaProjects/learning/interview/src/main/java/singleton/singleton/Main.class</span><br><span class="line">  Last modified 2022-1-2; size 2018 bytes</span><br><span class="line">  MD5 checksum 4e01c6c498e93b2bc4ee92022604825c</span><br><span class="line">  Compiled from <span class="string">&quot;Main.java&quot;</span></span><br><span class="line">public class singleton.Main</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="comment">#1 = Methodref          #22.#45        // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   <span class="comment">#2 = Fieldref           #46.#47        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   <span class="comment">#3 = String             #48            // Hello World</span></span><br><span class="line">   <span class="comment">#4 = Methodref          #49.#50        // java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   <span class="comment">#5 = Class              #51            // java/lang/StringBuilder</span></span><br><span class="line">   <span class="comment">#6 = Methodref          #5.#45         // java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   <span class="comment">#7 = Methodref          #5.#52         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">   <span class="comment">#8 = Class              #53            // java/util/concurrent/ThreadPoolExecutor</span></span><br><span class="line">   <span class="comment">#9 = Long               3000l</span></span><br><span class="line">  <span class="comment">#11 = Fieldref           #54.#55        // java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;</span></span><br><span class="line">  <span class="comment">#12 = Class              #56            // java/util/concurrent/LinkedBlockingDeque</span></span><br><span class="line">  <span class="comment">#13 = Methodref          #12.#45        // java/util/concurrent/LinkedBlockingDeque.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#14 = InvokeDynamic      #0:#61         // #0:newThread:()Ljava/util/concurrent/ThreadFactory;</span></span><br><span class="line">  <span class="comment">#15 = Class              #62            // java/util/concurrent/ThreadPoolExecutor$AbortPolicy</span></span><br><span class="line">  <span class="comment">#16 = Methodref          #15.#45        // java/util/concurrent/ThreadPoolExecutor$AbortPolicy.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#17 = Methodref          #8.#65         // java/util/concurrent/ThreadPoolExecutor.&quot;&lt;init&gt;&quot;:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V</span></span><br><span class="line">  <span class="comment">#18 = Class              #66            // java/lang/Thread</span></span><br><span class="line">  <span class="comment">#19 = String             #67            // 123</span></span><br><span class="line">  <span class="comment">#20 = Methodref          #18.#68        // java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#21 = Class              #69            // singleton/Main</span></span><br><span class="line">  <span class="comment">#22 = Class              #70            // java/lang/Object</span></span><br><span class="line">  <span class="comment">#23 = Utf8               _4MB</span></span><br><span class="line">  <span class="comment">#24 = Utf8               I</span></span><br><span class="line">  <span class="comment">#25 = Utf8               ConstantValue</span></span><br><span class="line">  <span class="comment">#26 = Integer            4194304</span></span><br><span class="line">  <span class="comment">#27 = Utf8               &lt;init&gt;</span></span><br><span class="line">  <span class="comment">#28 = Utf8               ()V</span></span><br><span class="line">  <span class="comment">#29 = Utf8               Code</span></span><br><span class="line">  <span class="comment">#30 = Utf8               LineNumberTable</span></span><br><span class="line">  <span class="comment">#31 = Utf8               main</span></span><br><span class="line">  <span class="comment">#32 = Utf8               ([Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#33 = Utf8               MethodParameters</span></span><br><span class="line">  <span class="comment">#34 = Utf8               args</span></span><br><span class="line">  <span class="comment">#35 = Utf8               m3</span></span><br><span class="line">  <span class="comment">#36 = Utf8               ()Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="comment">#37 = Utf8               reflectionCastSingleton</span></span><br><span class="line">  <span class="comment">#38 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;</span></span><br><span class="line">  <span class="comment">#39 = Utf8               obj</span></span><br><span class="line">  <span class="comment">#40 = Utf8               lambda$reflectionCastSingleton$0</span></span><br><span class="line">  <span class="comment">#41 = Utf8               (Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#42 = Utf8               r</span></span><br><span class="line">  <span class="comment">#43 = Utf8               SourceFile</span></span><br><span class="line">  <span class="comment">#44 = Utf8               Main.java</span></span><br><span class="line">  <span class="comment">#45 = NameAndType        #27:#28        // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#46 = Class              #71            // java/lang/System</span></span><br><span class="line">  <span class="comment">#47 = NameAndType        #72:#73        // out:Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="comment">#48 = Utf8               Hello World</span></span><br><span class="line">  <span class="comment">#49 = Class              #74            // java/io/PrintStream</span></span><br><span class="line">  <span class="comment">#50 = NameAndType        #75:#76        // println:(Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#51 = Utf8               java/lang/StringBuilder</span></span><br><span class="line">  <span class="comment">#52 = NameAndType        #77:#78        // append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="comment">#53 = Utf8               java/util/concurrent/ThreadPoolExecutor</span></span><br><span class="line">  <span class="comment">#54 = Class              #79            // java/util/concurrent/TimeUnit</span></span><br><span class="line">  <span class="comment">#55 = NameAndType        #80:#81        // MILLISECONDS:Ljava/util/concurrent/TimeUnit;</span></span><br><span class="line">  <span class="comment">#56 = Utf8               java/util/concurrent/LinkedBlockingDeque</span></span><br><span class="line">  <span class="comment">#57 = Utf8               BootstrapMethods</span></span><br><span class="line">  <span class="comment">#58 = MethodHandle       #6:#82         // invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  <span class="comment">#59 = MethodType         #41            //  (Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#60 = MethodHandle       #6:#83         // invokestatic singleton/Main.lambda$reflectionCastSingleton$0:(Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#61 = NameAndType        #84:#85        // newThread:()Ljava/util/concurrent/ThreadFactory;</span></span><br><span class="line">  <span class="comment">#62 = Utf8               java/util/concurrent/ThreadPoolExecutor$AbortPolicy</span></span><br><span class="line">  <span class="comment">#63 = Utf8               AbortPolicy</span></span><br><span class="line">  <span class="comment">#64 = Utf8               InnerClasses</span></span><br><span class="line">  <span class="comment">#65 = NameAndType        #27:#86        // &quot;&lt;init&gt;&quot;:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V</span></span><br><span class="line">  <span class="comment">#66 = Utf8               java/lang/Thread</span></span><br><span class="line">  <span class="comment">#67 = Utf8               123</span></span><br><span class="line">  <span class="comment">#68 = NameAndType        #27:#76        // &quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#69 = Utf8               singleton/Main</span></span><br><span class="line">  <span class="comment">#70 = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="comment">#71 = Utf8               java/lang/System</span></span><br><span class="line">  <span class="comment">#72 = Utf8               out</span></span><br><span class="line">  <span class="comment">#73 = Utf8               Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="comment">#74 = Utf8               java/io/PrintStream</span></span><br><span class="line">  <span class="comment">#75 = Utf8               println</span></span><br><span class="line">  <span class="comment">#76 = Utf8               (Ljava/lang/String;)V</span></span><br><span class="line">  <span class="comment">#77 = Utf8               append</span></span><br><span class="line">  <span class="comment">#78 = Utf8               (I)Ljava/lang/StringBuilder;</span></span><br><span class="line">  <span class="comment">#79 = Utf8               java/util/concurrent/TimeUnit</span></span><br><span class="line">  <span class="comment">#80 = Utf8               MILLISECONDS</span></span><br><span class="line">  <span class="comment">#81 = Utf8               Ljava/util/concurrent/TimeUnit;</span></span><br><span class="line">  <span class="comment">#82 = Methodref          #87.#88        // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  <span class="comment">#83 = Methodref          #21.#89        // singleton/Main.lambda$reflectionCastSingleton$0:(Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#84 = Utf8               newThread</span></span><br><span class="line">  <span class="comment">#85 = Utf8               ()Ljava/util/concurrent/ThreadFactory;</span></span><br><span class="line">  <span class="comment">#86 = Utf8               (IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V</span></span><br><span class="line">  <span class="comment">#87 = Class              #90            // java/lang/invoke/LambdaMetafactory</span></span><br><span class="line">  <span class="comment">#88 = NameAndType        #91:#94        // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  <span class="comment">#89 = NameAndType        #40:#41        // lambda$reflectionCastSingleton$0:(Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">  <span class="comment">#90 = Utf8               java/lang/invoke/LambdaMetafactory</span></span><br><span class="line">  <span class="comment">#91 = Utf8               metafactory</span></span><br><span class="line">  <span class="comment">#92 = Class              #96            // java/lang/invoke/MethodHandles$Lookup</span></span><br><span class="line">  <span class="comment">#93 = Utf8               Lookup</span></span><br><span class="line">  <span class="comment">#94 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">  <span class="comment">#95 = Class              #97            // java/lang/invoke/MethodHandles</span></span><br><span class="line">  <span class="comment">#96 = Utf8               java/lang/invoke/MethodHandles$Lookup</span></span><br><span class="line">  <span class="comment">#97 = Utf8               java/lang/invoke/MethodHandles</span></span><br><span class="line">  <span class="comment"># 构造方法</span></span><br><span class="line">&#123;</span><br><span class="line">  public singleton.Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         4: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 8: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     <span class="comment">#2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         3: ldc           <span class="comment">#3                  // String Hello World</span></span><br><span class="line">         5: invokevirtual <span class="comment">#4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         8: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 61: 0</span><br><span class="line">        line 69: 8</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      args</span><br><span class="line"></span><br><span class="line">  public static java.lang.StringBuilder m3();</span><br><span class="line">    descriptor: ()Ljava/lang/StringBuilder;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=0</span><br><span class="line">         0: new           <span class="comment">#5                  // class java/lang/StringBuilder</span></span><br><span class="line">         3: dup</span><br><span class="line">         4: invokespecial <span class="comment">#6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         7: astore_0</span><br><span class="line">         8: aload_0</span><br><span class="line">         9: iconst_1</span><br><span class="line">        10: invokevirtual <span class="comment">#7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">        13: pop</span><br><span class="line">        14: aload_0</span><br><span class="line">        15: iconst_2</span><br><span class="line">        16: invokevirtual <span class="comment">#7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">        19: pop</span><br><span class="line">        20: aload_0</span><br><span class="line">        21: iconst_3</span><br><span class="line">        22: invokevirtual <span class="comment">#7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">        25: pop</span><br><span class="line">        26: aload_0</span><br><span class="line">        27: areturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 76: 0</span><br><span class="line">        line 77: 8</span><br><span class="line">        line 78: 14</span><br><span class="line">        line 79: 20</span><br><span class="line">        line 80: 26</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Main.java&quot;</span></span><br><span class="line">InnerClasses:</span><br><span class="line">     public static <span class="comment">#63= #15 of #8; //AbortPolicy=class java/util/concurrent/ThreadPoolExecutor$AbortPolicy of class java/util/concurrent/ThreadPoolExecutor</span></span><br><span class="line">     public static final <span class="comment">#93= #92 of #95; //Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span></span><br><span class="line">BootstrapMethods:</span><br><span class="line">  0: <span class="comment">#58 invokestatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;</span></span><br><span class="line">    Method arguments:</span><br><span class="line">      <span class="comment">#59 (Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">      <span class="comment">#60 invokestatic singleton/Main.lambda$reflectionCastSingleton$0:(Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line">      <span class="comment">#59 (Ljava/lang/Runnable;)Ljava/lang/Thread;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>类加载时</p>
<p>常量池载入运行时常量池，运行时常量池属于方法区</p>
<p>short内的数字和字节码指令存在一起，一旦超过short的最大值，该数字就存储在运行时常量池</p>
<p>方法字节码载入方法区 </p>
<h3 id="CInit"><a href="#CInit" class="headerlink" title="CInit"></a>CInit</h3><p>静态代码块和静态变量会在编译时合并为一个static方法，按代码中的顺序加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        i = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  static int i;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line"></span><br><span class="line">  public singleton.Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 8: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: getstatic     #3                  // Field i:I</span><br><span class="line">         6: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 36: 0</span><br><span class="line">        line 104: 9</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      args</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=0, args_size=0</span><br><span class="line">         0: bipush        20</span><br><span class="line">         2: putstatic     #3                  // Field i:I</span><br><span class="line">         5: bipush        30</span><br><span class="line">         7: putstatic     #3                  // Field i:I</span><br><span class="line">        10: bipush        10</span><br><span class="line">        12: putstatic     #3                  // Field i:I</span><br><span class="line">        15: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 26: 0</span><br><span class="line">        line 30: 5</span><br><span class="line">        line 33: 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p>编译器会按照从上至下的顺序，收集所有{}代码块和成员变量赋值的构造方法，但原始构造方法内的代码总是在最后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String a = <span class="string">&quot;s1&quot;</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="string">&quot;s2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Main(String a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main main = <span class="keyword">new</span> Main(<span class="string">&quot;s3&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        System.out.println(main.a);</span><br><span class="line">        System.out.println(main.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  singleton.Main(java.lang.String, int);</span><br><span class="line">    descriptor: (Ljava/lang/String;I)V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=3, args_size=3</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: ldc           #2                  // String s1</span><br><span class="line">         7: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">        10: aload_0</span><br><span class="line">        11: bipush        20</span><br><span class="line">        13: putfield      #4                  // Field b:I</span><br><span class="line">        16: aload_0</span><br><span class="line">        17: bipush        10</span><br><span class="line">        19: putfield      #4                  // Field b:I</span><br><span class="line">        22: aload_0</span><br><span class="line">        23: ldc           #5                  // String s2</span><br><span class="line">        25: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">        28: aload_0</span><br><span class="line">        29: aload_1</span><br><span class="line">        30: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">        33: aload_0</span><br><span class="line">        34: iload_2</span><br><span class="line">        35: putfield      #4                  // Field b:I</span><br><span class="line">        38: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 29: 0</span><br><span class="line">        line 20: 4</span><br><span class="line">        line 22: 10</span><br><span class="line">        line 24: 16</span><br><span class="line">        line 26: 22</span><br><span class="line">        line 30: 28</span><br><span class="line">        line 31: 33</span><br><span class="line">        line 32: 38</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      a</span><br><span class="line">      b</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=4, locals=2, args_size=1</span><br><span class="line">         0: new           #6                  // class singleton/Main</span><br><span class="line">         3: dup</span><br><span class="line">         4: ldc           #7                  // String s3</span><br><span class="line">         6: bipush        30</span><br><span class="line">         8: invokespecial #8                  // Method &quot;&lt;init&gt;&quot;:(Ljava/lang/String;I)V</span><br><span class="line">        11: astore_1</span><br><span class="line">        12: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        15: aload_1</span><br><span class="line">        16: getfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">        19: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        22: getstatic     #9                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        25: aload_1</span><br><span class="line">        26: getfield      #4                  // Field b:I</span><br><span class="line">        29: invokevirtual #11                 // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        32: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 35: 0</span><br><span class="line">        line 36: 12</span><br><span class="line">        line 37: 22</span><br><span class="line">        line 105: 32</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      args</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="方法调用字节码"><a href="#方法调用字节码" class="headerlink" title="方法调用字节码"></a>方法调用字节码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="comment">//invokespecial</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">  <span class="comment">//invokespecial</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">  <span class="comment">//invokevirtual</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Main main = <span class="keyword">new</span> Main();</span><br><span class="line">        main.test1();</span><br><span class="line">        main.test2();</span><br><span class="line">        main.test3();</span><br><span class="line">        main.test4();</span><br><span class="line">        Main.test4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  public singleton.Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 8: 0</span><br><span class="line"></span><br><span class="line">  public void test3();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=0, locals=1, args_size=1</span><br><span class="line">         0: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 37: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=1</span><br><span class="line">         0: new           #2                  // class singleton/Main分配新创建的对象地址，压栈</span><br><span class="line">         3: dup																//复制栈顶引用压栈</span><br><span class="line">         4: invokespecial #3                  // Method &quot;&lt;init&gt;&quot;:()V//栈顶引用对象调用构造方法，弹栈 </span><br><span class="line">         7: astore_1																								//出站，将引用保存到1槽位</span><br><span class="line">         8: aload_1</span><br><span class="line">         9: invokespecial #4                  // Method test1:()V</span><br><span class="line">        12: aload_1</span><br><span class="line">        13: invokespecial #5                  // Method test2:()V</span><br><span class="line">        16: aload_1</span><br><span class="line">        17: invokevirtual #6                  // Method test3:()V		//调用虚拟方法，因为编译时不确定方法的入口地址</span><br><span class="line">        20: aload_1</span><br><span class="line">        21: pop																//静态方法不需要使用对象调用，所以压栈后直接弹栈了</span><br><span class="line">        22: invokestatic  #7                  // Method test4:()V</span><br><span class="line">        25: invokestatic  #7                  // Method test4:()V</span><br><span class="line">        28: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 41: 0</span><br><span class="line">        line 42: 8</span><br><span class="line">        line 43: 12</span><br><span class="line">        line 44: 16</span><br><span class="line">        line 45: 20</span><br><span class="line">        line 46: 25</span><br><span class="line">        line 115: 28</span><br><span class="line">    MethodParameters:</span><br><span class="line">      Name                           Flags</span><br><span class="line">      args</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="多态方法查找实际调用地址"><a href="#多态方法查找实际调用地址" class="headerlink" title="多态方法查找实际调用地址"></a>多态方法查找实际调用地址</h3><p>当执行invokevirtual指令时</p>
<ol>
<li>先通过栈帧中的对象引用找到对象</li>
<li>分析对象头，找到对象的实际Class</li>
<li>Class结构中有vtable，它在类加载的链接阶段就已经根据方法的重写规则生成好了</li>
<li>查表得到方法的具体地址</li>
<li>执行方法的字节码</li>
</ol>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>Exception table</p>
<p>​    from        to        target        type</p>
<p>​            2        5            8                java/lang/NullPointerException</p>
<p>​            2        5            22                java/lang/Exception</p>
<h3 id="multi-catch情况"><a href="#multi-catch情况" class="headerlink" title="multi-catch情况"></a>multi-catch情况</h3><p>多种异常可以捕获多种catch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line">&#125;catch(NoSuchMethodException | IllegalAccessException | InvocationTargetException)</span><br></pre></td></tr></table></figure>

<h3 id="finally字节码"><a href="#finally字节码" class="headerlink" title="finally字节码"></a>finally字节码</h3><p>finally块的字节码分别加在try块的最后和catch块的最后</p>
<p>如果在finally中出现了return，会吞掉throw，千万不要在finally中return</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span></span>;</span><br><span class="line">   descriptor: ()I</span><br><span class="line">   flags: ACC_PUBLIC</span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">3</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">        <span class="number">0</span>: iconst_1</span><br><span class="line">        <span class="number">1</span>: iconst_0</span><br><span class="line">        <span class="number">2</span>: idiv</span><br><span class="line">        <span class="number">3</span>: istore_1</span><br><span class="line">        <span class="number">4</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">6</span>: istore_2				<span class="comment">//将栈顶元素进行暂存</span></span><br><span class="line">        <span class="number">7</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">9</span>: ireturn</span><br><span class="line">       <span class="number">10</span>: astore_1</span><br><span class="line">       <span class="number">11</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/Error</span></span><br><span class="line">       <span class="number">14</span>: dup</span><br><span class="line">       <span class="number">15</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String error</span></span><br><span class="line">       <span class="number">17</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method java/lang/Error.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">       <span class="number">20</span>: athrow</span><br><span class="line">       <span class="number">21</span>: astore_3</span><br><span class="line">       <span class="number">22</span>: bipush        <span class="number">30</span>											<span class="comment">//注意，此处并没有throw出去</span></span><br><span class="line">       <span class="number">24</span>: ireturn</span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">0</span>     <span class="number">7</span>    <span class="number">10</span>   Class java/lang/Exception</span><br><span class="line">            <span class="number">0</span>     <span class="number">7</span>    <span class="number">21</span>   any</span><br><span class="line">           <span class="number">10</span>    <span class="number">22</span>    <span class="number">21</span>   any</span><br><span class="line">     LineNumberTable:</span><br><span class="line">       line <span class="number">41</span>: <span class="number">0</span></span><br><span class="line">       line <span class="number">43</span>: <span class="number">4</span></span><br><span class="line">       line <span class="number">48</span>: <span class="number">7</span></span><br><span class="line">       line <span class="number">45</span>: <span class="number">10</span></span><br><span class="line">       line <span class="number">46</span>: <span class="number">11</span></span><br><span class="line">       line <span class="number">48</span>: <span class="number">21</span></span><br><span class="line">     StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">       frame_type = <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">         stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Exception</span> ]</span></span><br><span class="line"><span class="class">       <span class="title">frame_type</span> </span>= <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">         stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Throwable</span> ]</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_1</span><br><span class="line">         <span class="number">1</span>: iconst_0</span><br><span class="line">         <span class="number">2</span>: idiv</span><br><span class="line">         <span class="number">3</span>: istore_1</span><br><span class="line">         <span class="number">4</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">6</span>: istore_2			</span><br><span class="line">         <span class="number">7</span>: iload_2			</span><br><span class="line">         <span class="number">8</span>: ireturn</span><br><span class="line">         <span class="number">9</span>: astore_1</span><br><span class="line">        <span class="number">10</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/Error</span></span><br><span class="line">        <span class="number">13</span>: dup</span><br><span class="line">        <span class="number">14</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String error</span></span><br><span class="line">        <span class="number">16</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method java/lang/Error.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">19</span>: athrow</span><br><span class="line">        <span class="number">20</span>: astore_3</span><br><span class="line">        <span class="number">21</span>: aload_3</span><br><span class="line">        <span class="number">22</span>: athrow</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">0</span>     <span class="number">7</span>     <span class="number">9</span>   Class java/lang/Exception</span><br><span class="line">             <span class="number">0</span>     <span class="number">7</span>    <span class="number">20</span>   any</span><br><span class="line">             <span class="number">9</span>    <span class="number">21</span>    <span class="number">20</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">41</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">43</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">45</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">46</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">47</span>: <span class="number">20</span></span><br><span class="line">        line <span class="number">48</span>: <span class="number">21</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">73</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Exception</span> ]</span></span><br><span class="line"><span class="class">        <span class="title">frame_type</span> </span>= <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Throwable</span> ]</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i = <span class="number">12</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">11</span></span><br><span class="line">         <span class="number">5</span>: istore_2					<span class="comment">//注意，此处try正常执行到return语句，会将return结果存到slot2进行暂存，固定返回值，执行finally会返回11</span></span><br><span class="line">         <span class="number">6</span>: bipush        <span class="number">12</span></span><br><span class="line">         <span class="number">8</span>: istore_1</span><br><span class="line">         <span class="number">9</span>: iload_2</span><br><span class="line">        <span class="number">10</span>: ireturn</span><br><span class="line">        <span class="number">11</span>: astore_2</span><br><span class="line">        <span class="number">12</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/Error</span></span><br><span class="line">        <span class="number">15</span>: dup</span><br><span class="line">        <span class="number">16</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String error</span></span><br><span class="line">        <span class="number">18</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method java/lang/Error.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">21</span>: athrow</span><br><span class="line">        <span class="number">22</span>: astore_3</span><br><span class="line">        <span class="number">23</span>: bipush        <span class="number">12</span></span><br><span class="line">        <span class="number">25</span>: istore_1</span><br><span class="line">        <span class="number">26</span>: aload_3</span><br><span class="line">        <span class="number">27</span>: athrow</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">11</span>   Class java/lang/Exception</span><br><span class="line">             <span class="number">3</span>     <span class="number">6</span>    <span class="number">22</span>   any</span><br><span class="line">            <span class="number">11</span>    <span class="number">23</span>    <span class="number">22</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">40</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">43</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">48</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">43</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">45</span>: <span class="number">11</span></span><br><span class="line">        line <span class="number">46</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">48</span>: <span class="number">22</span></span><br><span class="line">        line <span class="number">49</span>: <span class="number">26</span></span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">11</span></span><br><span class="line">          locals = [ <span class="class"><span class="keyword">class</span> <span class="title">singleton</span>/<span class="title">Main</span>, <span class="title">int</span> ]</span></span><br><span class="line"><span class="class">          <span class="title">stack</span> </span>= [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Exception</span> ]</span></span><br><span class="line"><span class="class">        <span class="title">frame_type</span> </span>= <span class="number">74</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ <span class="class"><span class="keyword">class</span> <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Throwable</span> ]</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
